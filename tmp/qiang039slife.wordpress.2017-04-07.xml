<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress/4.7.3" created="2017-04-07 13:45" -->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>Qiang&#039;s Life</title>
	<link>https://hackqiang.org</link>
	<description>夜阑卧听风吹雨</description>
	<pubDate>Fri, 07 Apr 2017 13:45:23 +0000</pubDate>
	<language>zh-CN</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>https://hackqiang.org</wp:base_site_url>
	<wp:base_blog_url>https://hackqiang.org</wp:base_blog_url>

	<wp:author><wp:author_id>1</wp:author_id><wp:author_login><![CDATA[qiang]]></wp:author_login><wp:author_email><![CDATA[hackqiang@qq.com]]></wp:author_email><wp:author_display_name><![CDATA[qiang]]></wp:author_display_name><wp:author_first_name><![CDATA[]]></wp:author_first_name><wp:author_last_name><![CDATA[]]></wp:author_last_name></wp:author>


	<generator>https://wordpress.org/?v=4.7.3</generator>


        <item>
                <title>终于把WordPress给用上了</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前一直在用Z-blog,一个基于ASP的Blog.一直都有一种不知道是不是事实的错觉–ASP不安全(貌似不是错觉),但是这不是我要换WordPress的原因,我的主要原因是….呃,不能说.
言归正传,其实换个Blog程序主要是为了让我有点新鲜感,希望这新鲜感能支持我把我的Blog写下去,要知道我那之前的Z-blog有8个月没更新啦.8个月啊!
废话不多说.这这么着吧.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-16 19:15:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[终于把WordPress给用上了]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Blog"><![CDATA[Blog]]></category><category domain="post_tag" nicename="WordPress"><![CDATA[WordPress]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>你想的通吗–关于fork(2)函数</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天看socket编程，遇到了fork函数，以前学过linux编程，对fork了解一点。可是都说它有两个返回值我就想不通了。
后来我又琢磨了会，查了查man手册，终于被我搞清楚了。fork既然是创建子进程的，那么说它返回两个值不如说是程序执行了两次：一次是父进程在执行，另一次是子进程在执行。
看看下面的代码：
?
View Code
CPP
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
#include <unistd.h>
#include <stdio.h>
int
main
(
)
{
pid_t pid
;
if
(
(
pid
=
fork
(
)
)
<
0
)
{
printf
(
"fork error
\n
"
)
;
return
;
}
else
if
(
pid
==
0
)
printf
(
"output from child:%d
\n
"
,getpid
(
)
)
;
else
printf
(
"output from parent:%d
\n
"
,getpid
(
)
)
;
printf
(
"output %d
\n
"
,pid
)
;
return
0
;
}
编译执行，结果如下：
output from child:4694
output 0
output from parent:4693
output 4694
可以很明显的看出，这个程序执行了两次，第一次fork返回了0，相当于是pid=4694的子进程在执行，第二次返回值为4694，也就是返回了子进程的pid，相当于是父进程在执行。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-17 08:22:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[你想的通吗–关于fork(2)函数]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="fork"><![CDATA[fork]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Linux Socket 学习笔记4–地址结构</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[每一种通信协议都对网络地址格式做了明确的规定，地址族的作用就是指明使用哪一种地址类型。
BSD定义了一个通用的地址结构：
?
View Code
C
1
2
3
4
5
6
7
struct
sockaddr
{
sa_family_t   sa_family
;
char
sa_data
[
14
]
;
}
;
其中sa_family_t是一个无符号的整形。虽然这个通用结构对编程者来说没什么用处，但是它为其他的地址结构提供了一个 重要的参考。
在linux中，使用最普遍的地址族是AF_INET,TCP/IP协议就使用具有IPv4地址的套接口，下面是C语言描述的结构sockaddr_in：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
＃include
&
lt
;
netinet
/
in.
h
&
gt
;
struct
sockaddr_in
{
sa_family_t      sin_family
;
//地址族
unit16_t           sin_port
;
//端口号
struct
in_addr   sin_addr
;
//Internet地址
unsigned
sin_zero
[
8
]
;
//占位字节
}
;
struct
in_addr
{
unit32_t        s_addr
;
}
;
在TCP/IP协议中，sin_family将被初始化为AF_INET，sin_zero[8]的 作用仅仅是对齐，实际使用时不用初始化。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-17 14:26:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记4–地址结构]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="地址结构"><![CDATA[地址结构]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记5–网络字节序</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[对于多字节的数据，不同的CPU有不同的处理方法，主要有以下两种方法：
1.小端字节序。就是把低位字节存储在起始位置。
2.大端字节序。就是把高位字节存储在起始位置。
intel的cpu采用的是小端字节序，而motorola的CPU则用的是大端字节序，如果intel的cpu和motorola的CPU进行直接的通讯，就会产生错误。
现在网络上采用的标准方式是大端字节序。
下面提供几个大／小端字节序相互转换的函数。
?
View Code
C
1
2
3
4
5
6
7
8
9
#include &lt;netinet/in.h&gt;
unsigned
long
htonl
(
unsigned
long
hostlong
)
;
unsigned
short
htons
(
unsigned
short
hostshort
)
;
unsigned
long
ntohl
(
unsigned
long
netlong
)
;
unsigned
short
ntohs
(
unsigned
short
netshort
)
;
这里有个记忆诀窍：”h”代表host,”n”代表network,”s”代表”short”,”l”代表”long”.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-17 15:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记5–网络字节序]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="地址结构"><![CDATA[地址结构]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>WordPress默认主题的修改</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[装上WordPress后就开始寻找主题,以前用Z-BLOG的时候就羡慕WordPress的主题,可现在用上了WordPress后却发现WordPress的主题没想象的好.找来找去也没发现中意的.最后还是觉得默认主题看着舒服.
但是默认主题主要有两个缺点.
1.主页上没有自动显示摘要,导致了页面太长.
2.分页不实用（这貌似是通病）.
3.没有留言（这貌似也是通病）.
先解决分页问题,下载wp-pageavi插件,安装.然后打开主题的index.php文件.
把代码:
?
View Code
PHP
1
2
3
4
<
div
class
=
"navigation"
>
<
div
class
=
"alignleft"
><!--
p next_posts_link
(
__
(
'&laquo; Older Entries'
,
'kubrick'
)
)
;--></
div
>
<
div
class
=
"alignright"
><!--
p previous_posts_link
(
__
(
'Newer Entries &raquo;'
,
'kubrick'
)
)
;--></
div
>
</
div
>
修改为:
?
View Code
PHP
1
<
div
><!--
p
if
(
function_exists
(
'qiang_pagenavi'
)
)
{
qiang_pagenavi
(
)
;
}
--></
div
>
这样分页就解决了,如果想要居中显示,在div里加上“align=”center””属性.
首页摘要显示的修改：
打开index.php。
找到代码：
?
View Code
PHP
1
注意the_content()函数中可能会有参数，不过可以无视它。
修改为：
?
View Code
PHP
1
最后再加上“read more”的按钮：
?
View Code
PHP
1
2
3
<
div
class
=
"details"
>
<
div
class
=
"inside"
><
a href
=
"&lt;?php the_permalink() ?&gt;"
>
Read More »
</
a
></
div
>
</
div
>
这样，不能显示摘要的问题也解决了。
最后解决留言板的问题。
先复制一份single.php，改名为guestbook.php
在guestbook.php的顶部加上下面的代码:
?
View Code
PHP
1
最后，新建一个页面，在页面编辑器的底部，找到页面模板这个选项，从中选择刚才建立的Guestbook,保存就可以了.
但是问题还没完。还要美化一下。
在guestbook.php中把下面的代码删掉：
?
View Code
PHP
1
2
3
4
5
6
7
8
9
10
11
12
13
<
div
>
id
=
"post-"
&
gt
;
<
div
class
=
"entry"
>
' . __('
Read the rest of this entry »
', '
kubrick
') . '
'); ?&gt;
'
<
strong
>
' . __('
Pages
:
', '
kubrick
') . '
</
strong
>
', '
after
' =&gt; '
', '
next_or_number
' =&gt; '
number
')); ?&gt;

trackback from your own site.'
,
'kubrick'
)
,
trackback_url
(
false
)
)
;
?
&
gt
;</
div
>
</
div
>
为留言，也就是评论分页：下载wp-commentnavi插件，用法和wp-pagenavi差不多，这就不多说了。
用同样的方法可以修改search.php,archivers.php等等。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-18 20:34:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[WordPress默认主题的修改]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="WordPress"><![CDATA[WordPress]]></category><category domain="post_tag" nicename="主题"><![CDATA[主题]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>ubuntu上优化SSD</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前几天在笔记本上装上了UBUNTU，因为是SSD硬盘，所以上网找了点资料，优化SSD。在这记录一下。
第一步：
编辑fstab文件：
前几天在笔记本上装上了UBUNTU，因为是SSD硬盘，所以上网找了点资料，优化SSD。在这记录一下。
第一步：
编辑fstab文件：
?
View Code
BASH
1
sudo
gedit
/
etc
/
fstab
把relatime都改成noatime.
第二步，建立一个虚拟磁盘
在fstab最后加上这一行：
tmps /tmp tmps default, noatime,mode=1777 00 0
这样就在每次开机的时候挂载了一个由内存构成的虚拟分区/tmp。
最后，把一些程序的cache都移到这个虚拟分区。
举个例子，把firefox的缓存移到/tmp：
打开firefox,输入about:config打开设置。添加一个新字符串，名称为：browser.cache.disk.parent_directory，值为/tmp。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-19 10:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[ubuntu上优化SSD]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="SSD"><![CDATA[SSD]]></category><category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Linux Socket 学习笔记6–初始化Internet地址</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[Internet地址又可以分为通配地址和特定地址。
通配地址主要是为了适应一台电脑有多块网卡或一张网卡上邦定了多个地址的情况。
下面是初始化一个具有通配地址和通配端口号的AF_INET地址。
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
struct
sockaddr_in adr_inet
;
int
addr_len
;
menset
(
&
amp
;
adr_inet
,
0
,
sizeof
(
adr_inef
)
)
;
addr_inet.
sin_family
=
AF_INET
;
addr_inet.
sin_port
=
ntohs
(
0
)
;
addr_inet.
sin_addr
.
s_addr
=
ntohl
(
INADDR_ANY
)
;
adr_len
=
sizeof
(
adr_inet
)
;
千万要注意这里用的 是函数ntohl()和ntols()。
现在学习初始化一个特定的Internet地址。现看代码吧：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
/*
* Establishing a Specific AF_INET
* Socket Address:
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/socket.h>
#include <netinet/in.h>
/*
* This function reports the error and
* exits back to the shell :
*/
static
void
bail
(
const
char
*
on_what
)
{
perror
(
on_what
)
;
exit
(
1
)
;
}
int
main
(
int
argc
,
char
**
argv
,
char
**
envp
)
{
int
z
;
/* Status return code */
int
sck_inet
;
/* Socket  */
struct
sockaddr_in adr_inet
;
/* AF_INET */
int
len_inet
;
/* length  */
const
unsigned
char
IPno
[
]
=
{
127
,
0
,
0
,
23
/* Local loopback */
}
;
/* Create an IPv4 Internet Socket */
sck_inet
=
socket
(
AF_INET
,
SOCK_STREAM
,
0
)
;
if
(
sck_inet
==
-
1
)
bail
(
"socket()"
)
;
/* Create an AF_INET address */
memset
(
&
amp
;
adr_inet
,
0
,
sizeof
adr_inet
)
;
adr_inet.
sin_family
=
AF_INET
;
adr_inet.
sin_port
=
htons
(
9000
)
;
memcpy
(
&
amp
;
adr_inet.
sin_addr
.
s_addr
,
IPno
,
4
)
;
len_inet
=
sizeof
adr_inet
;
/* Now bind the address to the socket */
z
=
bind
(
sck_inet
,
(
struct
sockaddr
*
)
&
amp
;
adr_inet
,
len_inet
)
;
if
(
z
==
-
1
)
bail
(
"bind()"
)
;
/* Display all of our bound sockets */
system
(
"netstat -pa --tcp 2&gt;/dev/null | "
"sed -n '1,/^Proto/p;/af_inet/p'"
)
;
close
(
sck_inet
)
;
return
0
;
}
这也要注意，用的函数是htonl()。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-19 16:19:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记6–初始化Internet地址]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="地址结构"><![CDATA[地址结构]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>C判断IP地址的分类</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[IP协议中，IP地址被分为5类，即A，B，C，D，E类。其中只有A，B，C类定义了主机的地址。
A类地址中以0开头，网络位为7位，主机位为24位。默认子网掩码为255.0.0.0。
B类地址中以10开头，网络位为14位，主机位为16位。默认子网掩码为255.255.0.0。
C类地址中以110开头，网络位为21位，主机位为8位。默认子网掩码为255.255.255.0。
D类地址中以1110开头，网络位为28位，主机位为0位。默认子网掩码为255.255.255.255。
E类地址中以11110开头，网络位为27位，主机位为0位。默认子网掩码为255.255.255.255。
下面用一个C程序来检验一个IP地址的类别。
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
/* netmask.c:
* Classify an IP address:
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
int
main
(
int
argc
,
char
**
argv
)
{
int
x
;
/* Index variable */
struct
sockaddr_in adr_inet
;
/* AF_INET */
int
len_inet
;
/* length  */
unsigned
msb
;
/* Most significant byte */
char
class
;
char
*
netmask
;
static
struct
{
unsigned
char
ip
[
4
]
;
}
addresses
[
]
=
{
{
{
44
,
135
,
86
,
12
}
}
,
{
{
127
,
0
,
0
,
1
}
}
,
{
{
172
,
16
,
23
,
95
}
}
,
{
{
192
,
168
,
9
,
1
}
}
}
;
for
(
x
=
0
;
x
<
4
;
++
x
)
{
/*
* Set up the socket address, to
* demonstrate how to classify it:
*/
memset
(
&
adr_inet
,
0
,
sizeof
adr_inet
)
;
adr_inet.
sin_family
=
AF_INET
;
adr_inet.
sin_port
=
htons
(
9000
)
;
memcpy
(
&
adr_inet.
sin_addr
.
s_addr
,
addresses
[
x
]
.
ip
,
4
)
;
len_inet
=
sizeof
adr_inet
;
/*
* Classify this address:
*
* 1. Get the Most Significant Byte
* 2. Classify by that byte
*/
msb
=
*
(
unsigned
char
*
)
&
adr_inet.
sin_addr
.
s_addr
;
if
(
(
msb
&
0x80
)
==
0x00
)
{
class
=
'A'
;
netmask
=
"255.0.0.0"
;
}
else
if
(
(
msb
&
0xC0
)
==
0x80
)
{
class
=
'B'
;
netmask
=
"255.255.0.0"
;
}
else
if
(
(
msb
&
0xE0
)
==
0xC0
)
{
class
=
'C'
;
netmask
=
"255.255.255.0"
;
}
else
if
(
(
msb
&
0xF0
)
==
0xE0
)
{
class
=
'D'
;
netmask
=
"255.255.255.255"
;
}
else
{
class
=
'E'
;
netmask
=
"255.255.255.255"
;
}
printf
(
"Address %u.%u.%u.%u is class %c "
"netmask %s
\n
"
,
addresses
[
x
]
.
ip
[
0
]
,
addresses
[
x
]
.
ip
[
1
]
,
addresses
[
x
]
.
ip
[
2
]
,
addresses
[
x
]
.
ip
[
3
]
,
class
,
netmask
)
;
}
return
0
;
}
其实这个程序很简单，我之所以写到这里是因为存IP的定义对我启发很大：
?
View Code
C
1
2
3
4
5
6
7
8
static
struct
{
unsigned
char
ip
[
4
]
;
}
addresses
[
]
=
{
{
{
44
,
135
,
86
,
12
}
}
,
{
{
127
,
0
,
0
,
1
}
}
,
{
{
172
,
16
,
23
,
95
}
}
,
{
{
192
,
168
,
9
,
1
}
}
}
;
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-20 07:24:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[C判断IP地址的分类]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="TCP/IP"><![CDATA[TCP/IP]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>Linux Socket 学习笔记7–一些地址转换函数</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[主要的地址转换函数有:
inet_addr(3)
inet_aton(3)
inet_ntoa(3)
inet_network(3)
inet_lnaof(3)
inet_netof(3)
inet_makeaddr(3)
inet_addr(3)
它的作用是把字符串转换为点分十进制IP地址,这个函数现在已经很少使用,但是之前文件中用的很多.现在可以用inet_aton(3)取代它.
定义:
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
unsigned long inet_addr(const char *string);
如果成功就返回一个32位二进制(网络字节序),失败返回INADDR_NONE.
inet_aton(3)
这个函数是函数inet_addr的改进.
定义:
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
int inet_aton(const char *string,struct in_addr *addr);
输出参数addr是被更新的结构,如果成功返回非0值,否则返回0.
inet_ntoa(3)
它的作用和函数inet_aton正好相反.
定义:
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
char *inet_ntoa(struct in_addr addr);
注意点:inet_ntoa的返回值在下一次调用之前有效.
inet_network(3)
这个函数的作用是把点十进制的IP地址转换成主机序的32位二进制IP地址.
定义:
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
unsigned long inet_network(const char *addr);
如果参数不正确,返回值为0xFFFFFFFF.
inet_lnaof(3)
这个函数的作用是把套接口地址中的IP地址(网络字节序)转换为没有网络位的主机ID(主机字节序).
定义:
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
unsigned long inet_lnaof(struct in_addr addr);
inet_netof(3)
这个函数的作用是把套接口地址中的IP地址(网络字节序)转换为没有网络位的网络ID(主机字节序).
定义:
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
unsigned long inet_netof(struct in_addr addr);
注意这个函数的返回值是右端对齐,主机位被移出.
inet_makeaddr(3)
它的作用是将网络位和主机位合并组成一个新的IP地址.
定义:
#include<sys/socket.h>
#include<netinet/in.h>
#include<arpa/inet.h>
struct in_addr inet_makeaddr(int net,int host);
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-22 16:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记7–一些地址转换函数]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="TCP/IP"><![CDATA[TCP/IP]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>日食</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[好久之前就知道今天，不，是昨天有日食，早上起来刷牙洗脸吃饭都结束就8点了。
网上google了一下，知道时间大约是8点20开始，于是我就上了阁楼，爬到了屋顶，等待日食。
终于来了，和我想象的一样，慢慢变化。。。
本来以为能看个全食，没想到太阳只剩一丁点的时候又慢慢变大了。。。结果就看了偏食。
看了一个小时就下去了。唉，日食，不过如此嘛！
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-23 00:04:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[日食]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="日食"><![CDATA[日食]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>Linux Socket 学习笔记8-socket(2)函数</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前用过函数socket,但是没做说明,今天就好好研究下这个函数.
语法定义:
#include
#Incldue
int socket(int domain,int type,int protocol);
参数说明:
domain:协议族.一般有两个值:PF_LOCAL和PF_INET.
type:套接口类型.一般用到两个:SOCK_STREAM和SOCK_DGRAM.
protocol:使用的协议.我们一般设置它为0.
简单的说SOCK_STREAM是用的TCP协议，
SOCK_DGRAM是使用UDP协议。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-23 09:10:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记8-socket(2)函数]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="TCP/IP"><![CDATA[TCP/IP]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>VC++复习笔记1-Windows程序的运行机制</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[没用VC++很久了,趁这个暑假有时间复习一下吧.
看了孙鑫老师的视频,感觉很多地方都生疏了.今天就复习第一章,Windows程序的运行机制.
先说一下大致的结构:
首先是入口函数WinMain,然后定义一个窗口类,接着注册窗口类,再创建窗口,显示窗口,编写消息循环机制,编写回调函数.
下面是一个简单的Windows程序的C代码:
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
#include <windows.h>
#include <stdio.h>
LRESULT CALLBACK WinProc
(
HWND hwnd
,
// handle to window
UINT uMsg
,
// message identifier
WPARAM wParam
,
// first message parameter
LPARAM lParam
// second message parameter
)
;
int
WINAPI WinMain
(
HINSTANCE hInstance
,
// handle to current instance
HINSTANCE hPrevInstance
,
// handle to previous instance
LPSTR lpCmdLine
,
// command line
int
nCmdShow
// show state
)
{
WNDCLASS wndcls
;
wndcls.
lpfnWndProc
=
WinProc
;
//注意这：回调函数名
wndcls.
lpszClassName
=
"WinClass"
;
//注意：类名
...

RegisterClass
(
&
amp
;
wndcls
)
;
//注册窗口类
HWND hwnd
;
hwnd
=
CreateWindow
(
"WinClass"
,
"这是标题"
,
WS_OVERLAPPEDWINDOW
,
0
,
0
,
600
,
400
,
NULL
,
NULL
,
hInstance
,
NULL
)
;
//具体参数参阅MSDN
ShowWindow
(
hwnd
,
SW_SHOWNORMAL
)
;
//显示窗口
UpdateWindow
(
hwnd
)
;
//刷新窗口
MSG msg
;
while
(
GetMessage
(
&
amp
;
msg
,
NULL
,
0
,
0
)
)
{
TranslateMessage
(
&
amp
;
msg
)
;
//翻译消息
DispatchMessage
(
&
amp
;
msg
)
;
//将消息交给回调函数处理
}
return
0
;
}
LRESULT CALLBACK WinSunProc
(
//回调函数
HWND hwnd
,
// handle to window
UINT uMsg
,
// message identifier
WPARAM wParam
,
// first message parameter
LPARAM lParam
// second message parameter
)
{
switch
(
uMsg
)
//消息处理
{
case
WM_CLOSE
:
DestroyWindow
(
hwnd
)
;
break
;
case
WM_DESTROY
:
PostQuitMessage
(
0
)
;
break
;
default
:
return
DefWindowProc
(
hwnd
,
uMsg
,
wParam
,
lParam
)
;
}
return
0
;
}
这里要注意窗口类里的lpfnWndProc和lpszClassName两个参数是与回调函数和CreateWindow里的参数是对应的.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-23 13:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[VC++复习笔记1-Windows程序的运行机制]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="VC++"><![CDATA[VC++]]></category><category domain="post_tag" nicename="回调函数"><![CDATA[回调函数]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux下的出错处理</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在Linux出错时，常常返回一个负值，全局整型变量errno的值就代表了出错代码。
这个全局变量包含在errno.h中，它的定义是：
extern int errno;
在多线程环境下，它被定义成：
extern int *__errno_location(void);
#define errno (*__errno_location())
下面有两个函数帮忙打印出错信息：
1。＃include<string.h>
char *strerror(int errnum);
这个函数将errnum（也就是errno）映射为一个出错信息的字符串。
2。#include<stdio.h>
void perror(const char *msg);
这个函数首先输出由msg指出的字符串，然后是冒号，一个空格，接着是对应errno值的出错信息，最后是一个换行符。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-24 10:16:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux下的出错处理]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="errno"><![CDATA[errno]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>VC++复习笔记2-简单的MFC运行机理</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[本来是不想做这个笔记的,因为MFC的运行过程太复杂了.我琢磨了一下午还只是弄懂了点皮毛.现在把我弄懂的部分记录下.
首先程序建立一个全局对象theApp,调用父类的构造函数,再调用派生类的构造函数.
接着就进入了WinMain()函数,调用AfxWinMain,再调用InitInstance()函数,完成窗口创建显示.
然后进入PreCreateWindow()函数,调用AfxEndDeferRegisterClass()函数,完成窗口注册.
最后进入Run()函数,进行消息队列.
我现在就弄懂这些,再深点就不明白了.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-24 19:56:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[VC++复习笔记2-简单的MFC运行机理]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="MFC"><![CDATA[MFC]]></category><category domain="post_tag" nicename="VC++"><![CDATA[VC++]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>Linux Socket 学习笔记8-bind(2)函数</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前学了创建套接口的函数socket().创建好套接口后第二步就是地址绑定,用函数bind(2)实现.
函数定义：
?
View Code
C
1
2
3
#include<sys/types.h>
#include<sys/socket.h>
int
bind
(
int
sockfd
,
struct
sockaddr
*
addr
,
int
addrlen
)
;
参数说明：
之前学了创建套接口的函数socket().创建好套接口后第二步就是地址绑定,用函数bind(2)实现.
函数定义：
?
View Code
C
1
2
3
#include<sys/types.h>
#include<sys/socket.h>
int
bind
(
int
sockfd
,
struct
sockaddr
*
addr
,
int
addrlen
)
;
参数说明：
sockfd:套接口描述符。
addr:套接口地址。
addrlen:地址结构的长度。
返回值：
如果调用成功返回0，否则返回－1，出错信息在errno中查看。
注意这里的套接口地址是通用结构，我们在使用时一般要进行强制转换。
下面是一段关于bind2的示例代码：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
.....
int
sockfd
;
struct
sockaddr_in addr
;
int
len_addr
=
sizeof
(
addr
)
;
addr.
sin_family
=
AF_INET
;
addr.
sin_port
=
hton
(
8888
)
;
inet_aton
(
"127.0.0.44"
,&
amp
;
addr.
sin_addr
)
;
sockfd
=
socket
(
AF_INET
,
SOCK_STREAM
,
0
)
;
bind
(
sockfd
,
(
struct
sockaddr
*
)
&
amp
;
addr
,
len_addr
)
;
....
sockfd:套接口描述符。
addr:套接口地址。
addrlen:地址结构的长度。
返回值：
如果调用成功返回0，否则返回－1，出错信息在errno中查看。
注意这里的套接口地址是通用结构，我们在使用时一般要进行强制转换。
下面是一段关于bind2的示例代码：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
.....
int
sockfd
;
struct
sockaddr_in addr
;
int
len_addr
=
sizeof
(
addr
)
;
addr.
sin_family
=
AF_INET
;
addr.
sin_port
=
hton
(
8888
)
;
inet_aton
(
"127.0.0.44"
,&
amp
;
addr.
sin_addr
)
;
sockfd
=
socket
(
AF_INET
,
SOCK_STREAM
,
0
)
;
bind
(
sockfd
,
(
struct
sockaddr
*
)
&
amp
;
addr
,
len_addr
)
;
....
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-25 10:37:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记8-bind(2)函数]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="bind"><![CDATA[bind]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux下不带缓冲的I/O操作函数1</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[首先了解“文件描述符”：对于内核而言，所有打开的文件都是通过文件描述符引用。它是一个非负整数，它的范围是0～OPEN_MAX。
Linux系统下大多数文件I/O操作只要5个函数就可以：
open
read
write
lseek
close
调用函数open可以打开或创建一个文件。
#include<fcntl.h>
int open(const char *filename,int flag,/*mode_t mode*/);
这里的第三个参数只在创建文件时才有。关于flag的取值，可以man一下。
如果成功返回文件描述符，否则返回－1。
调用creat可以创建一个新文件。
#include<fcntl.h>
int creat(const char *filename,int flag,mode_t mode);
其实它就等效于open(filename,O_WRONLY | O_CREAT | O_TRUNC,mode);
如果成功返回为文件只写打开的文件描述符，否则返回－1。
调用close函数关闭一个打开的文件。
＃include<unistd.h>
int close(int file);
如果成功返回0，否则返回－1。
关于函数lseek
每打开一个文件都有一个于之对应的“当前文件偏移量”，系统默认打开一个文件的偏移量为0。函数lseek可以设置这个偏移量。
#include<unistd.h>
off_t lseek(int file,off_t offset,int whence);
参数offseet的解释与whence有关：
若whence是SEEK_SET,则将文件的偏移量设置为据文件开始处offset个字节处。
若whence是SEEK_CUR,则将文件的偏移量设置为当前值加offset。
若whence是SEEK_END,则将文件的偏移量设置为文件长度加offset。
如果函数成功执行，返回新的偏移量，否则返回－1，错误信息可以查看errno。
调用read函数从打开的文件中读取数据。
#include<unistd.h>
ssize_t read(int file,void *buf,size_t nbytes);
如果调用成功，返回读到的字节数，如已读到文件尾则返回0，出错就返回－1。
调用write函数向打开的文件写数据。
#include<unistd.h>
ssize_t write(int file,const char *buf,size_t nbytes);
若调用成功返回已写字节数，失败返回－1，通常返回值如果与nbytes相同，则表示出错。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-25 10:38:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux下不带缓冲的I/O操作函数1]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="I/O"><![CDATA[I/O]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Linux下不带缓冲的I/O操作函数2</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[原子操作是指由多步组成的操作，这些操作要不全不发生，要不全发生。这对于文件系统的读写是非常重要的。
pread和pwrite是两个典型的原子操作函数。
#include <unistd.h>
ssize_t  pread(int file,void *buf,size_t nbytes,off_t offset);
//成功返回读到的字符数，若读到尾返回0，出错返回－1。
ssize_t  pwrite(int file,const void *buf,size_t nbytes,off_t offset);
//成功返回已写字节数，出错返回－1。
pread相当于顺寻调用lseek和read,但是无法中断它们的操作。
pwrite类似。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-26 09:23:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux下不带缓冲的I/O操作函数2]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="原子操作"><![CDATA[原子操作]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux下不带缓冲的I/O操作函数3</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[fcntl函数可以改变已打开的文件的性质：
#include<unistd.h>
#include<fcntl.h>
int fcntl(int fd , int cmd);
int fcntl(int fd,int cmd,long arg);
int fcntl(int fd,int cmd,struct flock * lock);
参数fd代表欲设置的文件描述词，参数cmd代表欲操作的指令。
fcntl有5个功能：
cmd=F_DUPFD:复制现有的描述符。
cmd=F_GETFD或F_SETFD:获得/设置文件描述符标记。
cmd=F_GETFL或F_SETFL:获得/设置文件状态标志。
cmd=F_GETOWN或F_SETOWN:获得/设置异步I/O所有权。
cmd=F_GETLK或F_SETLK:获得/设置记录锁。
下面的两个函数可以用来复制一个现存的文件描述符：
#include<unistd.h>
int dup(int file);
int dup2(int file,int file2);
成功返回新描述符，否则返回－1。
调用dup(file)等效于：
fcntl(file,F_DUPFD,0);
调用dup2(file,file2)等效于：
close(file2);
fcntl(file,F_DUPFD,file2);
但dup2是原子操作。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-26 10:11:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux下不带缓冲的I/O操作函数3]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记10-面向非连接的协议(UDP)</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[UDP协议相对于TCP/IP协议主要有下面几个优点：
简单：不需要建立连接。
灵活：每一次的消息都可以发送给不同的人。
高效：没有复杂的“三次握手”。
具有广播能力：一个消息可以同时发给多个接收者。
当然，它也有显著的缺点：
不可靠。
信息无序性。
消息的大小有限制。
在具体实现UDP连接之前，先看看下面两个函数：
sendto(2)用来将数据由指定的socket传给对方主机。
定义：
#include < sys/types.h >
#include < sys/socket.h >
int sendto ( int s ,const void * msg,int len, unsigned int flags,conststruct sockaddr * to , int tolen ) ;
参数说明：
参数s为已建好连线的socket,如果利用UDP协议则不需经过连线操作。参数msg指向欲连线的数据内容，参数flags 一般设0。参数to用来指定欲传送的网络地址。参数tolen为sockaddr的结果长度。
返回值
成功则返回实际传送出去的字符数，失败返回－1，错误原因存于errno 中。
recvfrom(2)用来接收远程主机经指定的socket 传来的数据。
定义:
#include<sys/types.h>
#include<sys/socket.h>
int recvfrom(int s,void *buf,int len,unsigned int flags ,struct sockaddr *from ,int *fromlen);
参数说明：
接收数据存到由参数buf 指向的内存空间，参数len 为可接收数据的最大长度。参数flags 一般设0。参数from用来指定欲传送的网络地址。参数fromlen为sockaddr的结构长度。
返回值：
成功则返回接收到的字符数，失败则返回-1，错误原因存于errno中。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-26 10:41:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记10-面向非连接的协议(UDP)]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="UDP"><![CDATA[UDP]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>VC++复习笔记3-MFC消息映射机制</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在WINDOWS程序中消息的处理是通过一个消息队列来管理的,但在实际的MFC编程的时候,我们要对程序进行一个消息响应的时候并不清楚ClassWizard具体为程序添加了什么,只看到了一个消息处理函数的实现接口.具体ClassWizard做了什么工作呢?
现在以一个例子说明一下MFC消息映射的原理.新建一个MFC工程,取名为Test,选择单文档就行.
打开ClassWizard,为类CTestView增加一个响应鼠标左键按下的消息.除了消息响应的实现处,我们发现以下2个地方加入了代码:
在类CTestView的头文件TestView.h中:
?
View Code
CPP
1
2
3
4
5
//{{AFX_MSG(CTestView)
afx_msg
void
OnLButtonDown
(
UINT nFlags,CPoint point
)
;
//这里为增加内容.声明消息响应的函数原型.
//}}AFX_MSG
在源文件TestView.cpp中:
?
View Code
CPP
1
2
3
4
5
6
7
8
9
10
BEGIN_MESSAGE_MAP
(
CTestView, CView
)
//{{AFX_MSG_MAP(CTestView)
ON_WM_LBUTTONDOWN
(
)
//新增加部分,用于关联OnLButtonDown和WM_LBUTTONDOWN
//}}AFX_MSG_MAP
// Standard printing commands
ON_COMMAND
(
ID_FILE_PRINT, CView
::
OnFilePrint
)
ON_COMMAND
(
ID_FILE_PRINT_DIRECT, CView
::
OnFilePrint
)
ON_COMMAND
(
ID_FILE_PRINT_PREVIEW, CView
::
OnFilePrintPreview
)
END_MESSAGE_MAP
(
)
在程序运行时消息的具体实现过程是这样的:
MFC维护了一个句柄与C++指针类的映射。通过句柄可以找到对应的类指针，把这个指针交给基类，调用函数WindowProc，再由函数WindowProc调用函数OnWndMsg，通过查找头文件里响应函数原型的声明和源文件的消息映射，进行消息处理.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-26 17:37:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[VC++复习笔记3-MFC消息映射机制]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="MFC"><![CDATA[MFC]]></category><category domain="post_tag" nicename="消息映射"><![CDATA[消息映射]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记11-一个基于UDP协议的实例</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[要使用UDP协议进行通讯，需要以下几个步骤：
服务器端（接收着端）：
创建套接字。
将创建的套接字绑定到本地的地址和端口上。
等待接收数据。
关闭套接字。
客户端（发送端）：
创建套接字。
向服务器端发送数据。
关闭套接字。
服务器端代码：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
/*
* server :
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
int
main
(
int
argc
,
char
**
argv
)
{
int
z
;
char
*
srvr_addr
=
NULL
;
struct
sockaddr_in adr_inet
;
/* AF_INET */
struct
sockaddr_in adr_clnt
;
/* AF_INET */
int
len_inet
;
/* length  */
int
s
;
/* Socket */
char
dgram
[
512
]
;
/* Recv buffer */
char
dtfmt
[
512
]
;
/* Date/Time Result */
srvr_addr
=
"127.0.0.23"
;
/*
* Create a UDP socket to use :
*/
s
=
socket
(
AF_INET
,
SOCK_DGRAM
,
0
)
;
/*
* Create a socket address, for use
* with bind(2) :
*/
memset
(
&
adr_inet
,
0
,
sizeof
adr_inet
)
;
adr_inet.
sin_family
=
AF_INET
;
adr_inet.
sin_port
=
htons
(
9090
)
;
adr_inet.
sin_addr
.
s_addr
=
inet_addr
(
srvr_addr
)
;
len_inet
=
sizeof
adr_inet
;
/*
* Bind a address to our socket, so that
* client programs can contact this
* server:
*/
z
=
bind
(
s
,
(
struct
sockaddr
*
)
&
adr_inet
,
len_inet
)
;
/*
* Now wait for requests:
*/
for
(
;;
)
{
/*
* Block until the program receives a
* datagram at our address and port:
*/
len_inet
=
sizeof
adr_clnt
;
z
=
recvfrom
(
s
,
/* Socket */
dgram
,
/* Receiving buffer */
sizeof
dgram
,
/* Max recv buf size */
0
,
/* Flags: no options */
(
struct
sockaddr
*
)
&
adr_clnt
,
/* Addr */
&
len_inet
)
;
/* Addr len, in & out */
/*
* Process the request :
*/
dgram
[
z
]
=
0
;
/* null terminate */
printf
(
"%s:%s
\n
"
,
inet_ntoa
(
adr_clnt.
sin_addr
)
,
dgram
)
;
fputs
(
"Enter:"
,
stdout
)
;
if
(
!
fgets
(
dtfmt
,
sizeof
dtfmt
,
stdin
)
)
break
;
z
=
sendto
(
s
,
/* Socket to send result */
dtfmt
,
/* The datagram result to snd */
strlen
(
dtfmt
)
,
/* The datagram lngth */
0
,
/* Flags: no options */
(
struct
sockaddr
*
)
&
adr_clnt
,
/* addr */
len_inet
)
;
/* Client address length */
}
/*
* Close the socket and exit:
*/
close
(
s
)
;
return
0
;
}
客户端代码：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
/*
* client :
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
int
main
(
int
argc
,
char
**
argv
)
{
int
z
;
int
x
;
char
*
srvr_addr
=
NULL
;
struct
sockaddr_in adr_srvr
;
/* AF_INET */
struct
sockaddr_in adr
;
/* AF_INET */
int
len_inet
;
/* length  */
int
s
;
/* Socket */
char
dgram
[
512
]
;
/* Recv buffer */
srvr_addr
=
"127.0.0.23"
;
/*
* Create a socket address, to use
* to contact the server with:
*/
memset
(
&
adr_srvr
,
0
,
sizeof
adr_srvr
)
;
adr_srvr.
sin_family
=
AF_INET
;
adr_srvr.
sin_port
=
htons
(
9090
)
;
adr_srvr.
sin_addr
.
s_addr
=
inet_addr
(
srvr_addr
)
;
len_inet
=
sizeof
adr_srvr
;
/*
* Create a UDP socket to use :
*/
s
=
socket
(
AF_INET
,
SOCK_DGRAM
,
0
)
;
for
(
;;
)
{
/*
* Prompt user for a date format string:
*/
fputs
(
"Enter:"
,
stdout
)
;
if
(
!
fgets
(
dgram
,
sizeof
dgram
,
stdin
)
)
break
;
/* EOF */
z
=
strlen
(
dgram
)
;
if
(
z
>
0
&&
dgram
[
--
z
]
==
'
\n
'
)
dgram
[
z
]
=
0
;
/* Stomp out newline */
/*
* Send format string to server:
*/
z
=
sendto
(
s
,
/* Socket to send result */
dgram
,
/* The datagram result to snd */
strlen
(
dgram
)
,
/* The datagram lngth */
0
,
/* Flags: no options */
(
struct
sockaddr
*
)
&
adr_srvr
,
/* addr */
len_inet
)
;
/* Server address length */
/*
* Wait for a response :
*/
x
=
sizeof
adr
;
z
=
recvfrom
(
s
,
/* Socket */
dgram
,
/* Receiving buffer */
sizeof
dgram
,
/* Max recv buf size */
0
,
/* Flags: no options */
(
struct
sockaddr
*
)
&
adr
,
/* Addr */
&
x
)
;
/* Addr len, in & out */
dgram
[
z
]
=
0
;
/* null terminate */
printf
(
"%s:%s
\n
"
,
inet_ntoa
(
adr.
sin_addr
)
,
dgram
)
;
}
/*
* Close the socket and exit:
*/
close
(
s
)
;
return
0
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-27 11:40:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记11-一个基于UDP协议的实例]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Linux"><![CDATA[Linux]]></category><category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="UDP"><![CDATA[UDP]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>用GDB调试时常用的几个命令</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[要使用GDB进行调试，要在编译的时候加上“-g”选项：
例：
?
View Code
BASH
1
2
$
gcc
-g
main.c
-o
main
$
gdb
main
以下是几个常用命令：
help:帮助命令，可以直接在help后加要查询的命令。
list:列出源代码，一次列十行。也可以在后面加上函数名查询函数。
start:开始调试，程序运行到main函数入口等待操作。
next(n):单步调试，不进入函数。
setp(s):单步调试，如有函数进入。
backtrack(bt):查看函数调用帧栈。
info locals:查看局部变量的值。
frame:选择帧栈。
print(p):打出指定变量值。
print(p) var=x:将变量var的值设置为x。
set var=x:功能同上。
finish:一直运行到当前函数返回为止。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-27 19:19:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[用GDB调试时常用的几个命令]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GDB"><![CDATA[GDB]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>GDB中断点的设置</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在进行调试程序的时候会经常需要设置断点，GDB很好的支持了断点。
设置一个断点的命令是break(b).后面加行数或函数名，生成的每个断点都有一个编号。下面列出几个在设置断点时常用到的函数：
continue(c):从当前位置连续运行，直到遇到断点。
run(r):从程序开始处连续运行，直到断点。
info(i) breakpoints :显示所有断点。
delete breakpoints X:删除编号为x的断点。
disable/enable breakpoints x :使编号为x的断点失效/生效。
display s:跟踪查看变量s的值。
undisplay s:取消变量s的跟踪。
此外，GDB还可以让一个断点在满足一定的条件才有效。例如：
>break 5 if x>0
它的意思是在第5行设置一个断点，但只当x>0时断点才生效。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-28 12:41:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[GDB中断点的设置]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GDB"><![CDATA[GDB]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Linux Socket 学习笔记12-面向连接的协议</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前学了面向非连接的协议UDP协议，现在开始学习另一个重要的面向连接的协议－－TCP/IP协议。相对于UDP协议，TCP/IP协议将能很好的处理以下几个问题：
分组的丢失
超时和重发
接收顺序的混乱
流控
在学习TCP/IP协议之前我们先要了解几个属于Internet服务的TCP/IP附属设施。
/etc/services文件
这个文件将某个特定的Internet服务名映射到协议的端口号。
/etc/protocols文件
这个文件包含了已定义的Internet协议值。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-28 13:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记12-面向连接的协议]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="TCP/IP"><![CDATA[TCP/IP]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记13-TCP/IP协议实现的客户端</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[要基于TCP/IP协议进行通信，客户端需要进行以下几个步骤：
建立套接口。
连接到服务器。
进行通讯。
关闭连接。
其中进行通讯使用read(2)和write(2)函数。
下面这段客户端的代码与服务器进行通讯，取得服务器时间。用到的服务为daytime,端口号为13，使用的协议为TCP/IP协议。
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
/* daytime.c:
* Example daytime client :
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
static
void
bail
(
const
char
*
on_what
)
{
fputs
(
strerror
(
errno
)
,
stderr
)
;
fputs
(
": "
,
stderr
)
;
fputs
(
on_what
,
stderr
)
;
fputc
(
'
\n
'
,
stderr
)
;
exit
(
1
)
;
}
int
main
(
int
argc
,
char
**
argv
)
{
int
z
;
struct
sockaddr_in adr_srvr
;
/* AF_INET */
int
len_inet
;
/* length  */
int
s
;
/* Socket */
char
dtbuf
[
128
]
;
/* Date/Time info */
/*
* Create a server socket address:
*/
memset
(
&
amp
;
adr_srvr
,
0
,
sizeof
adr_srvr
)
;
adr_srvr.
sin_family
=
AF_INET
;
adr_srvr.
sin_port
=
htons
(
13
)
;
adr_srvr.
sin_addr
.
s_addr
=
inet_addr
(
"127.0.0.1"
)
;
len_inet
=
sizeof
adr_srvr
;
/*
* Create a TDP/IP socket to use :
*/
s
=
socket
(
PF_INET
,
SOCK_STREAM
,
0
)
;
if
(
s
==
-
1
)
bail
(
"socket()"
)
;
/*
* Connect to the server:
*/
z
=
connect
(
s
,&
amp
;
adr_srvr
,
len_inet
)
;
if
(
z
==
-
1
)
bail
(
"connect(2)"
)
;
/*
* Read the date/time info:
*/
z
=
read
(
s
,&
amp
;
dtbuf
,
sizeof
dtbuf
-
1
)
;
if
(
z
==
-
1
)
bail
(
"read(2)"
)
;
/*
* Report the Date &amp; Time :
*/
dtbuf
[
z
]
=
0
;
/* null terminate string */
printf
(
"Date &amp; Time is: %s
\n
"
,
dtbuf
)
;
/*
* Close the socket and exit:
*/
close
(
s
)
;
return
0
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-29 20:32:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记13-TCP/IP协议实现的客户端]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="TCP/IP"><![CDATA[TCP/IP]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记14-TCP/IP协议实现的服务器端</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[服务器端的基本工作步骤为：
建立套接口。
绑定地址接口。
监听。
接受连接请求。
与客户端通讯。
关闭。
监听所用的函数为listen(2):
定义：
#include <sys/socket.h>
int listen(int s, int backlog);
s为监听的套接口，backlog为连接队列的长度。
如果调用成功返回0；负责返回－1，错误信息在变量errno中。
接受连接请求使用函数accept(2):
定义：
#include <sys/socket.h>
#include <sys/types.h>
int accept(int s, struct sockaddr *addr,int *len);
s必须为之前的监听套接口，addr为接受客户套接口的地址，len指向接受套接口地址缓存最大长度的指针。
如果调用成功返回一个新的套接口描述符；负责返回－1，错误信息在变量errno中。
下面一段是提供daytime服务的服务器代码：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
/* server.c:
* Example daytime server :
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
static
void
bail
(
const
char
*
on_what
)
{
if
(
errno
!=
0
)
{
fputs
(
strerror
(
errno
)
,
stderr
)
;
fputs
(
": "
,
stderr
)
;
}
fputs
(
on_what
,
stderr
)
;
fputc
(
'
\n
'
,
stderr
)
;
exit
(
1
)
;
}
int
main
(
int
argc
,
char
**
argv
)
{
int
z
;
char
*
srvr_addr
=
NULL
;
char
*
srvr_port
=
"13"
;
struct
sockaddr_in adr_srvr
;
/* AF_INET */
struct
sockaddr_in adr_clnt
;
/* AF_INET */
int
len_inet
;
/* length  */
int
s
;
/* Socket */
int
c
;
/* Client socket */
int
n
;
/* bytes */
time_t td
;
/* Current date&time */
char
dtbuf
[
128
]
;
/* Date/Time info */
/*
* Create a TDP/IP socket to use :
*/
s
=
socket
(
PF_INET
,
SOCK_STREAM
,
0
)
;
if
(
s
==
-
1
)
bail
(
"socket()"
)
;
/*
* Create a server socket address:
*/
memset
(
&
adr_srvr
,
0
,
sizeof
adr_srvr
)
;
adr_srvr.
sin_family
=
AF_INET
;
adr_srvr.
sin_port
=
htons
(
atoi
(
srvr_port
)
)
;
adr_srvr.
sin_addr
.
s_addr
=
inet_addr
(
"127.0.0.1"
)
;
/*
* Bind the server address:
*/
len_inet
=
sizeof
adr_srvr
;
z
=
bind
(
s
,
(
struct
sockaddr
*
)
&
adr_srvr
,
len_inet
)
;
if
(
z
==
-
1
)
bail
(
"bind(2)"
)
;
/*
* Make it a listening socket:
*/
z
=
listen
(
s
,
10
)
;
if
(
z
==
-
1
)
bail
(
"listen(2)"
)
;
/*
* Start the server loop :
*/
for
(
;;
)
{
/*
* Wait for a connect :
*/
len_inet
=
sizeof
adr_clnt
;
c
=
accept
(
s
,
(
struct
sockaddr
*
)
&
adr_clnt
,
&
len_inet
)
;
if
(
c
==
-
1
)
bail
(
"accept(2)"
)
;
/*
* Generate a time stamp :
*/
time
(
&
td
)
;
n
=
(
int
)
strftime
(
dtbuf
,
sizeof
dtbuf
,
"%A %b %d %H:%M:%S %Y
\n
"
,
localtime
(
&
td
)
)
;
/*
* Write result back to the client :
*/
z
=
write
(
c
,
dtbuf
,
n
)
;
if
(
z
==
-
1
)
bail
(
"write(2)"
)
;
close
(
c
)
;
}
return
0
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-30 12:17:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记14-TCP/IP协议实现的服务器端]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="post_tag" nicename="TCP/IP"><![CDATA[TCP/IP]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记15-主机名和网络名的查询</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[相对于IP来说，人们更倾向于使用名字。
下面就学习几个常用的关于主机名和IP地址等相关的函数：
gethostname(2)：获取当前主机名。
定义：
＃include<sys/utsname.h>
int gethostname(char *name,size_t len);
参数说明：
name用于接受主机名信息，len为name的最大长度。
成功返回0；否则返回－1，错误信息保存在errno中。
getdomainname(2):获取主机上的NIS域名。
用法与函数gethostname几乎一样。
gethostbyname(2)
这个函数的输入参数是想要查询的主机名，返回值是一个指向结构hostent的指针。
定义：
#include<netdb.h>
extern int h_errno;
struct hostent *gethostbyname(const  char *name);
struct hostent{
char h_name;//主机官方名
char **h_aliases;//别名清单
int h_addrtype;//地址类型
int h_length;//地址长度
char **h_addr_list;//地址清单
};
#define h_addr h_addr_list[0]
gethostbyaddr(3):用IP地址查找主机信息。
定义：
#include <sys/socket.h>
struct hostent *gethostbyaddr(
const char *addr,
int len,
int type);
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-31 12:03:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记15-主机名和网络名的查询]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>使用GDB时设置观察点</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[调试程序的时候除了要设置断点，有时还需要设置观察点，即监视一个变量，当他的值改变时程序暂停。
设置观察点的命令为：watch.
例如watch  var即为变量var设置一个观察点。
下面是几个经常用到的命令：
i watchpoints:显示所有观察点。
x var：打印变量var起始地址一段区域的内存，以字节为单位。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-07-31 17:33:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[使用GDB时设置观察点]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GDB"><![CDATA[GDB]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记16-套接口上的标准I/O</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[采用标准的I/O可以增强程序的可移植性,可以提高程序的性能.
fdopen(3)可以为套接口打开stdio(3)调用.
#include
FILE fdopen(int files,const char *mode);
files为文件描述符,mode为打开的模式.与函数fopen中的模式一样.
如果调用成功返回一个FILE结构指针,否则返回一个空指针,错误信息在errno中.
下面是一个示例:
?
View Code
C
1
2
3
4
5
6
7
8
9
int
s
;
FILE
*
io
;
s
=
socket
(
...
)
;
io
=
fdopen
(
s
,
"w+"
)
;
if
(
io
==
NULL
)
{
fprintf
(
stderr
,
"%s:fdopen
\n
"
,
strerror
(
errno
)
)
;
exit
(
1
)
;
}
一般情况下为了让程序更加安全个高效,常常采用分开使用读写流的方式.
下面是一个示例:
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
int
s
;
FILE
*
rx
;
//读流
FILE
*
wx
;
//写流
s
=
socket
(
...
)
;
rx
=
fdopen
(
s
,
"r"
)
;
if
(
rx
==
NULL
)
{
........
}
wx
=
fdopen
(
dup
(
s
)
,
"r"
)
;
if
(
wx
==
NULL
)
{
........
}
建立两个流后,用户就可以安全的在rx流上使用fgetc()和fgets()等输入函数,在wx流上使用fputc()和fpuuts()等输出函数.
当不再使用时就调用fclose()关闭这些流.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-1 18:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记16-套接口上的标准I/O]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="I/O"><![CDATA[I/O]]></category><category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记17-标准I/O的关闭</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[当打开多个文件描述符时就不能再简单的使用shutdown()函数了,因为shutdown()函数是不考虑套接口上打开的文件描述符个数的.
当连接建立后,我们需要考虑3种情况:
(在只关闭写端的情况下)进程只等待接收数据,而不再写数据.
(在只关闭读端的情况下)进程只试探写数据,而不再接收数据.
(同时关闭读写端的情况下)进程不进行读写操作.
第一中情况用源码表示:
fflush(wx);
shutdown(fileno(wx),SHUT_WR);
fclose(wx);
在关闭之前要先清除输出流,使用函数fflush().fileno()函数用于获得文件描述符.
第二中情况用源码表示:
shutdown(fileno(rx),SHUT_RD);
fclose(rx);
第三中情况用源码表示:
fclose(wx);
shutdown(fileno(rx),SHUT_DOWN);
fclose(rx);
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-2 20:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记17-标准I/O的关闭]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="I/O"><![CDATA[I/O]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记18-定义缓冲操作</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[使用stdio(3)时,通常会用到缓冲技术.从而提高整个系统的I/O效率.
Linux中的FILE流有三种基本的饿缓冲模式:
全缓冲(“块缓冲”)
线形缓冲
无缓冲
用于缓冲控制的函数:
?
View Code
C
1
2
3
4
5
6
7
8
9
#include<stdio.h>
int
setbuf
(
FILE
*
stream
,
char
*
buf
)
;
int
setbuffer
(
FILE
*
stream
,
char
*
buf
,
size_t size
)
;
int
setlinebuf
(
FILE
*
stream
)
;
int
setvbuf
(
FILE
*
stream
,
char
*
buf
,
int
mode
,
size_t size
)
;
setvbuf中mode的取值有:
_IOFBF:全缓冲
_IOLBF:线形缓冲
_IONBF:无缓冲
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-3 13:23:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记18-定义缓冲操作]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="I/O"><![CDATA[I/O]]></category><category domain="post_tag" nicename="缓冲"><![CDATA[缓冲]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>GCC的简单使用教程上</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[GCC(GNU Compiler Collection)是LINUX平台下最强大的编译器，它不仅能编译
C，C++，object c,它还可以通过不同的前端模块来支持各种语言,如 Java、Fortran、
Pascal、Modula-3 和 Ada 等。
编译过程
在使用 GCC 编译程序时,编译过程可以被细分为四个阶段:
◆ 预处理(Pre-Processing)
◆ 编译(Compiling)
◆ 汇编(Assembling)
◆ 链接(Linking)
下面我们来看一段简单的代码”:
?
View Code
C
1
2
3
4
5
6
#include
int
main
(
void
)
{
printf
(
"Hello world !
\n
"
)
;
return
0
;
}
现在编译执行：
?
View Code
BASH
1
2
3
$
gcc
hello.c
-o
hello
$ .
/
hello
Hello world
!
为了弄清楚编译的过程，我们现在把编译分成几个单独的步骤：
第一步是进行预编译,使用-E 参数可以让 GCC 在预处理结束后停止编译过程:
?
View Code
BASH
1
$
gcc
-E
hello.c
-o
hello.i
此时若查看 hello.cpp 文件中的内容,会发现 stdio.h 的内容确实都插到文件里去了,而其它应当被预处理的宏定义也都做了相应的处理。下一步是将 hello.i 编译为目标代码,这可以通过使用-c 参数来完成:
?
View Code
BASH
1
$
gcc
-c
hello.i
-o
hello.o
GCC 默认将.i 文件看成是预处理后的 C 语言源代码,因此上述命令将自动跳过预处
理步骤而开始执行编译过程,也可以使用-x 参数让 GCC 从指定的步骤开始编译。最
后一步是将生成的目标文件链接成可执行文件:
?
View Code
BASH
1
$
gcc
hello.o
-o
hello
在采用模块化的设计思想进行软件开发时,通常整个程序是由多个源文件组成的,相
应地也就形成了多个编译单元,使用 GCC 能够很好地管理这些编译单元。假设有一
个由 foo1.c 和 foo2.c 两个源文件组成的程序,为了对它们进行编译,并最终生成可执
行程序 foo,可以使用下面这条命令:
?
View Code
BASH
1
$
gcc
foo1.c foo2.c
-o
foo
如果同时处理的文件不止一个,GCC 仍然会按照预处理、编译和链接的过程依次进
行。如果深究起来,上面这条命令大致相当于依次执行如下三条命令:
?
View Code
BASH
1
2
3
$
gcc
-c
foo1.c
-o
foo1.o
$
gcc
-c
foo2.c
-o
foo2.o
$
gcc
foo1.o foo2.o
-o
foo
警告提示功能
GCC 包含完整的出错检查和警告提示功能,它们可以帮助 Linux 程序员写出更加专
业和优美的代码。常用的警告选项有：
-pedantic ：使用了扩展语法的地方将产生相应的警告信息。
-Wall ：使用它能够使 GCC 产生尽可能多的警告信息。
-Werror：它要求 GCC 将所有的警告当成错误进行处理。
库依赖
GCC 采用搜索目录的办法来查找所需要的文件,-I 选项可以向 GCC 的头文件搜索路
径中添加新的目录。例如,如果在/home/xiaowp/include/目录下有编译时所需要的头
文件,为了让 GCC 能够顺利地找到它们,就可以使用-I 选项:
?
View Code
BASH
1
$
gcc
foo.c
-I
/
home
/
xiaowp
/
include
-o
foo
同样,如果使用了不在标准位置的库文件,那么可以通过-L 选项向 GCC 的库文件搜索路径中添加新的目录。例如,如果在/home/xiaowp/lib/目录下有链接时所需要的库文
件 libfoo.so,为了让 GCC 能够顺利地找到它,可以使用下面的命令:
?
View Code
BASH
1
$
gcc
foo.c
-L
/
home
/
xiaowp
/
lib
-lfoo
-o
foo
值得好好解释一下的是-l 选项,它指示 GCC 去连接库文件 libfoo.so。Linux 下的库文
件在命名时有一个约定,那就是应该以 lib 三个字母开头,由于所有的库文件都遵循了
同样的规范,因此在用-l 选项指定链接的库文件名时可以省去 lib 三个字母,也就是说
GCC 在对-lfoo 进行处理时,会自动去链接名为libfoo.so 的文件。
Linux 下的库文件分为两大类分别是动态链接库(通常以.so 结尾)和静态链接库(通常
以.a 结尾),两者的差别仅在程序执行时所需的代码是在运行时动态加载的,还是在编
译时静态加载的。默认情况下,GCC 在链接时优先使用动态链接库,只有当动态链接
库不存在时才考虑使用静态链接库,如果需要的话可以在编译时加上-static 选项,强制
使用静态链接库。例如,如果在/home/xiaowp/lib/目录下有链接时所需要的库文件
libfoo.so 和 libfoo.a,为了让 GCC 在链接时只用到静态链接库,可以使用下面的命令:
?
View Code
BASH
1
$
gcc
foo.c
-L
/
home
/
xiaowp
/
lib
-static
-lfoo
-o
foo
后记：这篇文章是在我看了《开源》杂志第四期里的一篇文章改写的。作者是肖文鹏。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-4 22:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[GCC的简单使用教程上]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GCC"><![CDATA[GCC]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Linux Socket 学习笔记19-UDP广播服务器端</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在实际的网络应用中，只实现两点之间的的通讯是远远不够的。广播是能够同时实现多点通信的一种模式，这种通讯模式可以同时将信息发布到许多接收端点。
用于广播地址的约定是将IP所有的主机位都设置为1。例如127.255.255.255、192.168.0.255等。
下面是一段服务器的代码，它的作用是每隔4秒广播一次当前时间：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
/* srv.c:
* Example Stock Index Broadcast :
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
/*
* This function reports the error and
* exits back to the shell :
*/
static
void
bail
(
const
char
*
on_what
)
{
fputs
(
strerror
(
errno
)
,
stderr
)
;
fputs
(
": "
,
stderr
)
;
fputs
(
on_what
,
stderr
)
;
fputc
(
'
\n
'
,
stderr
)
;
exit
(
1
)
;
}
int
main
(
int
argc
,
char
**
argv
)
{
time_t td
;
int
n
;
char
buf
[
128
]
;
int
z
;
/* Status return code */
int
s
;
/* Socket */
struct
sockaddr_in addr_srv
;
/* AF_INET */
int
len_srv
;
/* length  */
struct
sockaddr_in addr_bc
;
/* AF_INET */
int
len_bc
;
/* length  */
static
int
so_broadcast
=
1
;
len_srv
=
sizeof
(
addr_srv
)
;
len_bc
=
sizeof
(
addr_bc
)
;
memset
(
&
addr_srv
,
0
,
len_srv
)
;
addr_srv.
sin_port
=
0
;
addr_srv.
sin_family
=
AF_INET
;
addr_srv.
sin_addr
.
s_addr
=
inet_addr
(
"127.0.0.1"
)
;
memset
(
&
addr_bc
,
0
,
len_bc
)
;
addr_bc.
sin_port
=
htons
(
9999
)
;
addr_bc.
sin_family
=
AF_INET
;
addr_bc.
sin_addr
.
s_addr
=
inet_addr
(
"127.255.255.255"
)
;
/*
* Create a UDP socket to use :
*/
s
=
socket
(
AF_INET
,
SOCK_DGRAM
,
0
)
;
if
(
s
==
-
1
)
bail
(
"socket()"
)
;
/*
* Allow broadcasts :
*/
z
=
setsockopt
(
s
,
SOL_SOCKET
,
SO_BROADCAST
,
&
so_broadcast
,
sizeof
so_broadcast
)
;
if
(
z
==
-
1
)
bail
(
"setsockopt(SO_BROADCAST)"
)
;
/*
* Bind a address to our socket, so that
* client programs can listen to this
* server:
*/
z
=
bind
(
s
,
(
struct
sockaddr
*
)
&
addr_srv
,
len_srv
)
;
if
(
z
==
-
1
)
bail
(
"bind()"
)
;
for
(
;;
)
{
time
(
&
td
)
;
strftime
(
buf
,
sizeof
(
buf
)
,
" %Y %b %d %H:%M:%S
\n
"
,
localtime
(
&
td
)
)
;
printf
(
"%s
\n
"
,
buf
)
;
z
=
sendto
(
s
,
buf
,
strlen
(
buf
)
,
0
,
(
struct
sockaddr
*
)
&
addr_bc
,
len_bc
)
;
if
(
z
==
-
1
)
bail
(
"sendto()"
)
;
sleep
(
4
)
;
}
return
0
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-6 13:30:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记19-UDP广播服务器端]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="广播"><![CDATA[广播]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记20-UDP广播客户端</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[下面是客户端代码，它接收服务器端的消息：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
/* srv.c:
* Example Stock Index Broadcast :
*/
#include <stdio.h>
#include <unistd.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
/*
* This function reports the error and
* exits back to the shell :
*/
static
void
bail
(
const
char
*
on_what
)
{
fputs
(
strerror
(
errno
)
,
stderr
)
;
fputs
(
": "
,
stderr
)
;
fputs
(
on_what
,
stderr
)
;
fputc
(
'
\n
'
,
stderr
)
;
exit
(
1
)
;
}
int
main
(
int
argc
,
char
**
argv
)
{
char
buf
[
128
]
;
int
z
;
/* Status return code */
int
s
;
/* Socket */
struct
sockaddr_in addr
;
static
int
so_reuseaddr
=
1
;
int
len
=
sizeof
(
addr
)
;
memset
(
&
addr
,
0
,
len
)
;
addr.
sin_port
=
htons
(
9999
)
;
addr.
sin_family
=
AF_INET
;
addr.
sin_addr
.
s_addr
=
inet_addr
(
"127.255.255.255"
)
;
/*
* Create a UDP socket to use :
*/
s
=
socket
(
AF_INET
,
SOCK_DGRAM
,
0
)
;
if
(
s
==
-
1
)
bail
(
"socket()"
)
;
/*
* Allow broadcasts :
*/
z
=
setsockopt
(
s
,
SOL_SOCKET
,
SO_REUSEADDR
,
&
so_reuseaddr
,
sizeof
so_reuseaddr
)
;
if
(
z
==
-
1
)
bail
(
"setsockopt(so_reuseaddr)"
)
;
/*
* Bind a address to our socket, so that
* client programs can listen to this
* server:
*/
z
=
bind
(
s
,
(
struct
sockaddr
*
)
&
addr
,
len
)
;
if
(
z
==
-
1
)
bail
(
"bind()"
)
;
for
(
;;
)
{
z
=
recvfrom
(
s
,
buf
,
sizeof
(
buf
)
,
0
,
(
struct
sockaddr
*
)
&
addr
,
&
len
)
;
if
(
z
==
-
1
)
bail
(
"recvfrom()"
)
;
printf
(
"%s"
,
buf
)
;
}
return
0
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-6 13:38:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记20-UDP广播客户端]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="广播"><![CDATA[广播]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>GCC的简单使用教程下</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[编译加速
?
View Code
BASH
1
$
gcc
-pipe
foo.c
-o
foo
文件扩展名
.c C 原始程序;
.C C++原始程序;
.cc C++原始程序;
.cxx C++原始程序;
.m Objective-C 原始程序;
.i 已经过预处理的 C 原始程序;
.ii 已经过预处理之 C++原始程序;
.s 组合语言原始程序;
.S 组合语言原始程序;
.h 预处理文件(标头文件);
.o 目标文件;
.a 存档文件。
GCC 常用选项
-c 通知 GCC 取消链接步骤,即编译源码并在最后生成目标文件;
-Dmacro 定义指定的宏,使它能够通过源码中的#ifdef 进行检验;
-E 不经过编译预处理程序的输出而输送至标准输出;
-g3 获得有关调试程序的详细信息,它不能与-o 选项联合使用;
-Idirectory 在包含文件搜索路径的起点处添加指定目录;
-llibrary 提示链接程序在创建最终可执行文件时包含指定的库;
-O、-O2、-O3 将优化状态打开,该选项不能与-g 选项联合使用;
-S 要求编译程序生成来自源代码的汇编程序输出;
-v 启动所有警报;
-Wall 在发生警报时取消编译操作,即将警报看作是错误;
-Werror 在发生警报时取消编译操作,即把报警当作是错误;
-w 禁止所有的报警。
代码优化
GCC 提供的代码优化功能非常强大,它通过编译选项-On 来控制优化代码的生成,其
中 n 是一个代表优化级别的整数。对于不同版本的 GCC 来讲,n 的取值范围及其对
应的优化效果可能并不完全相同,比较典型的范围是从 0 变化到 2 或 3。
后记：这篇文章是在我看了《开源》杂志第四期里的一篇文章改写的。作者是肖文鹏。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-6 18:28:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[GCC的简单使用教程下]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GCC"><![CDATA[GCC]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Linux Socket 学习笔记21-带外数据1</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[带外数据的概念
套接口API提供了一种机制，它可以让一束数据加速从常规数据之前到达接收方，这束数据就是所谓的带外数据。
带外数据的必要性
有时候我们需要处理紧急情况，这时候就需要用带外数据来实现，例如客户端想要终止正在发送的一段数据，服务器的程序还没有来的及读取这段程序，这时客户端需要发送带外数据来取消数据的发送，这样就能减少服务器的负担。
发送和接收带外数据
在发送带外数据时需要把函数send的flags参数设置为MSG_OOB。
接收带外数据分为两种情况：
单独读取带外数据
与带内数据一起读
如果采用分开读取的方式，那么带内数据到达时必须通知接收进程，同样，接收带内数据要把函数recv的flags参数设置为MSG_OOB。
下面是实现的部分代码：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
/*
* SIGURG signal handler :
*/
static
void
sigurg
(
int
signo
)
{
int
n
;
char
buf
[
256
]
;
n
=
recv
(
s
,
buf
,
sizeof
buf
,
MSG_OOB
)
;
if
(
n
&
lt
;
0
)
bail
(
"recv(2)"
)
;
buf
[
n
]
=
0
;
printf
(
"URG '%s' (%d)
\n
"
,
buf
,
n
)
;
signal
(
SIGURG
,
sigurg
)
;
}
int
main
(
int
argc
,
char
**
argv
)
{
int
z
;
/* Status */
char
buf
[
256
]
;
/*
* 。。。
＊建立连接等等。。
*/
//取得套接口的所有权
z
=
fcntl
(
s
,
F_SETOWN
,
getpid
(
)
)
;
if
(
z
==
-
1
)
bail
(
"fcntl(2)"
)
;
/*
* Catch SIGURG :
*/
signal
(
SIGURG
,
sigurg
)
;
for
(
;;
)
{
z
=
recv
(
s
,
buf
,
sizeof
buf
,
0
)
;
if
(
z
==
-
1
)
bail
(
"recv(2)"
)
;
if
(
z
==
0
)
break
;
buf
[
z
]
=
0
;
printf
(
"rcv '%s' (%d)
\n
"
,
buf
,
z
)
;
}
close
(
s
)
;
return
0
;
}
这里要注意，其实紧急数据在TCP中的处理和普通的带外数据是有所区别的，这里有一个紧急指针的问题，具体的看书。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-7 08:55:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记21-带外数据1]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="带外数据"><![CDATA[带外数据]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Linux Socket 学习笔记22-带外数据2</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[如果要使用这种模式，那么要设置SO_OOBINLINE套接口选项：
srtsocket(s,SOL_SOCKET,SO_OOBINLINE,&oobinline,sizeof(oobinline));
既然带内数据在普通数据中间，那么怎么知道具体在哪呢，这就需要用函数ioctl(2)确定紧急指针的位置。
?
View Code
C
1
2
3
4
5
6
7
#include<sys/ioctl.h>
int
flag
;
//如果被标记则为TRUE
z
=
ioctl
(
s
,
SIOCATMARK
,&
amp
;
flag
)
;
//成功返回0
下面是内嵌带内数据的主要代码：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
z
=
srtsocket
(
s
,
SOL_SOCKET
,
SO_OOBINLINE
,
&
amp
;
oobinline
,
sizeof
(
oobinline
)
)
;
for
(
;;
)
{
ioctl
(
s
,
SIOCATMARK
,&
amp
;
flag
)
;
recv
(
s
,
buf
,
sizeof
(
buf
)
,
0
)
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-8 14:19:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux Socket 学习笔记22-带外数据2]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="带外数据"><![CDATA[带外数据]]></category><category domain="post_tag" nicename="紧急指针"><![CDATA[紧急指针]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>历尽一个月，看完Linux socket</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[一个月过去了，我也差不多把LINUX SOCKET 过了一遍。
其中暴露了我许多问题，这里总结一下：
首先，对一些函数的掌握很不熟练，往往一个简单的函数都要翻书看MAN。
其次，复习不到位，往往学了后面的就忘掉前面的。
最后，学习只停留在书本表面，没有深入研究。
暑假也快结束了，我打算到学校了好好的再把这本书深入的研究研究，同时要再把《UNIX环境高级编程》配合着操作系统好好的看看。哦对了还有编译原理也要在复习复习。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-13 13:01:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[历尽一个月，看完Linux socket]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>paypal那一堆事</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[昨天去申请了一个paypal帐户,然后通过淘宝给帐户冲了11美圆.
打算在godaddy上买个域名,结果支付的时候却要paypal的帐户认证.
于是开始认证.这下麻烦可来了,因为我在注册paypal帐户的时候全部用的拼音,而银行卡用的是中文,搞成了帐户名和银行户名不一致,而且paypal只支持三个银行,我还没那银行帐号.
现在好了,要去申请改名字了,改名字可就麻烦多了,要很多的证明材料,算了.晚上再说吧.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-16 12:56:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[paypal那一堆事]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="paypal"><![CDATA[paypal]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>关于学习笔记</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这几天突然发现之前做了不少的学习笔记,但是仔细的看看还有不少错误,我也懒得去改了.
看到这么多的学习笔记,我发现了一个问题,有些内容根本就没必要记录的我也记下来了.有的即使记下来了我也不懂.
我好象是在为了记笔记而学习,而不是为了掌握知识而学习.
所以,以后还是少记学习笔记吧.多记些自己生活方面的东西.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-16 17:18:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[关于学习笔记]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>这几天…今天…</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这几天忙着买火车票,准备回学校了.
这几天天气又开始热了起来.
这几天为了paypal的帐号搞的头昏脑胀.
这几天发现我原先的GMAIL邮箱帐号被盗了.
这几天比较浮躁,没看书.没学习,也没玩游戏.
今天把火车票买了,没买到卧铺,买了张硬座,TNND该死的火车站,把好票都没着,只卖垃圾票,BS…
今天洗了2次澡,热的不行了,我诅咒这该死的天气(不过相对与往年,今年的天气还是可以的)…
今天把相关的证明材料传到paypal客服了,现在焦急的等待结果…
今天又新申请了个GMAIL帐号,同时诅咒那个盗我号的垃圾…
今天接着无所事事,上来写了篇博文.发发牢骚.
好了,牢骚都发完了.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-17 17:19:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[这几天…今天…]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>Ubuntu下用rar命令分卷压缩文件</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天下了个文档，DOC格式，用openoffic直接输出为pdf文档。传上论坛给大家共享，因为论坛的附件大小限制，必须分卷压缩。
之前在UBUNTU上装了RAR，所以打算用RAR命令进行压缩。于是先man了下rar，结果没有rar的man文档，于是上网找资料。
最后终于弄会了。这里给大家说说。
可以用这个命令：
rar a -v<size>(k,b) archives files
假如我在Desktop目录下有个大小为5M的文档 file.pdf, 现在要把它压缩为大小为2000k的几个部分，文件名为file.part1.rar ,file.part2.rar …
就可以用下面的命令：
?
View Code
BASH
1
$ rar a
-v2000k
file
file.pdf
OK,这就行了。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-19 12:56:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Ubuntu下用rar命令分卷压缩文件]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="post_tag" nicename="命令技巧"><![CDATA[命令技巧]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>C 程序来访问和设置环境变量</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[对于 C 程序的用户来说,可以使用下列三个函数来设置或访问一个环境变量。
◆ getenv()访问一个环境变量。输入参数是需要访问的变量名字,返回值是一个字符串。如果所访问的环境变量不存在,则会返回 NULL。
◆ setenv()在程序里面设置某个环境变量的函数。
◆ unsetenv()清除某个特定的环境变量的函数。
另外,还有一个指针变量 environ,它指向的是包含所有的环境变量的一个列表。下面的程序可以打印出当前运行环境里面的所有环境变量:
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
#include <stdio.h>
extern
char
**
environ
;
int
main
(
)
{
char
**
var
;
for
(
var
=
environ
;*
var
!=
NULL
;++
var
)
printf
(
"%s
\n
"
,*
var
)
;
return
0
;
}
还可以通过修改一些相关的环境定义文件来修改环境变量,比如对于 Red Hat 等 Linux 发行版本,与环境相关的文件有/etc/profile 和~/.bashrc 等。修改完毕后重新登录一次就生效了。
以上总结自《开源》杂志。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-22 10:46:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[C 程序来访问和设置环境变量]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="环境变量"><![CDATA[环境变量]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Latika’s Theme</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天看电视,突然看到一个广告,她的旋律一下就把我吸引住了,没错,是那首Latika’s Theme.
虽然整首歌都没有一句歌词,但是那旋律,Rahman的轻哼,一下就把我拉回到了当初看<<贫民窟的百万富翁>>的时候.贾马与他兄弟萨利姆的手足之情,与恋人拉提卡的爱情深深的触动了我的心灵.
贾马与萨利姆四处寻找拉提卡的画面,配上这首Latika’s Theme,让我反反复复的看了不知多少遍,尤其是最终当贾马与拉提卡重逢时,熟悉的Latika’s Theme再次进入我的脑海,我完全沉醉于这样的画面,这个画面让我足足看了一个晚上.
继<<碧海蓝天>>后,<<贫民窟的百万富翁>>是唯一部让我有如此感触的电影.
这里插上最后的感人片段:
“I knew you’d be watching.”
“I thought we’d meet again only in death.”
“This is our destiny.”
“kiss me!”
]]></content:encoded>
                <wp:post_date><![CDATA[2009-08-22 17:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Latika’s Theme]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Rahman"><![CDATA[Rahman]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>test for “wordpress for blackberry”</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[This is a test for the soft “wordpress for blackberry”!
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-4 15:17:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[test for “wordpress for blackberry”]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="blackberry"><![CDATA[blackberry]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>用我的黑莓手机更新BLog</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前两天给手机装了个”wordpress for blackberry”。开始用wap连接不能用，今天就换了net连接。终于可以用了。
感觉这个软件的功能还可以，就是没有摘要功能，不过无所谓了，有空用浏览器改改。
以后就可以用手机进行更新了。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-4 16:35:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[用我的黑莓手机更新BLog]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="blackberry"><![CDATA[blackberry]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>终于把域名给注册了</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[暑假的时候就看好了一个 域名，因为种种原因一直没注册，前几天终于把域名给注册了，花了15美元，我觉得还是值得的，不象某人，觉得是浪费。
顺便把送的免费空间也用上了，才发现LINUX主机确实比较强大，可惜我这空间已经预付了2年，这该死的WINDOWS主机。
最近这个主机不太老实。数据库时不时就出点问题，搞的我丢了不少的资料。郁闷阿。
关于网站备案的问题真是烦人。以后买个国外的主机算了。
哦对了我刚刚注册的域名是：qiang.ws。不错吧！
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-9 09:39:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[终于把域名给注册了]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="域名"><![CDATA[域名]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>赞一下我的 blackberry 8310</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[8310不是我用的第一个黑莓手机,我用的第一个黑莓手机是7290，只花了不到400买的。不过觉得挺好用，所以在我前一个索爱手机坏掉后我就毫不犹豫的再次选择了黑莓。
用8310已经有段时间了，发现黑莓手机确实很强大。
1。全键盘的手感很好，刚到手可能会出现按错键的情况，用熟了就不会了。而且全键盘打字特别方便。
2。邮件功能，虽然我没用正宗的push mail，但是berrymail的pull mail也不错。
3。适合浏览网页。自带的浏览器就已经很好用了，我又下了一个opera，用来翻墙。
4。省电。一般情况下用2，3天没问题。
5。通话质量特别好。
6。优点太多说不完了。。。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-9 09:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[赞一下我的 blackberry 8310]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="8310"><![CDATA[8310]]></category><category domain="post_tag" nicename="blackberry"><![CDATA[blackberry]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>关于毕业论文</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这段时间一直在学linux c和socket.一直没作什么项目，再过段时间就要作毕业论文了。打算作一个linux下socket开发，初步锁定在whois上。
主要技术应该包括：
1。多线程
2。系统日志
3。网络通讯
4。文件I/O
5。whois协议
废话不多说，今天就开始作。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-13 11:56:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[关于毕业论文]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="论文"><![CDATA[论文]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>终于能在LINUX下用淘宝了</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天无意间看了一篇文章，实现了在LINUX下用淘宝。
先下载:
支付宝安全控件 for Linux 平台 的 Firefox
( MD5:
02240053d32688ed996e3a4788042801
)
将下载的文件解压:
?
View Code
BASH
1
$
tar
-zxvf
aliedit.tar.gz
推荐校验 MD5 值：
?
View Code
BASH
1
$ md5sum aliedit.tar.gz
02240053d32688ed996e3a4788042801  aliedit.tar.gz
创建~/.mozilla/plugins目录
?
View Code
BASH
1
mkdir
~
/
.mozilla
/
plugins
并将这两个文件复制到 ~/.mozilla/plugins 目录：
?
View Code
BASH
1
$
cp
aliedit.so aliedit.xpt ~
/
.mozilla
/
plugins
重新启动 Firefox 即可。整个安装过程还是很简单的。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-14 13:19:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[终于能在LINUX下用淘宝了]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="淘宝"><![CDATA[淘宝]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>Linux下的多线程</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-21 23:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Linux下的多线程]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="多线程"><![CDATA[多线程]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>socks5代理</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-23 15:08:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[socks5代理]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="socks5"><![CDATA[socks5]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>由MSN断网门所想到的</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前段时间，莫拉克给海底光缆造成了严重的破坏，导致了东亚大部分国家的网络服务中断。
目前，互联网的主根服务器在美国，而且其他13台根服务器没有一台在中国，中国只有镜象服务器。显然中国就没有管理权。这对中国的互联网安全造成了很大的威胁。
中国何时才能成为一个真正的大国！
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-23 19:24:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[由MSN断网门所想到的]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>GDB查看变量的输出格式</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天用GDB调试程序，发现了一个问题，就是查看变量的时候显示格式很不好看，就如我要看一个数组里所有成员的十六进制表示，那么要怎么设置呢？
其实在使用命令print 和 display的时候可以更改显示格式，例如：
display /x  var
表示把var用十六进制显示。
其他常用的输出格式有有：
x:十进制
u:无符号的十六进制
o:八进制
t:二进制
c:字符格式
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-26 10:26:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[GDB查看变量的输出格式]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GDB"><![CDATA[GDB]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>LINUX下网络抓包:tcpdump命令的使用</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近在作论文的网络代理方面遇到了点问题，去CHINAUNIX上询问，有人建议我用抓包工具查看数据，于是就知道了tcpdump这个抓包程序。
Tcpdump的使用
tcpdump采用命令行方式，它的命令格式为：
tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]
[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]
[ -T 类型 ] [ -w 文件名 ] [表达式 ]
1. tcpdump的选项介绍
-a 　　　将网络地址和广播地址转变成名字；
-d 　　　将匹配信息包的代码以人们能够理解的汇编格式给出；
-dd 　　　将匹配信息包的代码以c语言程序段的格式给出；
-ddd 　　　将匹配信息包的代码以十进制的形式给出；
-e 　　　在输出行打印出数据链路层的头部信息；
-f 　　　将外部的Internet地址以数字的形式打印出来；
-l 　　　使标准输出变为缓冲行形式；
-n 　　　不把网络地址转换成名字；
-t 　　　在输出的每一行不打印时间戳；
-v 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；
-vv 　　　输出详细的报文信息；
-c 　　　在收到指定的包的数目后，tcpdump就会停止；
-F 　　　从指定的文件中读取表达式,忽略其它的表达式；
-i 　　　指定监听的网络接口；
-r 　　　从指定的文件中读取包(这些包一般通过-w选项产生)；
-w 　　　直接将包写入文件中，并不分析和打印出来；
-T 　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程 调用）和snmp（简单　　　　　　　网络管理协议；）
2. tcpdump的表达式介绍
表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。
在表达式中一般如下几种类型的关键字，一种是关于类型的关键字，主要包括host，net，port, 例如 host 210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是host。
第二种是确定传输方向的关键字，主要包括src , dst ,dst or src, dst and src ,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net 202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。
第三种是协议的关键字，主要包括fddi,ip ,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是”ether”的别名， fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。
除了这三种类型的关键字之外，其他重要的关键字如下：gateway, broadcast,less,greater,还有三种逻辑运算，取非运算是 not ! , 与运算是and,&&;或运算 是or ,||；
这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。
(1)想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：
#tcpdump host 210.27.48.1
(2) 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：（在命令行中适用　　　括号时，一定要
#tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \)
(3) 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：
#tcpdump ip host 210.27.48.1 and ! 210.27.48.2
(4)如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：
#tcpdump tcp port 23 host 210.27.48.
3. tcpdump 的输出结果介绍
下面我们介绍几种典型的tcpdump命令的输出信息
(1) 数据链路层头信息
使用命令#tcpdump –e host ice
ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A
H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；上一条命令的输出结果如下所示：
21:50:12.847509 eth0 < 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 > ice.telne
t 0:0(0) ack 22535 win 8760 (DF)
分析：21：50：12是显示的时间， 847509是ID号，eth0 <表示从网络接口eth0 接受该数据包，eth0 >表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包. 0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60 是数据包的长度, h219.33357 > ice.telnet 表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535 表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.
(2) ARP包的TCPDUMP输出信息
使用命令#tcpdump arp
得到的输出结果是：
22:32:42.802509 eth0 > arp who-has route tell ice (0:90:27:58:af:1a)
22:32:42.802902 eth0 < arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)
分析: 22:32:42是时间戳, 802509是ID号, eth0 >表明从主机发出该数据包, arp表明是ARP请求包, who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。 0:90:27:58:af:1a是主机ICE的MAC地址。
(3) TCP包的输出信息
用TCPDUMP捕获的TCP包的一般输出信息是：
src > dst: flags data-seqno ack window urgent options
src > dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R (RST) “.” (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号, window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.
(4) UDP包的输出信息
用TCPDUMP捕获的UDP包的一般输出信息是：
route.port1 > ice.port2: udp lenth
UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth
tcpdump采用命令行方式，它的命令格式为：
tcpdump [ -adeflnNOpqStvx ] [ -c 数量 ] [ -F 文件名 ]
[ -i 网络接口 ] [ -r 文件名] [ -s snaplen ]
[ -T 类型 ] [ -w 文件名 ] [表达式 ]
1. tcpdump的选项介绍
-a 　　　将网络地址和广播地址转变成名字；
-d 　　　将匹配信息包的代码以人们能够理解的汇编格式给出；
-dd 　　　将匹配信息包的代码以c语言程序段的格式给出；
-ddd 　　　将匹配信息包的代码以十进制的形式给出；
-e 　　　在输出行打印出数据链路层的头部信息；
-f 　　　将外部的Internet地址以数字的形式打印出来；
-l 　　　使标准输出变为缓冲行形式；
-n 　　　不把网络地址转换成名字；
-t 　　　在输出的每一行不打印时间戳；
-v 　　　输出一个稍微详细的信息，例如在ip包中可以包括ttl和服务类型的信息；
-vv 　　　输出详细的报文信息；
-c 　　　在收到指定的包的数目后，tcpdump就会停止；
-F 　　　从指定的文件中读取表达式,忽略其它的表达式；
-i 　　　指定监听的网络接口；
-r 　　　从指定的文件中读取包(这些包一般通过-w选项产生)；
-w 　　　直接将包写入文件中，并不分析和打印出来；
-T 　　　将监听到的包直接解释为指定的类型的报文，常见的类型有rpc （远程过程 调用）和snmp（简单网络管理协议；）
2. tcpdump的表达式介绍
表达式是一个正则表达式，tcpdump利用它作为过滤报文的条件，如果一个报文满足表达式的条件，则这个报文将会被捕获。如果没有给出任何条件，则网络上所有的信息包将会被截获。
在表达式中一般如下几种类型的关键字，一种是关于类型的关键字，主要包括host，net，port, 例如 host 210.27.48.2，指明 210.27.48.2是一台主机，net 202.0.0.0 指明 202.0.0.0是一个网络地址，port 23 指明端口号是23。如果没有指定类型，缺省的类型是host。
第二种是确定传输方向的关键字，主要包括src , dst ,dst or src, dst and src ,这些关键字指明了传输的方向。举例说明，src 210.27.48.2 ,指明ip包中源地址是210.27.48.2 , dst net 202.0.0.0 指明目的网络地址是202.0.0.0 。如果没有指明方向关键字，则缺省是src or dst关键字。
第三种是协议的关键字，主要包括fddi,ip ,arp,rarp,tcp,udp等类型。Fddi指明是在FDDI(分布式光纤数据接口网络)上的特定的网络协议，实际上它是”ether”的别名， fddi和ether具有类似的源地址和目的地址，所以可以将fddi协议包当作ether的包进行处理和分析。其他的几个关键字就是指明了监听的包的协议内容。如果没有指定任何协议，则tcpdump将会监听所有协议的信息包。
除了这三种类型的关键字之外，其他重要的关键字如下：gateway, broadcast,less,greater,还有三种逻辑运算，取非运算是 not ! , 与运算是and,&&;或运算 是or ,||；
这些关键字可以组合起来构成强大的组合条件来满足人们的需要，下面举几个例子来说明。
(1)想要截获所有210.27.48.1 的主机收到的和发出的所有的数据包：
#tcpdump host 210.27.48.1
(2) 想要截获主机210.27.48.1 和主机210.27.48.2 或210.27.48.3的通信，使用命令：（在命令行中适用　　　括号时，一定要
#tcpdump host 210.27.48.1 and \ (210.27.48.2 or 210.27.48.3 \)
(3) 如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：
#tcpdump ip host 210.27.48.1 and ! 210.27.48.2
(4)如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：
#tcpdump tcp port 23 host 210.27.48.
3. tcpdump 的输出结果介绍
下面我们介绍几种典型的tcpdump命令的输出信息
(1) 数据链路层头信息
使用命令#tcpdump –e host ice
ice 是一台装有linux的主机，她的MAC地址是0：90：27：58：AF：1A
H219是一台装有SOLARIC的SUN工作站，它的MAC地址是8：0：20：79：5B：46；上一条命令的输出结果如下所示：
21:50:12.847509 eth0 < 8:0:20:79:5b:46 0:90:27:58:af:1a ip 60: h219.33357 > ice.telne
t 0:0(0) ack 22535 win 8760 (DF)
分析：21：50：12是显示的时间， 847509是ID号，eth0 <表示从网络接口eth0 接受该数据包，eth0 >表示从网络接口设备发送数据包, 8:0:20:79:5b:46是主机H219的MAC地址,它表明是从源地址H219发来的数据包. 0:90:27:58:af:1a是主机ICE的MAC地址,表示该数据包的目的地址是ICE . ip 是表明该数据包是IP数据包,60 是数据包的长度, h219.33357 > ice.telnet 表明该数据包是从主机H219的33357端口发往主机ICE的TELNET(23)端口. ack 22535 表明对序列号是222535的包进行响应. win 8760表明发送窗口的大小是8760.
(2) ARP包的TCPDUMP输出信息
使用命令#tcpdump arp
得到的输出结果是：
22:32:42.802509 eth0 > arp who-has route tell ice (0:90:27:58:af:1a)
22:32:42.802902 eth0 < arp reply route is-at 0:90:27:12:10:66 (0:90:27:58:af:1a)
分析: 22:32:42是时间戳, 802509是ID号, eth0 >表明从主机发出该数据包, arp表明是ARP请求包, who-has route tell ice表明是主机ICE请求主机ROUTE的MAC地址。 0:90:27:58:af:1a是主机ICE的MAC地址。
(3) TCP包的输出信息
用TCPDUMP捕获的TCP包的一般输出信息是：
src > dst: flags data-seqno ack window urgent options
src > dst:表明从源地址到目的地址, flags是TCP包中的标志信息,S 是SYN标志, F (FIN), P (PUSH) , R (RST) “.” (没有标记); data-seqno是数据包中的数据的顺序号, ack是下次期望的顺序号, window是接收缓存的窗口大小, urgent表明数据包中是否有紧急指针. Options是选项.
(4) UDP包的输出信息
用TCPDUMP捕获的UDP包的一般输出信息是：
route.port1 > ice.port2: udp lenth
UDP十分简单，上面的输出行表明从主机ROUTE的port1端口发出的一个UDP数据包到主机ICE的port2端口，类型是UDP， 包的长度是lenth
示例:
下面的命令可以读取主机hostname发送的所有数据：
tcpdump -i eth0 src host hostname
下面的命令可以监视所有送到主机hostname的数据包：
tcpdump -i eth0 dst host hostname
我们还可以监视通过指定网关的数据包：
tcpdump -i eth0 gateway Gatewayname
如果你还想监视编址到指定端口的TCP或UDP数据包，那么执行以下命令：
tcpdump -i eth0 host hostname and port 80
该命令将显示从每个数据包传出的头和来自主机hostname对端口80的编址。端口80是系统默认的HTTP服务端口号。如果我们只需要列出送到80端口的数据包，用dst port；如果我们只希望看到返回80端口的数据包，用src port。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-09-29 00:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[LINUX下网络抓包:tcpdump命令的使用]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="tcpdump"><![CDATA[tcpdump]]></category><category domain="post_tag" nicename="命令技巧"><![CDATA[命令技巧]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>这十一。。</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这个十一过的相当无聊。
看了阅兵，明显感觉武器现代化了。
今天是中秋，本来是决定回家的，结果因为某些原因没回成。挺想家的，尤其是我那可爱的小侄子。
我的那主机问题真是多，以后一定不贪图便宜了。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-10-3 15:28:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[这十一。。]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>好多天没更新</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近很忙，加上空间问题，没有更新blog.
因为域名的问题，现在不能访问我国内服务器的blog.幸好我在godaddy上有个免费空间，上面存放了我国内blog的备份。但因为免费空间广告的原因，新建文章很是麻烦。
因为今天在手机上更新了wordpress for blackberry,所以就用手机写了这篇文章，正好也试试这个新版本的软件。
备案的密码一直没时间拿回来，前天也刚刚把我那程序员的证书拿回来，强烈鄙视某些机关的办事效率，也不知道刚刚过的软设证书什么时候能拿到。
今天都星期五了，时间过的真快。开学到学校也有一个多月了，但感觉什么事都没作，论文也卡在一个地方有两星期了，主要是最近没怎么作它。
抓紧时间充电，过完年好找工作哦。
]]></content:encoded>
                <wp:post_date><![CDATA[2009-10-16 19:10:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[好多天没更新]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>一个很隐蔽的bug</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天把以前看过的«C专家编程»找出来翻了一边，发现还是收获很多阿。
下面是一段有BUG的代码，你能看出来吗？
Int array[3]={1,2,3};
#define T (sizeof(array)/sizeof(array[0]))
Main()
{
Int d=-1;
If(d
]]></content:encoded>
                <wp:post_date><![CDATA[2009-10-31 09:09:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[一个很隐蔽的bug]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="bug"><![CDATA[bug]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>关于sizeof与strlen的问题</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天开始作面试题了，准备找工作了。
关于sizeof和strlen的问题，以前就接触到了，现在再提一下。
先看看这个：
Char *a=”1234567890″;
Sizeof(a)=?
Strlen(a)=?
答案是
Sizeof(a)=4,它相当于sizeof(char *)
Strlen(a)=10
再看看这个：
Char a[]=”1234567890″;
Sizeof(a)=?
Strlen(a)=?
Sizeof(a)=11,它包含了自动生成的’\0′,
Strlen(a)=10.它并不包含那个’\0′.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-11-7 19:43:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[关于sizeof与strlen的问题]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="面试"><![CDATA[面试]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>好久没用电脑写博了</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天费了点劲把在GODADDY免费空间上的数据搬到了自己国内的主机上,虽然GODADDY的空间还很稳定,但是他的广告让我忍无可忍了,倒不是说我怕主页上多点广告,而是他的广告破坏了整个站点的样式,甚至造成后台混乱了,连写个文章还要用我那黑莓手机写…
数据搬来的同时把域名也挪过来了.同时发现自己确实很久没打理这个BLOG了.于是顺便把BLOG的一些插件升了级,把冗余的文件删了删,数据库和整个BLOG也做了备份.
]]></content:encoded>
                <wp:post_date><![CDATA[2009-11-12 21:20:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[好久没用电脑写博了]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="blackberry"><![CDATA[blackberry]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>wordpress站点自动转到安装页面</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[废话不多说,直接把数据库的前缀(默认wp_)改掉(在wp-config.php文件中),然后把数据库文件中的wp_替换成刚刚修改的值,最后还原数据库.
应该可以了吧?
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-9 20:31:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[wordpress站点自动转到安装页面]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="WordPress"><![CDATA[WordPress]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>最近对Python和XMPP有点兴趣</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前段时间接触了google talk ,知道了XMPP协议.发现这个协议挺有意思.
上taobao上买了本书,开始研究.
由于C在网络方面不怎么好用,于是最近新学了Python,发觉这个语言有点象C++,而且正好与GAE对口上了.
过一段时间就在GAE上部署一个自己的应用.
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-10 12:55:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[最近对Python和XMPP有点兴趣]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GAE"><![CDATA[GAE]]></category><category domain="post_tag" nicename="XMPP"><![CDATA[XMPP]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>在Ubuntu上安装配置python2.5</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近在弄GAE,但是我的ubuntu上的python的版本为2.6,我需要的是2.5.
于是安装2.5
?
View Code
BASH
1
sudo
apt-get
install
python2.5
然后修改默认的连接
?
View Code
BASH
1
2
3
sudo
rm
/
usr
/
bin
/
python
sudo
ln
-s
/
usr
/
bin
/
python2.5
/
usr
/
bin
/
python
这样在终端中输入python默认就是 2.5版本了
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-10 13:01:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[在Ubuntu上安装配置python2.5]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GAE"><![CDATA[GAE]]></category><category domain="post_tag" nicename="Python"><![CDATA[Python]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>一些关于XMPP，Python和GAE的资料</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[因为最近想要做个一Gtalk机器人，所以找了一些资料，先存放在这，免得以后找。
一个回显的机器人：
http://www.keakon.cn/bbs/thread-1622-1-1.html
一个查询词典机器人：
http://www.kavingray.com/blog/miniblog-bot/
RFC3920：
http://wiki.jabbercn.org/index.php?title=RFC3920&variant=zh-cn
RFC3921：
http://wiki.jabbercn.org/index.php?title=RFC3921&variant=zh-cn
XMPP Python API：
http://code.google.com/intl/zh-CN/appengine/docs/python/xmpp/overview.html
以后陆续增加。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-11 16:16:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[一些关于XMPP，Python和GAE的资料]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GAE"><![CDATA[GAE]]></category><category domain="post_tag" nicename="Gtalk"><![CDATA[Gtalk]]></category><category domain="post_tag" nicename="XMPP"><![CDATA[XMPP]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>注册免费的.TK域名</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[首先我要承认，我确实是一个标题党，但是，往下看，你绝对不会失望。
晚上无聊在网上乱逛的时候发现了一个号东西，可以注册免费的TK域名，当然，你要不被我的标题给骗了，说是免费，其实也只是部分免费。注册网站为：
http://my.dot.tk
。
这个网站他会根据你所注册域名的价值进行收费，我试了几个，发现大部分的以中国人名拼音为域名都是免费的，例如我注册的 yuqiang.tk 就是免费的，但是，免费的域名还是有一个限制的，那就是 “所有在每九十天之内接受少于二十五次点击的域名，将被你的帐户里删除。”
怎么样，你已经等不及要去试试了吧。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-11 20:30:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[注册免费的.TK域名]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="域名"><![CDATA[域名]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>再次关于毕业论文</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前计算的论文内容由于一点原因没有做，改成了“网络聊天软件”。这个程序早在许多天前就做好了，现在打算把它贴出来，再加上仔细的注释，就当为论文的开些做些资料吧。
程序的源代码可以在这里下载到：
http://code.google.com/p/chatforthesis/
以后我会慢慢分析代码。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-13 00:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[再次关于毕业论文]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="论文"><![CDATA[论文]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>为Ubuntu9.10安装配置Mysql</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天早上在床上的时候突然想起要给论文程序里加上一个数据库，因为在Linux平台，于是很自然的想到了Mysql。
这篇文章主要介绍了在Ubuntu9.10上安装配置Mysql，并建立其C开发环境。
第一步
，安装Mysql，可以参考这里：
http://wiki.ubuntu.org.cn/MySQL%E5%AE%89%E8%A3%85%E6%8C%87%E5%8D%97
?
View Code
BASH
1
2
sudo
apt-get
install
mysql-server
sudo
apt-get
install
mysql-client
然后重启Mysql：
?
View Code
BASH
1
sudo
/
etc
/
init.d
/
mysql restart
非root用户可以通过以下命令进入Mysql：
?
View Code
BASH
1
mysql
-u
root
-p
第二步
，创建一个数据库，并赋予当前登录用户的权限。
?
View Code
BASH
1
2
3
4
5
mysql
-u
root
-p
mysql
&
gt; create database dbforc;
mysql
&
gt; grant all privileges on dbforc.
*
to qiang
@
localhost identified by
'123'
;
(
我的登录名为qiang,密码设为
123
)
mysql
&
gt; flush privileges;（刷新系统权限表）
mysql
&
gt; quit;
现在，就可以用下面的命令进入Mysql：
?
View Code
BASH
1
mysql
-u
qiang
-p
详细的数据库操作命令在这就不多说了，给个地址参考参考：
http://news.newhua.com/news1/program_database/2009/217/0921715343537K7H7IDI2CCI09JCI1DK8FJ4B07B3A04219G561C3JAB.html
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-21 19:15:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[为Ubuntu9.10安装配置Mysql]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Mysql"><![CDATA[Mysql]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>建立Mysql C开发环境</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前安装了Mysql，现在开始建立C开发环境。
安装C语言编程接口：
?
View Code
BASH
1
sudo
apt-get
install
libmysqlclient15-dev
很简单，接口装好了，具体的接口函数可以参考这里：
http://dev.mysql.com/doc/refman/5.0/en/c.html
相关mysql头文件和库文件安装在/usr/include/mysql/和/usr/lib/mysql目录
把lib和头文件拷贝到公用：
sudo cp /usr/lib/mysql/* /usr/lib/
sudo cp /usr/include/mysql/* /usr/include/
这样，就可以直接用：
?
View Code
C
1
#include <mysql.h>
来替换
?
View Code
C
1
#include "/usr/include/mysql/mysql.h"
这篇文章的主要参考资料：
http://feizf.blogbus.com/logs/30689586.html
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-21 19:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[建立Mysql C开发环境]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C"><![CDATA[C]]></category><category domain="post_tag" nicename="Mysql"><![CDATA[Mysql]]></category><category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>一个简单的连接Mysql的C程序</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这段代码主要是为了测试Mysql C环境是不是安装好。
?
View Code
C
1
2
3
4
5
6
7
8
9
10
//file name: dbtest.c
#include <stdio.h>
#include <stdlib.h>
#include <mysql.h>
int
main
(
)
{
MYSQL mysql
;
mysql_init
(
&
mysql
)
;
return
0
;
}
接下来编译：
?
View Code
BASH
1
gcc
-lmysqlclient
dbtest.c
-o
dbtest
如果没有报错，应该就没问题了。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-23 11:02:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[一个简单的连接Mysql的C程序]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Mysql"><![CDATA[Mysql]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Mysql C API编程1</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[本文参考资料：
http://dev.csdn.net/article/59/59727.shtm
http://dev.mysql.com/doc/refman/5.0/en/c.html
]]></content:encoded>
                <wp:post_date><![CDATA[2010-02-23 11:33:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Mysql C API编程1]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="API"><![CDATA[API]]></category><category domain="post_tag" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="post_tag" nicename="Mysql"><![CDATA[Mysql]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>Ubuntu下建立GTK2.0开发环境</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前的论文是在终端下实现的，现在打算作一个UI，因为是在用UBUNTU，所以打算用GTK2.0做。
下面是建立开发环境的详细步骤：
1。安装基本的库，开发包
sudo apt-get install libgtk2.0-dev
sudo apt-get install libgtk2.0-doc (可选)
sudo apt-get install gtk2-examples (可选)
2。安装UI设计工具glade。
sudo apt-get install glade
]]></content:encoded>
                <wp:post_date><![CDATA[2010-03-8 18:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Ubuntu下建立GTK2.0开发环境]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gtk"><![CDATA[gtk]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>解决Ubuntu下Empathy无音效</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[用的 EEEUBUNTU，装了empathy后发现没声音，找了个解决方法。
Empathy
用 的音效是ubuntu”預設”音效 (/usr/share/sounds/ubuntu/stereo)
只要那个目录有以下几个文件就可以：
“message-new-instant”
“message-sent-instant”
“service-login”
“service-logout”
“phone-incoming-call”
“phone-outgoing-calling”
“phone-hangup”
格式为”ogg”
参考网站：
http://hi.baidu.com/%CF%EB%B2%BB%B3%F6%87%E5%B5%C4id%C1%CB/blog/item/67bede27ccbe2908908f9d4d.html
]]></content:encoded>
                <wp:post_date><![CDATA[2010-04-6 19:55:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[解决Ubuntu下Empathy无音效]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="empathy"><![CDATA[empathy]]></category><category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>解决ubuntu下gedit打开文件乱码问题</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[终端输入gconf-editor调出gconf-edit
在apps->gedit-2->preferences－＞encodings 在右边的auto-detected中双击会弹出一个对话框，在那里加入一个GBK和GB2312，然后把这两个的优先级设置为最高（在下面点向上）。
OK了。
参考资料：http://www.ourys.com/
]]></content:encoded>
                <wp:post_date><![CDATA[2010-04-8 16:09:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[解决ubuntu下gedit打开文件乱码问题]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gedit"><![CDATA[gedit]]></category><category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>今天第二次面试了</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这是我第二次面试了，关于第一次，哪天有心情了再说。因为我住的地方离面试公司特别远，怕迟到，今天早上十点就出发了，结果到的太早了，无奈，幸好旁边有个公园，在公园逛了会，看了看几个人钓鱼，晒着春光，沐浴着春风，还蛮舒服的，一点到了，好了，去面试了。
在那个公司的门口等了等，一个MM出来把我带进了会议室，然后拿了张试卷给我作，先是问答题，我觉得还挺简单，但有些基本概念却弄不明白，例如天天用的socket，还有大部分进程间通讯的题，接着就是编程题，被我用循环链表轻松解决，后来就是翻译题，关于remapping的，还好之前作了点翻译项目，最后又作了几个智力题，很轻松的解决了。
接下来就是一个感觉很有威力的人对我进行面试了，他拿着我的简历挨个问，幸好我的简历很真实，要不可要完了，最后有问了我点毕业设计的问题，这些对我来说当然是小case（感谢伟大的石院长）。
最后面试我的人对我说说人事部的人现在不在，让我等等，于是我太无聊便发了篇懒文。
祝我好运吧！
PS：人事部的人还没来，我就把我觉得最难的那道智力题弄出来让你们做作吧。
屋里有三盏灯由屋外的三个开关控制，屋外看不到屋内，只进屋内一次就分辨出三个灯都由哪个开关控制。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-04-9 15:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[今天第二次面试了]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="面试"><![CDATA[面试]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>Blog又关了段时间</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前段时间主机重装系统，把的我数据库搞坏了，之前一直忙着工作和答辩没管他的，今天抽了点时间修复了。
发现主机提供的还原数据库的方法不可靠，还原后还是不能正常使用BLOG，后来用phpmyadmin还原，结果就好了。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-05-16 14:38:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Blog又关了段时间]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>终于毕业了。</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[大学四年就这么结束了，和同学不知道吃了多少次散伙饭了，终于大家要各奔东西了，确实很舍不得许多兄弟。
愿大家今后都混的好。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-06-1 13:14:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[终于毕业了。]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>ubuntu在图形化界面时为程序使用root权限打开</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在程序的启动命令前加上 gksu。
例如 gksu wireshark
]]></content:encoded>
                <wp:post_date><![CDATA[2010-06-10 14:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[ubuntu在图形化界面时为程序使用root权限打开]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>这个镜像网站不错！</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[http://mirrors.sohu.com/
]]></content:encoded>
                <wp:post_date><![CDATA[2010-06-27 11:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[这个镜像网站不错！]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="镜像"><![CDATA[镜像]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>用mtrace()查看内存泄漏</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[?
View Code
C
1
2
3
4
5
6
7
8
9
10
#include &lt;mcheck.h&gt;
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
int
main
(
void
)
{
setenv
(
"MALLOC_TRACE"
,
"./memleak.log"
,
1
)
;
mtrace
(
)
;
char
*
p
=
malloc
(
10
)
;
return
0
;
}
然后用mtrace命令就可以查看内存泄漏情况：
?
View Code
BASH
1
$ mtrace memleak.log
]]></content:encoded>
                <wp:post_date><![CDATA[2010-06-30 16:48:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[用mtrace()查看内存泄漏]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="mtrace"><![CDATA[mtrace]]></category><category domain="post_tag" nicename="内存泄漏"><![CDATA[内存泄漏]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>LFS之路1-关于恢复状态</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[很久之前就下载了LFS的一些资料，也做过一段时间，但是当时没坚持，现在把台式机弄好了，打算再完整的做一次LFS，下载的ISO是6.3，参考的资料是：
http://www.linuxsir.org/bbs/thread322894.html
我在这做一个自己的记录。
我不是用虚拟机装的 ，在自己的硬盘后面留了12G做LFS，用CD启动后运行cfdisk分区，分区完成后就开始做一些必要的准备工作。
挂载目标分区到/mnt/lfs；
在/mnt/lfs下面建立一下几个文件夹：
sources:存放源码
tools:工具链
prepare:我自己加的，用于存放一些恢复步骤的文件，主要有：
begin.sh:root用户时使用的一些初始化脚本，代码如下：
?
View Code
BASH
1
2
3
4
5
6
7
8
9
#!/bin/bash
swapon
/
dev
/
sda10
ln
-sv
/
mnt
/
lfs
/
tools
/
groupadd lfs
useradd
-s
/
bin
/
bash
-g
lfs
-m
-k
/
dev
/
null lfs
chown
-v
lfs
/
mnt
/
lfs
/
tools
chown
-v
lfs
/
mnt
/
lfs
/
sources
chown
-v
lfs
/
mnt
/
lfs
/
prepare
passwd
lfs
.bash_profile:
?
View Code
BASH
1
exec
env
-i
HOME
=
$HOME
TERM
=
$TERM
PS1
=
'\u:\w \$'
/
bin
/
bash
.bashrc:
?
View Code
BASH
1
2
3
4
5
6
set
+h
umask
022
LFS
=
/
mnt
/
lfs
LC_ALL
=POSIX
PATH
=
/
tools
/
bin:
/
bin:
/
usr
/
bin
export
LFS LC_ALL PATH
begin2.sh:切换为lfs用户运行的一个初始化脚本：
?
View Code
BASH
1
2
3
4
5
#!/bin/bash
cp
/
mnt
/
lfs
/
prepare
/
.bash
*
~
/
source
~
/
.bash_profile
export
cd
$LFS
/
sources
这样，恢复就显得简单多了。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-07-25 13:09:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[LFS之路1-关于恢复状态]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="LFS"><![CDATA[LFS]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>前一段时间（2010.6.1-2010.8.7）的总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前一段时间毕业了，工作了，很忙，一直没有时间打理自己的博客，今天抽空对前段时间做点总结。
生活：
没毕业在南京实习的时候一直住在同学寝室，每天到公司都要1个半小时，现在毕业了，就在离公司不远的地方租了个房，和房东住一起，感觉有点奇怪。现在对这个房子的价格不满意，预计过段时间还是要搬家的。每天早上做公交去公司，只要几分钟的车程，主要就是等公交有点慢。中午休息的时间一般都在打乒乓球，下午6点下班，在外边吃点东西就回住处了。一个人生活，花费不是很大。
工作：算起来，我工作也有快两个月了，工作主要是做了一个基于http协议的客户端软件，用到了libcurl和readline库，也学到了不少的东西。
感情：灵芝在毕业时来南京玩了几天后就回家去了，虽然我们偶尔的吵了几次架，但是感情还很稳定。
好了，大约就这么点事。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-08-7 17:40:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[前一段时间（2010.6.1-2010.8.7）的总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>最近一段时间的学习计划</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近因为工作了，书看的少了，发现以前很熟络的东西也生疏了。最近一段时间的工作不是很忙，所以打算学点新东西，也巩固下以前的知识。
APUE，以前草草的翻了一遍，现在发现许多的问题还是一知半解。
python，半年前就学的差不多了，可是很久没用过了，现在已经忘的差不多了。
shell编程，一直没把shell当回事，现在工作了才发现shell也是很强大的。
我的计划是年前把上边3个东西吃透。要努力了！
]]></content:encoded>
                <wp:post_date><![CDATA[2010-08-9 21:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[最近一段时间的学习计划]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category><category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>ubuntu9.10下配置apache支持CGI</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[我的apache安装好后默认的网页目录为：/var/www，我现在想要修改CGI目录到/var/www/cgi-bin/下，
首先，修改文件：/etc/apache2/sites-available/default
将其中的ScriptAlias /cgi-bin/段修改为：
ScriptAlias /cgi-bin/ /var/www/cgi-bin/
<Directory “/var/www/cgi-bin/”>
AllowOverride None
Options +ExecCGI -MultiViews +SymLinksIfOwnerMatch
Order allow,deny
Allow from all
</Directory>
然后，重启apache就可以了：
sudo /etc/init.d/apache2 restart
]]></content:encoded>
                <wp:post_date><![CDATA[2010-08-16 15:53:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[ubuntu9.10下配置apache支持CGI]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="apache"><![CDATA[apache]]></category><category domain="post_tag" nicename="cgi"><![CDATA[cgi]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>忠犬八公</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[昨天晚上看了忠犬八公,很感人.
一条狗就这样守着主人,直到死掉.
]]></content:encoded>
                <wp:post_date><![CDATA[2010-09-3 10:15:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[忠犬八公]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>为gedit装上Symbol Browser插件</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[先安装包：
?
View Code
BASH
1
sudo
aptitude
install
exuberant-ctags libgnomeprintui2.2-
0
然后去主页下了安装：
http://sourceforge.net/projects/symbol-browser/files/
]]></content:encoded>
                <wp:post_date><![CDATA[2010-09-27 13:21:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[为gedit装上Symbol Browser插件]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gedit"><![CDATA[gedit]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>我发誓，以后不会再有类似的文章出现了。</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[自从开博刚开始的时候能持续的更新博客，已经很久很久没有打理了，一是因为工作了，虽然不是很忙，但是也没那心思天天写点什么了，二是女朋友周末都过来，更有心思了，O(∩_∩)O~
好吧，我必须承认，每隔一段时间我总会上来发一篇类似的文章，呵呵。
今天突然想到我可以把一些常用的代码小片段贴在这，这样不仅方便自己，也能给大家提供点方便。
另外，才发现LFS6.7发布了，昨天把包都下了，打算过两天在搞一次LFS。到时候一定要坚持在博客上记录全过程。
废话就不多说了，总之以后我会尽量多多更新博客，不然也对不起我的域名和主机钱，是吧？o(╯□╰)o
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-19 09:49:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[我发誓，以后不会再有类似的文章出现了。]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>有用的代码小片段1–主机名->IP</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[?
View Code
C
1
2
3
4
5
6
7
struct
hostent
*
host
;
struct
sockaddr_in serv_addr
;
host
=
gethostbyname
(
argv
[
1
]
)
)
;
serv_addr.
sin_family
=
AF_INET
;
serv_addr.
sin_port
=
htons
(
9999
)
;
serv_addr.
sin_addr
=
*
(
(
struct
in_addr
*
)
host
->
h_addr
)
;
bzero
(
&
(
serv_addr.
sin_zero
)
,
8
)
;
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-19 09:57:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[有用的代码小片段1–主机名->IP]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="代码片段"><![CDATA[代码片段]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>有用的代码小片段2-TCP,Socket,Select</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
#define MAXCONN 5 //连接队列中的个数
int
main
(
)
{
int
fd
[
MAXCONN
]
=
{
0
}
;
//连接的fd
int
conn_amount
;
//当前的连接数
int
sock_fd
,
new_fd
;
//监听套接字 连接套接字
fd_set fdsr
;
//文件描述符集的定义
int
maxsock
;
struct
timeval tv
;
struct
sockaddr_in server_addr
;
// 服务器的地址信息
struct
sockaddr_in client_addr
;
//客户端的地址信息
socklen_t sin_size
;
int
ret
,
i
;
char
buf
[
256
]
=
{
0
}
;
memset
(
&
server_addr
,
0
,
sizeof
(
server_addr
)
)
;
server_addr.
sin_family
=
AF_INET
;
server_addr.
sin_port
=
htons
(
9999
)
;
server_addr.
sin_addr
.
s_addr
=
INADDR_ANY
;
//通配IP
//建立sock_fd套接字
if
(
(
sock_fd
=
socket
(
AF_INET
,
SOCK_STREAM
,
0
)
)
==-
1
)
{
perror
(
"setsockopt"
)
;
exit
(
1
)
;
}
if
(
bind
(
sock_fd
,
(
struct
sockaddr
*
)
&
server_addr
,
sizeof
(
server_addr
)
)
==
-
1
)
{
perror
(
"bind error!
\n
"
)
;
exit
(
1
)
;
}
if
(
listen
(
sock_fd
,
MAXCONN
)
==-
1
)
{
perror
(
"listen error!
\n
"
)
;
exit
(
1
)
;
}
printf
(
"listen port 9999
\n
"
)
;
conn_amount
=
0
;
sin_size
=
sizeof
(
client_addr
)
;
maxsock
=
sock_fd
;
while
(
1
)
{
//初始化文件描述符集合
FD_ZERO
(
&
fdsr
)
;
//清除描述符集
FD_SET
(
sock_fd
,&
fdsr
)
;
//把sock_fd加入描述符集
//超时的设定
tv.
tv_sec
=
30
;
tv.
tv_usec
=
0
;
//添加活动的连接
for
(
i
=
0
;
i
<
MAXCONN
;
i
++
)
{
if
(
fd
[
i
]
!=
0
)
{
FD_SET
(
fd
[
i
]
,&
fdsr
)
;
}
}
//如果文件描述符中有连接请求会做相应的处理，实现I/O的复用 多用户的连接通讯
ret
=
select
(
maxsock
+
1
,&
fdsr
,
NULL
,
NULL
,&
tv
)
;
if
(
ret
<
0
)
//没有找到有效的连接 失败
{
perror
(
"select error!
\n
"
)
;
break
;
}
else
if
(
ret
==
0
)
// 指定的时间到，
{
printf
(
"timeout
\n
"
)
;
continue
;
}
//循环判断有效的连接是否有数据到达
for
(
i
=
0
;
i
<
conn_amount
;
i
++
)
{
if
(
FD_ISSET
(
fd
[
i
]
,&
fdsr
)
)
{
memset
(
buf
,
0
,
256
)
;
ret
=
recv
(
fd
[
i
]
,
buf
,
sizeof
(
buf
)
,
0
)
;
if
(
ret
<=
0
)
//客户端连接关闭，清除文件描述符集中的相应的位
{
printf
(
"client[%d] close
\n
"
,
i
)
;
close
(
fd
[
i
]
)
;
FD_CLR
(
fd
[
i
]
,&
fdsr
)
;
fd
[
i
]
=
0
;
conn_amount
--;
}
else
//否则有相应的数据发送过来 ，进行相应的处理
{
//buf[ret]=0;
printf
(
"%d
\n
"
,
ret
)
;
printf
(
"client[%d] send:%s
\n
"
,
i
,
buf
)
;
send
(
fd
[
i
]
,
buf
,
sizeof
(
buf
)
,
0
)
;
}
}
}
//for
if
(
FD_ISSET
(
sock_fd
,&
fdsr
)
)
{
new_fd
=
accept
(
sock_fd
,
(
struct
sockaddr
*
)
&
client_addr
,&
sin_size
)
;
if
(
new_fd
<=
0
)
{
perror
(
"accept error
\n
"
)
;
continue
;
}
//添加新的fd 到数组中 判断有效的连接数是否小于最大的连接数，如果小于的话，就把新的连接套接字加入集合
if
(
conn_amount
<
MAXCONN
)
{
for
(
i
=
0
;
i
<
MAXCONN
;
i
++
)
{
if
(
fd
[
i
]
==
0
)
{
fd
[
i
]
=
new_fd
;
break
;
}
}
conn_amount
++;
printf
(
"new connection client[%d] %s:%d
\n
"
,
conn_amount
,
inet_ntoa
(
client_addr.
sin_addr
)
,
ntohs
(
client_addr.
sin_port
)
)
;
if
(
new_fd
>
maxsock
)
{
maxsock
=
new_fd
;
}
}
else
{
printf
(
"max connections arrive ,exit
\n
"
)
;
send
(
new_fd
,
"bye"
,
4
,
0
)
;
close
(
new_fd
)
;
continue
;
}
}
}
//while
for
(
i
=
0
;
i
<
MAXCONN
;
i
++
)
{
if
(
fd
[
i
]
!=
0
)
{
close
(
fd
[
i
]
)
;
}
}
exit
(
0
)
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-19 14:00:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[有用的代码小片段2-TCP,Socket,Select]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="代码片段"><![CDATA[代码片段]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>要装杀毒软件。</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前段时间在淘宝上买东西，结果不是很满意，给了差评。
结果卖家企图用300块换我的差评，被我拒绝后，
竟然，竟然，我的淘宝账号被盗了，差评也被删掉了。
最近在和淘宝交涉恢复差评，目前已取得突破性进展。
虽说我没装杀毒软件，但是不至于怎么被盗的号都不知道吧。有点匪夷所思啊。
哎，LINUX的裸奔可不能用到windows上啊。主要还是因为linux的桌面系统不够流行啊，连一些主流的网上银行都不支持，搞的我要经常用windows买东西，这下杯具产生了。幸好没有很大的损失，算是吃一处长一智吧。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-22 17:24:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[要装杀毒软件。]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>刘翔，13.09，很犀利</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[起跑的瞬间，真的很扣人心弦啊。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-24 20:01:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[刘翔，13.09，很犀利]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="刘翔"><![CDATA[刘翔]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>又是内存泄漏，valgrind！</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天测试程序的时候，想看看CPU的占用率怎么样，无意间发现进程使用的内存一直增长。
果不其然，一会之后我的程序就被操作系统kill掉了。
以前记得有个内存泄漏的检测工具，不过好像有点麻烦，还要修改源代码。
同事给我推荐valgrind，果真很强大阿！
?
View Code
BASH
1
valgrind
--leak-check
=full .
/
test
如果输出结果太多不好看的话，可以增加 –log-file=valgrind_log ，在文件中慢慢分析。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-24 21:53:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[又是内存泄漏，valgrind！]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="valgrind"><![CDATA[valgrind]]></category><category domain="post_tag" nicename="内存泄漏"><![CDATA[内存泄漏]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>云，真的来了。</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[我知道，云计算的概念已经存在很久了，但是我却一直没明白他的真正含义，今天用了用webQQ，突然觉悟了 。
我平时使用虾米听歌，使用ubuntu one来备份数据到服务器，使用webQQ与朋友交流，在豆瓣上看资料，在youku上看视频电影，使用xmarks在各个系统的浏览器上同步我的书签。。。
也许未来的网络生涯只需要一个浏览器。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-25 21:19:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[云，真的来了。]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="云"><![CDATA[云]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>有用的代码小片段3-linux终端进度条</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
int
progressBar
(
unsigned
int
current
,
unsigned
int
total
,
double
speed
)
{
double
prcnt
;
int
num_of_dots
;
char
buffer
[
80
]
=
{
0
}
;
int
width
;
/* get term width */
FILE
*
fp
;
prcnt
=
1.0
*
current
/
total
;
fp
=
popen
(
"stty size | cut -d
\"
\"
-f2"
,
"r"
)
;
fgets
(
buffer
,
sizeof
(
buffer
)
,
fp
)
;
pclose
(
fp
)
;
width
=
atoi
(
buffer
)
;
if
(
width
<
32
)
{
printf
(
"\e[1A%0.2f%s  %3d%% completed.
\n
"
,
speed
,
"Mb/s"
,
(
int
)
(
prcnt
*
100
)
)
;
}
else
{
num_of_dots
=
width
-
20
;
char
*
pline_to_print
=
(
char
*
)
malloc
(
sizeof
(
char
)
*
width
)
;
int
dots
=
(
int
)
(
num_of_dots
*
prcnt
)
;
memset
(
pline_to_print
,
0
,
width
)
;
memset
(
pline_to_print
,
'>'
,
dots
)
;
memset
(
pline_to_print
+
dots
,
' '
,
num_of_dots
-
dots
)
;
printf
(
"\e[1A %0.2fMb/s [%s] %3d%%
\n
"
,
speed
,
pline_to_print
,
(
int
)
(
prcnt
*
100
)
)
;
free
(
pline_to_print
)
;
}
return
0
;
}
使用方法：
?
View Code
C
1
2
3
4
5
6
7
8
9
main
(
)
{
int
i
;
for
(
i
=
0
;
i
<
100
;
i
++
)
{
progressBar
(
i
,
99
,
8.55
)
;
usleep
(
800
)
;
}
}
]]></content:encoded>
                <wp:post_date><![CDATA[2010-11-26 15:59:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[有用的代码小片段3-linux终端进度条]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="代码片段"><![CDATA[代码片段]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>找到一篇介绍GDB的文章，不错！</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[http://dsec.pku.edu.cn/~yuhj/wiki/gdb.html
]]></content:encoded>
                <wp:post_date><![CDATA[2010-12-2 15:26:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[找到一篇介绍GDB的文章，不错！]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="GDB"><![CDATA[GDB]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>有用的代码小片段4-C实现修改配置文件</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[如果配置文件时这样的：
#this is a simple configure file
myname=yuqiang
age=23
..
..
..
那面下面两个函数应该操作的不错：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
/*
*   getConf: get a config value from a configfile.
*
*   args:
*       confname:   config name
*       value:      the value of config name
*
*   return:
*       0:  success
*       -1: failed
*
*/
int
getConf
(
const
char
*
configfile
,
const
char
*
confname
,
char
*
value
)
{
int
i
;
char
line
[
128
]
=
{
0
}
;
char
conbuff
[
128
]
=
{
0
}
;
int
math
=
0
;
FILE
*
f
=
fopen
(
configfile
,
"r"
)
;
if
(
f
==
NULL
)
{
show_debug_info
(
1
,
"[error] open config file %s"
,
configfile
)
;
return
-
1
;
}
while
(
fgets
(
line
,
sizeof
(
line
)
,
f
)
)
{
if
(
*
line
==
'#'
||
*
line
==
'
\n
'
)
{
memset
(
line
,
0
,
sizeof
(
line
)
)
;
continue
;
}
memset
(
conbuff
,
0
,
sizeof
(
conbuff
)
)
;
i
=
0
;
while
(
line
[
i
]
!=
'='
&&
i
<
strlen
(
line
)
-
1
)
{
conbuff
[
i
]
=
line
[
i
]
;
i
++;
}
if
(
i
==
strlen
(
line
)
)
{
memset
(
line
,
0
,
sizeof
(
line
)
)
;
continue
;
}
if
(
strcmp
(
conbuff
,
confname
)
)
{
memset
(
line
,
0
,
sizeof
(
line
)
)
;
continue
;
}
else
{
if
(
strlen
(
confname
)
+
2
==
strlen
(
line
)
)
return
-
1
;
math
=
1
;
memset
(
value
,
0
,
strlen
(
value
)
)
;
memcpy
(
value
,
line
+
strlen
(
confname
)
+
1
,
strlen
(
line
)
-
strlen
(
confname
)
-
2
)
;
//还有一个'\n'
//printf("|%s|=|%s|\n",confname,value);
break
;
}
memset
(
line
,
0
,
sizeof
(
line
)
)
;
}
fclose
(
f
)
;
if
(
math
)
return
0
;
else
return
-
1
;
}
/*
*   setConf: set a config value to a configfile.
*
*   args:
*       confname:   config name
*       value:      the value of config name
*
*   return :
*       0:  success
*       1:  add a new config
*       -1: failed
*
*/
int
setConf
(
const
char
*
configfile
,
const
char
*
confname
,
const
char
*
value
)
{
char
conbuff
[
128
]
=
{
0
}
;
int
i
;
char
line
[
128
]
=
{
0
}
;
int
math
=
0
;
FILE
*
f
=
fopen
(
configfile
,
"r"
)
;
if
(
f
==
NULL
)
{
FILE
*
newf
=
fopen
(
configfile
,
"a"
)
;
if
(
newf
==
NULL
)
{
show_debug_info
(
1
,
"[error] open config file %s"
,
configfile
)
;
return
-
1
;
}
sprintf
(
conbuff
,
"%s=%s
\n
"
,
confname
,
value
)
;
fputs
(
conbuff
,
newf
)
;
fclose
(
newf
)
;
return
1
;
}
/* open a tmp file to save config */
FILE
*
tmp
=
tmpfile
(
)
;
if
(
tmp
==
NULL
)
{
return
-
1
;
}
/*parse config file and save to tmp file*/
while
(
fgets
(
line
,
sizeof
(
line
)
,
f
)
)
{
memset
(
conbuff
,
0
,
sizeof
(
conbuff
)
)
;
if
(
*
line
==
'#'
||
*
line
==
'
\n
'
)
{
fputs
(
line
,
tmp
)
;
memset
(
line
,
0
,
sizeof
(
line
)
)
;
continue
;
}
i
=
0
;
while
(
line
[
i
]
!=
'='
&&
i
<
strlen
(
line
)
)
{
conbuff
[
i
]
=
line
[
i
]
;
i
++;
}
if
(
strcmp
(
conbuff
,
confname
)
)
{
fputs
(
line
,
tmp
)
;
}
else
{
math
=
1
;
memset
(
conbuff
,
0
,
sizeof
(
conbuff
)
)
;
sprintf
(
conbuff
,
"%s=%s
\n
"
,
confname
,
value
)
;
fputs
(
conbuff
,
tmp
)
;
}
memset
(
line
,
0
,
sizeof
(
line
)
)
;
}
if
(
math
==
0
)
{
memset
(
conbuff
,
0
,
sizeof
(
conbuff
)
)
;
sprintf
(
conbuff
,
"%s=%s
\n
"
,
confname
,
value
)
;
fputs
(
conbuff
,
tmp
)
;
}
fclose
(
f
)
;
fflush
(
tmp
)
;
rewind
(
tmp
)
;
/*copy tmp file's data to config file*/
f
=
fopen
(
configfile
,
"w+"
)
;
if
(
f
==
NULL
)
{
show_debug_info
(
1
,
"[error] open config file %s"
,
configfile
)
;
return
-
1
;
}
memset
(
line
,
0
,
sizeof
(
line
)
)
;
while
(
fgets
(
line
,
sizeof
(
line
)
,
tmp
)
)
{
fputs
(
line
,
f
)
;
memset
(
line
,
0
,
sizeof
(
line
)
)
;
}
fclose
(
tmp
)
;
fclose
(
f
)
;
if
(
math
)
return
0
;
else
return
1
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2010-12-10 13:45:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[有用的代码小片段4-C实现修改配置文件]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="代码片段"><![CDATA[代码片段]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category></item>

        <item>
                <title>用VS？太别扭</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前一直都是在Ubuntu下作开发，自从ubuntu挂掉之后，我就没在折腾，直接换了XP+虚拟机，目前我写代码的方式是这样的：
在虚拟机中装了一个rhel5.5，开启ssh；
在windows上用ssh客户端连接到虚拟机中的rhel5.5，我又一个习惯，喜欢在写源码之前就把makefile写好，这样我就用这个ssh客户端做编译测试；
同时在虚拟机中开一个与host的共享文件夹，所以我在windows上可以很方便的对源代码进行编辑，之前一直用notepad++，后来发现UE更适合写程序，现在就一直在用UE，其实这里有一个重要的原因，就是UE有ssh的插件，在写代码的时候很方便的。
同事（windows程序员）发现我这个组合后，建议我用vs03做代码编辑器。我就试探性的装上了vs03，结果不到一天，卸掉了。
原因如下：
1.作为一个linux程序员，在windows下写程序已经让我觉得无地自容了，现在竟然还要用vs，想想都别扭；
2.我的电脑配置也不咋滴（E2160，2G），本来程序开多了就卡卡的，vs运行的不是很顺畅；
3.用不惯vs，功能强大，但是大部分用不到。
刚刚开始的时候，我总是对linux下没有一个很好的IDE耿耿于怀，但是自从我能熟练的用GDB，make等等之后，我用着装了若干插件的gedit还是很爽的，呵呵。
有没有IDE，对我已经不是很重要了。
]]></content:encoded>
                <wp:post_date><![CDATA[2010-12-16 19:16:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[用VS？太别扭]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="IDE"><![CDATA[IDE]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>调试core文件</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[经常遇到段错误，用core调试能很轻松的找到出错点。
系统默认是不产生core文件的，要产生core文件，首先用下面的命令查看：
ulimit -a
可以看到这一行：
core file size          (blocks, -c) 0
现在只要运行命令
ulimit -c unlimited
就能在程序内存错误的时候产生core文件，但是要注意，这个修改只是展示的，如果换了终端或重启，修改会被还原的。
现在，如果程序段错误，就会生成一个core.pid的core文件（rhel5.5），接下来，只需要：
gdb  a.out core.1333
进入后，用bt命令查看段错误发生的函数及其堆栈。
很方便吧
]]></content:encoded>
                <wp:post_date><![CDATA[2010-12-17 15:19:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[调试core文件]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="core"><![CDATA[core]]></category><category domain="post_tag" nicename="GDB"><![CDATA[GDB]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>终端颜色</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[http://basiccoder.com/output-colorful-words-in-terminal.html
]]></content:encoded>
                <wp:post_date><![CDATA[2010-12-23 11:48:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[终端颜色]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="终端颜色"><![CDATA[终端颜色]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>关于SIGPIPE</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近在做网络编程，有时候程序会挂掉，调试发现程序收到了SIGPIPE，造成这个信号的原因可以自行google，因为程序收到SIGPIPE的默认动作是终止程序，所以我们需要对这个信号进行屏蔽。
在多进程的环境下，下面代码可以解决问题：
?
View Code
C
1
2
3
4
5
6
7
8
9
struct
sigaction sa
;
sa.
sa_handler
=
SIG_IGN
;
sa.
sa_flags
=
0
;
sigemptyset
(
&
amp
;
sa.
sa_mask
)
;
sigaddset
(
&
amp
;
sa.
sa_mask
,
SIGPIPE
)
;
if
(
sigaction
(
SIGPIPE
,
&
amp
;
sa
,
0
)
)
{
perror
(
"failed to ignore SIGPIPE"
)
;
exit
(
-
1
)
;
}
如果是在多线程的环境下，在创建线程之前需要：
?
View Code
C
1
2
3
4
5
6
sigset_t signal_mask
;
sigemptyset
(
&
amp
;
signal_mask
)
;
sigaddset
(
&
amp
;
signal_mask
,
SIGPIPE
)
;
if
(
pthread_sigmask
(
SIG_BLOCK
,
&
amp
;
signal_mask
,
NULL
)
)
{
printf
(
"block sigpipe error
\n
"
)
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2010-12-30 17:04:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[关于SIGPIPE]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="SIGPIPE"><![CDATA[SIGPIPE]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>套接口编程的5个隐患（转）</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[无意间看见，觉得很不错。
http://www.ibm.com/developerworks/cn/linux/l-sockpit/
]]></content:encoded>
                <wp:post_date><![CDATA[2010-12-30 17:14:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[套接口编程的5个隐患（转）]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="socket"><![CDATA[socket]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>姗姗来迟的2010年终总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[现在是1月4日晚上11点45分，要是再晚写15分钟，我的年终总结就要迟到整整6天了。
关于工作，今年6月初，我正式完成论文答辩，离开了生活了四年的校园，离开了熟悉的同学，只身来到南京工作。一直在8月初，我才转正，在公司主要做一个产品的linux客户端，说实话，并不是非常顺利，客户端的需求一直在改，一直没有稳定下来，导致我第一个版本的客户端都没怎么测试就被抛弃。虽然这个客户端并没有产生直接的经济效益，但是通过这段时间的磨练，我学到了很多东西，有些是显而易见的，而有些则是潜移默化的。 但是经过近半年的工作，我也明显的发现了工作上的不足：
不太注重文档上的东西，这一点可以从我每周的工作报告看得出；
有时考虑问题很片面，经常顾此失彼；
容易自我满足，经常性的沾沾自喜；
对系统的细节不是很清楚，直接导致有时都不敢确定自己代码的健壮；
对有些基本的系统调用和函数库不熟，往往是一边写代码，一边man；
还有一点很很重要，我一点都不够低调，说话也不够委婉；
10月底开始看内核，对内核有了一个大概的了解，也看了一点驱动方面的书，收获不是很大，看的似懂非懂的。在我打算深入的时候，突然发现原来自己连表面上的东西尚未掌握：前段时间我无意间翻了一翻APUE，突然发现自己有如此多的章节没有看过，大概翻了一下后，我突然觉得自己对内核和驱动有了一个新的认识，于是决定在过年前把这本书好好的在读一遍，现在已经读了将近一半。除了APUE，年前我还需要把UNP再通读一边，因为现在工作涉及网络编程不是很多，所以打算先复习下，等用到了在细细的研究。
关于钱，平时也怎么规划，算是一个标准的“月光”。现在我的存款还是3位数，而且刚刚工作的时候还找家里要了不少钱，比较惭愧。但是我想在新的一年里会好起来的。
至于我的宝贝灵灵，除了在做菜的时候我们两会争论先放油还是先放水之类的问题外，我们相处的还是很和睦的，希望我们两个人能一直保持这份和睦和相亲相爱。
总结
2010年开始工作后，知识涨了不少，与灵灵的感情也算稳定，虽然钱没存多少，但是我还是看到了我美好的未来 。2010年对我来说是一个很好的开端，希望在2011年我能保持好这份奋斗的热情，为俞强、他家人、他亲爱的阿猪崽的将来更加努力的生活。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-01-4 23:47:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[姗姗来迟的2010年终总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="总结"><![CDATA[总结]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>ioctl获取所有网卡信息</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[/* 获得网卡名 */
struct ifreq *ifr, *ifend;
struct ifconf ifc;
struct ifreq ifs[16];
int sockfd;
sockfd = socket(AF_INET, SOCK_DGRAM, 0);
ifc.ifc_len = sizeof(ifs);
ifc.ifc_req = ifs;
if (ioctl(sockfd, SIOCGIFCONF, &ifc) ifr_addr.sa_family == AF_INET) {
if ( strncmp(ifr->ifr_name,”lo”,strlen(“lo”)) ) {
printf(“[dev]%s\n”,ifr->ifr_name);
}
}
}
}
]]></content:encoded>
                <wp:post_date><![CDATA[2011-04-26 15:26:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[ioctl获取所有网卡信息]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>diff patch</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[diff -Naur a/ b/ > patchfile
cd a/
patch -p1
patch to "a/", so now "a/" is the same as "b/"
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-1 21:10:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[diff patch]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="patch"><![CDATA[patch]]></category><category domain="post_tag" nicename="命令技巧"><![CDATA[命令技巧]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>clean gentoo temp</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[rm -rf /usr/portage/distfiles/*
rm -rf /var/tmp/portage/*
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-1 21:12:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[clean gentoo temp]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gentoo"><![CDATA[gentoo]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>为u-boot增加自定义命令</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近需要给u-boot增加一个命令，上网搜了搜，是找到了方法，但是对于我移植的版本（2010-09）并不适用，于是自己摸索了一翻，才发现是如此的简单。
例如我要增加一个boot_zImage的命令，操作如下：
第一步：在common目录下建立一个cmd_boot_zImage.c的文件；
第二步：修改cmd_boot_zImage.c，在文件尾添加关键代码：
U_BOOT_CMD(
boot_zImage, 1, 0,      do_boot_zImage,
“cmd_boot_zImage – boot Linux’s zImage\n”,
“”
);
第一行中各字段含义：
boot_zImage：在u-boot中运行的命令；
1：最大参数个数
0：repeat last command
第二行为usage信息；
第三行为help信息。
第三步：修改common/Makefile，增加：
COBJS-y += cmd_boot_zImage.o
OK，搞定！
]]></content:encoded>
                <wp:post_date><![CDATA[2011-01-1 21:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[为u-boot增加自定义命令]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="u-boot"><![CDATA[u-boot]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category></item>

        <item>
                <title>移植程序到大端CPU</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[因为客户的机器是ibm服务器，用的PowerPC，是大端模式，所以最近我就研究了一把小端程序向大端cpu移植的注意事项，其实如果不涉及到对外接口，移植工作会很轻松。
首先要明白什么是大端，小端，网络字节序。先撇开“网络字节序”，大小端说白了就是cpu取数据是从高地址还是从低地址开始。因为无论是32位还是64位架构，一个字节总是由8位组成，所以对于一个字节的数据，大小端的处理都是一样的，例如char，但是如果是由多个字节组成的数据，那么麻烦就来了，例如int变量，典型的，它占了4个字节，所以大小端处理就不同。举个例子：
struct res
{
char type;
int data;
};
当小端的机器将此结构发送给大端的机器时，大端机器对data的读取就会出现问题，解决这个问题的方法是将data转换成网络字节序，网络字节序是大端的，其实网络字节序是大端还是小端并不重要，重要的是他给通讯的双方制定了一套规则，这样，不管目标机器是大端还是小端都不会对数据的读取造成影响。
所以，在通讯的过程中，将数据转换为网络字节序，不论是对于移植，还是对于程序的兼容性，都是大有裨益的！
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-1 21:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[移植程序到大端CPU]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="PowerPC"><![CDATA[PowerPC]]></category><category domain="post_tag" nicename="字节序"><![CDATA[字节序]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>mount LVM</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[sudo apt-get install lvm2
sudo vgscan
sudo vgchange -ay volGroup0
sudo lvs
sudo mount /dev/volGroup0/logvol00 /mnt
]]></content:encoded>
                <wp:post_date><![CDATA[2011-05-2 09:59:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[mount LVM]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="LVM"><![CDATA[LVM]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>ubuntu右键添加打开终端</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[sudo apt-get install nautilus-open-terminal
]]></content:encoded>
                <wp:post_date><![CDATA[2011-02-3 10:41:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[ubuntu右键添加打开终端]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>移植u-boot-2010.09到tq2440(一)</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前言:
很久之前就买了块s3c2440的开发板tq2440,之前一直都是用天嵌提供的u-boot，但是这个u-boot的版本太老，使用的还是parameter_struct的传递内核参数的方法，这种传递参数的方法主要是2.6 之前的内核使用的方式。于是我就有了移植u-boot的想法，在网上看了不少u-boot移植的资料，但是大多都是讲到一些驱动的移植后就结束了，竟然连linux内核的引导都没有讲清楚，感觉很不完整，所以我打算再做一个文档作为补充。所以，我的移植重点在于完整的实现一个最最基本的bootloader的功能—从cpu加电开始，一直到bootloader完全的把cpu的控制权限交给内核，什么NOR Flash，网卡，统统用不到，所以不移植。
一．    移植的硬软件环境
移植版本：u-boot-2010.09
硬件参数：tq2440开发板，s3c2440A,64M的SDRAM，256M的nand Flash。
二．    U-boot引导内核的基本过程
接触过bootloader的人都知道bootloader是分为两个部分，即stage1和stage2，stage1的主要工作为：
1．     定义入口，设置异常向量；
2．     初始化硬件，如cpu，内存；
3．     将rom中的代码复制到ram中；
4．     初始化C的运行环境；
5．     跳转到ram中继续运行。
有了stage1的铺垫，stage2的工作就显得比较简单了：
1．     调用一些列的初始化函数，例如初始化nand flash；
2．     如果是交互模式，则进入主loop()，循环的接收执行用户输入的命令；
3．     如果不是交互模式，对于zImage格式的内核，就复制nand flash中的内核映像到ram的指定位置（如s3c2440为0x30008000）,然后跳转到指定位置执行（这里的详细过程，以后会讲到），此刻，bootloader的使命就完成了，内核已经取得了cpu的完全控制。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-02-8 20:53:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[移植u-boot-2010.09到tq2440(一)]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="u-boot"><![CDATA[u-boot]]></category><category domain="post_tag" nicename="移植"><![CDATA[移植]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>移植u-boot-2010.09到tq2440(二)</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[三．  移植的准备工作
注意：cd ~/u-boot-2010.09表示进入u-boot源码的根目录。
1.      修改顶层目录的Makefile，增加tq2440的配置：
tq2440_config:  unconfig
@$(MKCONFIG) $@ arm arm920t tq2440 samsung s3c24x0
同时修改160行为自己的交叉链，例如我的：
CROSS_COMPILE ?=arm-linux-
2.      因为2440与2410的差异并不大，所以通过复制s3c2410的源代码文件进行修改能大大减小移植的工作量：
cd ~/u-boot-2010.09
cp include/configs/smdk2410.h include/configs/tq2440.h
cp -r board/samsung/smdk2410 board/samsung/tq2440
mv board/samsung/tq2440/smdk2410.c board/samsung/tq2440/tq2440.c
修改board/samsung/tq2440/Makefile 的28行
COBJS   := smdk2410.o flash.o
为
COBJS   := tq2440.o flash.o
3.      在arch/arm/cpu/arm920t/u-boot.lds的43行增加：
board/samsung/tq2440/lowlevel_init.o (.text)
board/samsung/tq2440/tq2440.o (.text)
4.      测试准备工作
make distclean
make tq2440_config
make
如果不出问题的话，将会在u-boot的根目录生成一个u-boot.bin文件，这样，准备工作就完成了，下面就开始真正的移植啦！
四．    硬件相关修改
1.      中断部分的修改
修改arch/arm/cpu/arm920t/start.S的中断代码为：
#define pWTCON  0x53000000
#define INTMSK  0x4A000008
#define INTSUBMSK       0x4A00001C
#define CLKDIVN 0x4C000014
ldr r1, =0x7fff
ldr r0, =INTSUBMSK
str r1, [r0]
2.      cpu时钟设置部分的修改
我选择增加一个c函数clock_init的方式来修改系统时钟，因为用到了堆栈，所以将设置堆栈的代码剪切到前面，然后跳转到clock_init函数：
/* Set up the stack                                                 */
stack_setup:
ldr     r0, _TEXT_BASE          /* upper 128 KiB: relocated uboot   */
sub     r0, r0, #CONFIG_SYS_MALLOC_LEN  /* malloc area              */
sub     r0, r0, #CONFIG_SYS_GBL_DATA_SIZE /* bdinfo                 */
#ifdef CONFIG_USE_IRQ
sub     r0, r0, #(CONFIG_STACKSIZE_IRQ+CONFIG_STACKSIZE_FIQ)
#endif
sub     sp, r0, #12             /* leave 3 words for abort-stack    */
bl      clock_init
在board/samsung/tq2440/tq2440.c中删除掉board_init函数中有关时钟修改的代码，同时增加函数clock_init:
static inline void delay (unsigned long loops)
{
__asm__ volatile (“1:\n”
“subs %0, %1, #1\n”
“bne 1b”:”=r” (loops):”0″ (loops));
}
void clock_init(void)
{
struct s3c24x0_clock_power *clk_power = (struct s3c24x0_clock_power *)0x4C000000;
#define S3C2440_CLKDIV                  0x05    /* FCLK:HCLK:PCLK = 1:4:8, UCLK = UPLL */
#define S3C2440_UPLL_48MHZ              ((0x38CLKDIVN = S3C2440_CLKDIV;
/* change to asynchronous bus mod */
__asm__(  “mrc   p15, 0, r1, c1, c0, 0\n” /* read ctrl register */
“orr   r1, r1, #0xc0000000\n” /* Asynchronous */
“mcr   p15, 0, r1, c1, c0, 0\n” /* write ctrl register  */
:::”r1″ );
/* to reduce PLL lock time, adjust the LOCKTIME register */
clk_power->LOCKTIME = 0xFFFFFF;
/* configure UPLL */
clk_power->UPLLCON = S3C2440_UPLL_48MHZ;                //fin=12.000MHz
/* some delay between MPLL and UPLL */
delay (4000);
/* configure MPLL */
clk_power->MPLLCON = S3C2440_MPLL_400MHZ;               //fin=12.000MHz
}
同时还需要修改arch/arm/cpu/arm920t/s3c24x0/speed.c:
67行修改为：
return (CONFIG_SYS_CLK_FREQ * m * 2) / (p bd->bi_arch_number = MACH_TYPE_TQ2440;
4.      修改board/samung/tq2440/lowleve_init.S中的几个寄存器:
#define DW8                     (0x0)
#define DW16                    (0x1)
#define DW32                    (0x2)
#define WAIT                    (0x1
]]></content:encoded>
                <wp:post_date><![CDATA[2011-02-8 20:55:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[移植u-boot-2010.09到tq2440(二)]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="u-boot"><![CDATA[u-boot]]></category><category domain="post_tag" nicename="移植"><![CDATA[移植]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>移植u-boot-2010.09到tq2440(三)</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[五．  Nand Flash驱动的移植
Nand flash的移植还是很重要的，因为我们的u-boot和内核镜像都是烧在nand flash中的，必须要能操作nand flash，才能继续进行下去（stage2），nand flash的驱动代码主要是取自天嵌的u-boot。
1.      建立文件drivers/mtd/nand/s3c2440_nand.c，添加如下内容：
/*
* Nand flash interface of s3c2440
*/
#include
#if 0
#define DEBUGN    printf
#else
#define DEBUGN(x, args …) {}
#endif
#include
#include
#include
#define __REGb(x)    (*(volatile unsigned char *)(x))
#define __REGi(x)    (*(volatile unsigned int *)(x))
#define NF_BASE  0x4e000000             //Nand配置寄存器基地址
#define NFCONF   __REGi(NF_BASE + 0x0)  //偏移后还是得到配置寄存器基地址
#define NFCONT   __REGi(NF_BASE + 0x4)  //偏移后得到Nand控制寄存器基地址
#define NFCMD    __REGb(NF_BASE + 0x8)  //偏移后得到Nand指令寄存器基地址
#define NFADDR   __REGb(NF_BASE + 0xc)  //偏移后得到Nand地址寄存器基地址
#define NFDATA   __REGb(NF_BASE + 0x10) //偏移后得到Nand数据寄存器基地址
#define NFMECCD0 __REGi(NF_BASE + 0x14) //偏移后得到Nand主数据区域ECC0寄存器基地址
#define NFMECCD1 __REGi(NF_BASE + 0x18) //偏移后得到Nand主数据区域ECC1寄存器基地址
#define NFSECCD  __REGi(NF_BASE + 0x1C) //偏移后得到Nand空闲区域ECC寄存器基地址
#define NFSTAT   __REGb(NF_BASE + 0x20) //偏移后得到Nand状态寄存器基地址
#define NFSTAT0  __REGi(NF_BASE + 0x24) //偏移后得到Nand ECC0状态寄存器基地址
#define NFSTAT1  __REGi(NF_BASE + 0x28) //偏移后得到Nand ECC1状态寄存器基地址
#define NFMECC0  __REGi(NF_BASE + 0x2C) //偏移后得到Nand主数据区域ECC0状态寄存器基地址
#define NFMECC1  __REGi(NF_BASE + 0x30) //偏移后得到Nand主数据区域ECC1状态寄存器基地址
#define NFSECC   __REGi(NF_BASE + 0x34) //偏移后得到Nand空闲区域ECC状态寄存器基地址
#define NFSBLK   __REGi(NF_BASE + 0x38) //偏移后得到Nand块开始地址
#define NFEBLK   __REGi(NF_BASE + 0x3c) //偏移后得到Nand块结束地址
#define S3C2440_NFCONT_nCE  (1priv;
DEBUGN(“hwcontrol(): 0x%02x 0x%02x\n”, cmd, ctrl);
if (ctrl & NAND_CTRL_CHANGE) {
IO_ADDR_W = NF_BASE;
if (!(ctrl & NAND_CLE))                //要写的是地址
IO_ADDR_W |= S3C2440_ADDR_NALE;
if (!(ctrl & NAND_ALE))                //要写的是命令
IO_ADDR_W |= S3C2440_ADDR_NCLE;
if (ctrl & NAND_NCE)
NFCONT &= ~S3C2440_NFCONT_nCE;    //使能nand flash
else
NFCONT |= S3C2440_NFCONT_nCE;     //禁止nand flash
}
if (cmd != NAND_CMD_NONE)
writeb(cmd,(void *)IO_ADDR_W);
}
static int s3c2440_dev_ready(struct mtd_info *mtd)
{
DEBUGN(“dev_ready\n”);
return (NFSTAT & 0x01);
}
int board_nand_init(struct nand_chip *nand)
{
u_int32_t cfg;
u_int8_t tacls, twrph0, twrph1;
struct s3c24x0_clock_power * const clk_power = s3c24x0_get_base_clock_power();
DEBUGN(“board_nand_init()\n”);
clk_power->CLKCON |= (1 IO_ADDR_R = nand->IO_ADDR_W = (void *)0x4e000010;
/* read_buf and write_buf are default */
/* read_byte and write_byte are default */
/* hwcontrol always must be implemented */
nand->cmd_ctrl = s3c2440_hwcontrol;
nand->dev_ready = s3c2440_dev_ready;
nand->ecc.mode = NAND_ECC_SOFT;
return 0;
}
2.      修改drivers/mtd/nand/Makefile，增加：
COBJS-y += s3c2440_nand.o
3.      修改include/config/tq2440.h，支持nand flash启动，随便把其他关于nand的设置一起做好：
#define CONFIG_NAND_S3C2440 1
#define CONFIG_CMD_NAND
#define CONFIG_SYS_NAND_BASE  0x4E000000 //Nand配置寄存器基地址
#define CONFIG_SYS_MAX_NAND_DEVICE      1
#define CONFIG_MTD_NAND_VERIFY_WRITE    1
#define CONFIG_ENV_IS_IN_NAND   1
#define CONFIG_ENV_SIZE                 0x20000
#define CONFIG_ENV_OFFSET               0x40000
4.      在arch/arm/include/asm/arch‐s3c24x0/s3c24x0.h中增加：
struct s3c2440_nand {
u32 NFCONF;
u32 NFCONT;
u32 NFCMD;
u32 NFADDR;
u32 NFDATA;
u32 NFMECCD0;
u32 NFMECCD1;
u32 NFSECCD;
u32 NFSTAT;
u32 NFESTAT0;
u32 NFESTAT1;
u32 NFMECC0;
u32 NFMECC1;
u32 NFSECC;
u32 NFSBLK;
u32 NFEBLK;
};
5.      在board/samsung/tq2440/tq2440.c中增加nand读写的函数：
#define GSTATUS1        (*(volatile unsigned int *)0x560000B0)
#define BUSY            1
#define NAND_SECTOR_SIZE        512
#define NAND_BLOCK_MASK (NAND_SECTOR_SIZE – 1)
#define NAND_SECTOR_SIZE_LP     2048
#define NAND_BLOCK_MASK_LP      (NAND_SECTOR_SIZE_LP – 1)
char bLARGEBLOCK;                       //HJ_add 20090807
char b128MB;                            //HJ_add 20090807
/* 供外部调用的函数 */
void nand_init_ll(void);
int nand_read_ll(unsigned char *buf, unsigned long start_addr, int size);
int nand_read_ll_lp(unsigned char *buf, unsigned long start_addr, int size);
static void nand_reset(void);
static void wait_idle(void);
static void nand_select_chip(void);
static void nand_deselect_chip(void);
static void write_cmd(int cmd);
static void write_addr(unsigned int addr);
static void write_addr_lp(unsigned int addr);
static unsigned char read_data(void);
int NF_ReadID(void);                            //HJ_add 20090807
/* S3C2440的NAND Flash操作函数 */
/* 复位 */
static void nand_reset(void)
{
nand_select_chip();
write_cmd(0xff);  // 复位命令
wait_idle();
nand_deselect_chip();
}
/* 等待NAND Flash就绪 */
static void wait_idle(void)
{
int i;
struct s3c2440_nand * s3c2440nand = (struct s3c2440_nand *)0x4e000000;
volatile unsigned char *p = (volatile unsigned char *)&s3c2440nand->NFSTAT;
while(!(*p & BUSY))
for(i=0; iNFCONT &= ~(1NFCONT |= (1NFCMD;
*p = cmd;
}
/* 发出地址 */
static void write_addr(unsigned int addr)
{
int i;
struct s3c2440_nand * s3c2440nand = (struct s3c2440_nand *)0x4e000000;
volatile unsigned char *p = (volatile unsigned char *)&s3c2440nand->NFADDR;
*p = addr & 0xff;
for(i=0; i> 9) & 0xff;
for(i=0; i> 17) & 0xff;
for(i=0; i> 25) & 0xff;
for(i=0; iNFADDR;
int col, page;
col = addr & NAND_BLOCK_MASK_LP;
page = addr / NAND_SECTOR_SIZE_LP;
*p = col & 0xff;                        /* Column Address A0~A7 */
for(i=0; i> 8) & 0x0f;          /* Column Address A8~A11 */
for(i=0; i> 8) & 0xff;  /* Row Address A20~A27 */
for(i=0; i> 16) & 0x03; /* Row Address A28~A29 */
for(i=0; iNFDATA;
return *p;
}
/* 初始化NAND Flash */
void nand_init_ll(void)
{
struct s3c2440_nand * s3c2440nand = (struct s3c2440_nand *)0x4e000000;
#define TACLS   0
#define TWRPH0  3
#define TWRPH1  0
/* 设置时序 */
s3c2440nand->NFCONF = (TACLSNFCONT = (1NFADDR;
b128MB = 1;
n4thcycle = nBuff = 0;
nand_init_ll();
nand_select_chip();
write_cmd(0x90);        // read id command
*p=0x00 & 0xff;
for ( i = 0; i = 0xA0)
{
b128MB = 0;
}
return (pDID);
}
#endif
/* 读函数 */
int nand_read_ll(unsigned char *buf, unsigned long start_addr, int size)
{
int i, j;
char dat;
struct s3c2440_nand * s3c2440nand = (struct s3c2440_nand *)0x4e000000;
volatile unsigned char *p = (volatile unsigned char *)&s3c2440nand->NFADDR;
if ((start_addr & NAND_BLOCK_MASK) || (size & NAND_BLOCK_MASK))
{
return -1;    /* 地址或长度不对齐 */
}
/* 选中芯片 */
nand_select_chip();
for(i=start_addr; i > 9) & 0xff;
for(j=0; j> 17) & 0xff;
for(j=0; j> 25) & 0xff;
for(j=0; jNFADDR;
if ((start_addr & NAND_BLOCK_MASK_LP) || (size & NAND_BLOCK_MASK_LP))
{
return -1;    /* 地址或长度不对齐 */
}
/* 选中芯片 */
nand_select_chip();
for(i=start_addr; i > 8) & 0xff;                /* Row Address A20~A27 */
for(j=0; j> 16) & 0x03;         /* Row Address A28~A29 */
for(j=0; j
]]></content:encoded>
                <wp:post_date><![CDATA[2011-02-8 21:01:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[移植u-boot-2010.09到tq2440(三)]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="u-boot"><![CDATA[u-boot]]></category><category domain="post_tag" nicename="移植"><![CDATA[移植]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>移植u-boot-2010.09到tq2440(四)</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[六．  引导zImage
据我了解，u-boot本身是不支持直接引导zImage的，但是天嵌提供的u-boot就可以直接引导zImage，我就对源码研究了会，结合bootm命令的实现，发现原来引导zImage是如此的简单。
为了实现直接引导zImage，我添加了一个u-boot的命令boot_zImage，命令添加的方法到处都是，可以到这里看一看：http://qiang.ws/index.php?p=537。我主要说下这个命令的实现原理。
因为天嵌把nand flash分了三个区，内核映像就烧在第二个分区，第二个分区的起始地址为0x200000，所以从u-boot需要从nand flash的0x200000处读取内核文件，拷贝到SDRAM的0x30008000处，然后在地址gd->bd->bi_boot_params处设置传递给内核的参数，最后跳转到0x30008000执行，下面我贴出代码进行详细的说明：
/*
*       使用 tag list方式设置传递给内核的参数
* pram_base: base address of linux paramter
*/
static void setup_linux_param(long param_base)
{
/* start of tags */
struct tag *params = (struct tag *)param_base;
params->hdr.tag = ATAG_CORE;
params->hdr.size = tag_size (tag_core);
params->u.core.flags = 0;
params->u.core.pagesize = 0;
params->u.core.rootdev = 0;
params = tag_next (params);
/* !!! importart set SDRAM */
params->hdr.tag = ATAG_MEM;
params->hdr.size = tag_size (tag_mem32);
params->u.mem.start = PHYS_SDRAM_1;
params->u.mem.size = PHYS_SDRAM_1_SIZE;
params = tag_next (params);
/* set bootargs */
char *commandline = getenv (“bootargs”);
if (!commandline)
goto end;
params->hdr.tag = ATAG_CMDLINE;
params->hdr.size = (sizeof (struct tag_header) + strlen (commandline) + 1 + 4) >> 2;
strcpy (params->u.cmdline.cmdline, commandline);
params = tag_next (params);
end:
/* end of tags */
params->hdr.tag = ATAG_NONE;
params->hdr.size = 0;
}
/*
* 将内核映像从nand flash拷贝到SDRAM中
* dst: destination address
* src: source
* size: size to copy
* mt: type of storage device
*/
static inline int copy_kernel_img(ulong dst, const char *src, size_t size)
{
int ret = 0;
if (NF_ReadID() == 0x76) {
ret = nand_read_ll((unsigned char *)dst,
(unsigned long)src, (int)size);
} else {
ret = nand_read_ll_lp((unsigned char *)dst,
(unsigned long)src, (int)size);
}
return ret;
}
int do_boot_zImage (cmd_tbl_t *cmdtp, int flag, int argc, char *argv[])
{
int ret;
ulong from=0x200000;    //这个是内核映像在nand flash中的其实地址
ulong to=0x30008000;    //内核在SDRAM中的起始地址
size_t size=0x300000;   //拷贝内核映像的大小
/* copy kernel image */
printf(“Copy linux kernel from 0x%08lx to 0x%08lx, size = 0x%08lx … “,
from, to, size);
ret = copy_kernel_img(to, (char *)from, size);
if (ret) {
printf(“failed\n”);
return -1;
} else {
printf(“Copy Kernel to SDRAM done,”);
}
//这里进行魔数的判断，我觉得做不做无所谓，只是检查一下到底是不是zImage格式的映像而已
#define LINUX_ZIMAGE_MAGIC                      0x016f2818
if (*(ulong *)(to + 9*4) != LINUX_ZIMAGE_MAGIC) {
printf(“Warning: this binary is not compressed linux kernel image\n”);
printf(“zImage magic = 0x%08lx\n”, *(ulong *)(to + 9*4));
} else {
printf(“zImage magic = 0x%08lx\n”, *(ulong *)(to + 9*4));
;
}
printf(“NOW, Booting Linux……\n”);
/* set atag */
setup_linux_param(gd->bd->bi_boot_params);
/* run kernel */
void(*kernel)(int zero, int arch, uint params);
kernel = (void(*)(int, int, uint))(to);
//跳转到0x30008000，这个传递了三个参数，分别是0，机器码和传递给内核的参数的地址，为什么是这三个参数呢？详情自己看内核的源码arch/arm/boot/compressed/head.S
kernel(0, gd->bd->bi_arch_number,gd->bd->bi_boot_params);
return 0;
}
七．    总结
没有做移植之前移植认为bootloader很神秘，做完一遍后发现原来bootloader也很简单，并没有之前想象的那么难，希望本文档对你有所帮助，同时也希望大家给我指出不足和错误之处。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-02-8 21:03:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[移植u-boot-2010.09到tq2440(四)]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="u-boot"><![CDATA[u-boot]]></category><category domain="post_tag" nicename="移植"><![CDATA[移植]]></category><category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>3.0.0-rc1</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在2.6.39这个大版本号后，linus终于决定提高内核的词版本号了，而且这次跳跃还很大，直接上了3.0。
我也凑凑热闹，下了3.0的内核，编译了一把，果真如linus多说，使用起来确实感觉不到差异。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-2 14:28:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[3.0.0-rc1]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="kernel"><![CDATA[kernel]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>在gentoo中设置无线网卡(wpa_supplicant)</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[装好gentoo后，一直都是用的有线网卡，今天晚上捣鼓了下无线网卡的设置，成功了，在这记录一下。
因为我的无线使用wpa加密，刚好我的无线网卡在wpa_supplicant的支持列表中，所以我就毫不犹豫的选择了wpa_supplicant方案。
首先，下载安装wpa_supplicant：
emerge wpa_supplicant
然后生成一个配置文件：
bzip2 -d /usr/share/doc/wpa_supplicant-
/wpa_supplicant.conf.gz
cp /usr/share/doc/wpa_supplicant-
/wpa_supplicant.conf /etc
配置文件的修改可以参阅注释。
修改/etc/conf.d/net，添加：
modules=( “wpa_supplicant” )
config_wlan0=(“dhcp”)
最后添加网卡的开机启动：
ln -s /etc/init.d/net.lo /etc/init.d/net.wlan0
rc-update add net.wlan0 default
OK，搞定了
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-9 23:37:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[在gentoo中设置无线网卡(wpa_supplicant)]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gentoo"><![CDATA[gentoo]]></category><category domain="post_tag" nicename="无线网卡"><![CDATA[无线网卡]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>__devexit_p的功能</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[看驱动的时候，时常会有如下代码：
.remove = __devexit_p(XX_exit),
这里的__devexit_p有什么作用呢？
我在include/linux/init.h中找到了它的定义：
/* Functions marked as __devexit may be discarded at kernel link time, depending
on config options.  Newer versions of binutils detect references from
retained sections to discarded sections and flag an error.  Pointers to
__devexit functions must use __devexit_p(function_name), the wrapper will
insert either the function_name or NULL, depending on the config options.
*/
#if defined(MODULE) || defined(CONFIG_HOTPLUG)
#define __devexit_p(x) x
#else
#define __devexit_p(x) NULL
#endif
注释已经说的狠明白了吧！
]]></content:encoded>
                <wp:post_date><![CDATA[2010-07-14 19:52:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[__devexit_p的功能]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>解决kgdbwait不起作用</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[给内核选上kgdb相关配置后，在grub的引导参数后加：
kgdbwait kgdboc=ttyS0,115200
重启后，系统竟然还正常启动了，经过分析，发现有造成这种现象可能有两个原因：
1.串口驱动没配置好；
2.kgdboc后的配置有问题。
我把串口驱动配置后，就可以了。
但是问题是我用的笔记本，压根就没有串口，用usb转串口貌似也不管用，有人能帮忙吗？
]]></content:encoded>
                <wp:post_date><![CDATA[2010-05-15 09:18:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[解决kgdbwait不起作用]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="kgdb"><![CDATA[kgdb]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>周四的面试总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天周四，面试了两家公司。
一大早，公交转地铁，历经50分钟到达了面试地点，这家公司主要做无线通讯产品的。
面试我的有两个人，其中一个是个小伙子，主要由他面试我技术方面的问题，还有一个应该就是team leader了，主要问一些非技术上的问题。
问题一：关于vfs
不算难
问题二：netlink
记得在哪看过，又忘了，后来回来一查，是内核与其他进程通讯的机制，怪不得，内核源码那块，进程间通讯我一直没看。
问题三：缓冲区溢出
不难
问题四：dma
不难
问题五：ping工作在osi的哪层？
悲剧啊，悲剧啊，当时我竟然脑袋空了，只记得使用的是icmp协议，在那一层呢？
问题六：硬件中断的处理过程
这个还好，之前在研究我的开发板的时候学了一点，也差不多说出来了。
问题七，我觉得最难：怎么样算是一个很牛的软件工程师？
我主要说了两点：一是对自己的环境要很了解，从硬件到操作系统；二是要有与人协调的能力。
面试的差不多了，team leader让我做一道算法题，其实很简单的算法，因为一点点紧张，一点点对vc的生疏，一点点的烦躁，好吧，我是给自己找借口，竟然没做出来，哎，亏我还经常吹嘘自己的算法水平呢。
面试出来后，接着做地铁到江宁，到第二家公司面试，这家公司是台资，规模挺大，到面试的公司后刚刚好一点半。
哇，大公司就是不一样。前台的MM带我到了一个会议室，我等了会，一个小伙子拿来3套题给我，一套智力题，一套性格测试题，还有一套专业知识题。
智力题，我从来都不怕，很快搞定；
性格测试题，哎，做着真是痛苦啊；
专业知识题，让我很失望，基本上都是有关c的特性的，连一道深一点的算法题都没有。
题做完后，过了会，一个看着技术很犀利的家伙过来面试我了，姑且称他为A吧，事后得知如果我来这家公司的话，A就是我的直接上司。
A首先问我在现在的公司主要做什么，我都一一回答，然后就转入正题了，问了我几个关于驱动上的问题，例如lcd的原理，触摸屏的原理，还好这两个玩意我研究的稍微深一点，我们又讨论了vfs，甚至人脸识别，面试的过程很愉快，我觉得挺顺利，聊聊大约一个小时后A叫来了一个MM，原来是人事部的，和我聊待遇和其他的问题，我觉得这个公司的待遇还不错，聊的差不多了，MM说如果我满意这个待遇，就找公司副总来和我聊聊，我就称他为B吧。
B看样子挺老的，但是人很精神，一看就知道是台湾那边的，和我聊了很多，天南地北，又是一个小时。
面试结束已经快六点了，打道回府。
今天的面试总结：越是大公司，面试的时候越不问你技术性很强的东西，而是更侧重综合方面的东西。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-16 23:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[周四的面试总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="面试"><![CDATA[面试]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>周五的面试总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天又是两个面试。
早上7点半坐上了25路，快到9点时到许府巷，找了半天才找到面试公司。这家公司也是台资，前台的mm不是很热情，给我了几套试题：一套英文语法题（对你没看错），还是初中的水平做的那种，一张性格测试题，还有一套英文的专业知识题。
专业知识题比我之前面试的公司都要深的多，有两道算法题，我拿出来和大家分享分享：
1.优化下面的代码：
unsigned long sum=0;
int a[1000][10];
for( int i=0;i
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-17 15:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[周五的面试总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="面试"><![CDATA[面试]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>我的vim配置和插件</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[参考文章：
http://www.vimer.cn/2009/10/%E6%8A%8Avim%E6%89%93%E9%80%A0%E6%88%90%E4%B8%80%E4%B8%AA%E7%9C%9F%E6%AD%A3%E7%9A%
84ide2.html
依赖的程序或插件：
ctags
cscope
taglist.vim
a.vim
omnicppcomplete.vim
支持的功能有：
1.函数的跳转(ctrl+])、返回(ctrl+t);
2.快速打开同名的.h文件(:AV);
3.自动补全;
4.按F5自动make，按F6实行make clean；
5.按F3打开函数列表。
下载直接解压就好，不过我可不敢保证我的配置适合你，所以用之前最好先备份自己的配置。
http://qiang.ws/wp-content/uploads/2011/06/vim_profile.tgz_.jpg
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-23 10:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[我的vim配置和插件]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="vim"><![CDATA[vim]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>gentoo增加笔记本触摸板支持</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[支持装xorg时，没有在INPUT_DEVICE中添加synaptics，导致触摸板使用不正常，经过搜索摸索，解决了问题。
emerge -1 x11-drivers/xf86-input-synaptics
cp -r /usr/share/X11/xorg.conf.d /etc/X11
修改 /etc/X11/xorg.conf.d/10-evdev.conf ：
view plaincopy to clipboardprint?
Section “InputClass”
Identifier “evdev touchpad catchall”
MatchIsTouchpad “on”
MatchDevicePath “/dev/input/event*”
Driver “synaptics”
Option “TapButton1″ “1”
Option “TapButton2″ “2”
Option “TapButton2″ “3”
EndSection
重启。
参考资料：
http://en.gentoo-wiki.com/wiki/Synaptics_Touchpad
http://blog.csdn.net/changfengxiongfei/archive/2011/05/02/6384202.aspx
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-28 07:33:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[gentoo增加笔记本触摸板支持]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gentoo"><![CDATA[gentoo]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>gentoo与kernel-3.0-rc1的环境下emerge nss</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[因为用的3.0的内核，nss源码文件中没有Linux3.0.mk，emerge的时候出问题，最简单的一个方法，
写一个脚本：
#!/bin/bash
cp /usr/tmpportage/dev-libs/nss-3.12.9-rc1/work/nss-3.12.9/mozilla/security/coreconf/Linux2.6.mk /usr/tmpportage/dev-libs/nss-3.12.9-rc1/work/nss-3.12.9/mozilla/security/coreconf/Linux3.0.mk
在emerge中显示source prepared后，立即执行此脚本。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-28 07:37:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[gentoo与kernel-3.0-rc1的环境下emerge nss]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gentoo"><![CDATA[gentoo]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>lcd4linux增加插件</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[参考资料：http://ssl.bulix.org/projects/lcd4linux/wiki/plugin_howto
实例说明：
目标：写一个插件，功能为在lcd上显示字符串
使用的版本为lcd4linux-0.11.0-SVN
步骤：
1.
cp plugin_sample.c plugin_myecho.c
2.修改plugin.c 增加相关选项：
53行增加 “myecho”,
171行增加int plugin_init_myecho(void);
172行增加void plugin_exit_myecho(void);
267行增加 plugin_init_myecho();
483行增加plugin_exit_myecho();
3.修改makefile.in，增加相关选项；
71行后增加 plugin_myecho.$(OBJEXT)
253行增加 plugin_myecho.c
545行增加 @AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/plugin_myecho.Po@am__quote@
4.修改plugins.m4，如果在plugin.c中如果没有使用宏开关，这个文件可不修改。
5.修改/etc/lcd4linux.conf。
附件：
1.      plugin_myecho.c:
/* define the include files you need */
#include “config.h”
#include
#include
#include
/* these should always be included */
#include “debug.h”
#include “plugin.h”
#ifdef WITH_DMALLOC
#include
#endif
static void my_myecho(RESULT * result, RESULT * arg1)
{
char *val = R2S(arg1);
SetResult(&result, R_STRING, val);
}
/* plugin initialization */
/* MUST NOT be declared ‘static’! */
int plugin_init_myecho(void)
{
AddFunction(“myecho”, 1, my_myecho);
return 0;
}
void plugin_exit_myecho(void)
{
return;
}
2.      lcd4linux.conf
Display LCD2USB {
Driver   ‘LCD2USB’
Port     ‘libusb’
Size     ’16×2′
}
Widget ECHO1 {
class  ‘Text’
expression  myecho(‘hackqiang’)
width  16
align  ‘L’
update tick
}
Layout Default {
Row1 {
Col1 ‘ECHO1′
}
}
Variables {
tick 50
}
Display ‘LCD2USB’
Layout  ‘Default’
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-30 10:44:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[lcd4linux增加插件]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="lcd4linux"><![CDATA[lcd4linux]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>检查linux系统用户密码</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[网上没找到什么资料，最后还是看login源码找到的方法。
/*
* 密码加密
*
* 编译： cc pwd.c -lcrypt
* usage:
* ./a.out passwd
*
*
*/
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <pwd.h>
#include <shadow.h>
#define SHADOW_PWD
int
checkpasswd
(
const
char
*
username
,
const
char
*
passwd
)
{
struct
passwd
*
pwd
=
NULL
;
char
*
salt
=
NULL
;
if
(
(
pwd
=
getpwnam
(
username
)
)
)
{
# ifdef SHADOW_PWD
struct
spwd
*
sp
;
if
(
(
sp
=
getspnam
(
username
)
)
)
pwd
-&
gt
;
pw_passwd
=
sp
-&
gt
;
sp_pwdp
;
# endif
salt
=
pwd
-&
gt
;
pw_passwd
;
}
else
salt
=
"xx"
;
//printf("read from /etc/shadow passwd:\t%s\n",pwd-&gt;pw_passwd);
//printf("crypted from %s passwd:\t%s\n",passwd,crypt(passwd, salt));
if
(
!
strncmp
(
crypt
(
passwd
,
salt
)
,
pwd
-&
gt
;
pw_passwd
,
strlen
(
pwd
-&
gt
;
pw_passwd
)
)
)
{
return
0
;
}
return
-
1
;
}
int
main
(
int
argc
,
char
**
argv
)
{
int
ret
=
checkpasswd
(
argv
[
1
]
,
argv
[
2
]
)
;
if
(
!
ret
)
printf
(
"success
\n
"
)
;
else
printf
(
"wrong passwd
\n
"
)
;
return
0
;
}
]]></content:encoded>
                <wp:post_date><![CDATA[2011-06-30 17:26:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[检查linux系统用户密码]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="C/C++"><![CDATA[C/C++]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>chrome插件：discuz论坛隐藏贴自动回复</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这个插件CU上已经有牛人写好了，但是我用了发现效果不太好，就自己修改了一下。
本想上传到google的网站上，结果发现还需要5$，算了，我就传到自己的blog上，以后要用就下载安装吧。
download autoreplay.crx
]]></content:encoded>
                <wp:post_date><![CDATA[2011-07-7 14:38:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[chrome插件：discuz论坛隐藏贴自动回复]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="chrome"><![CDATA[chrome]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>2>1</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[echo $BADTHING > /dev/null 2>&1
]]></content:encoded>
                <wp:post_date><![CDATA[2011-07-21 16:54:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[2>&1]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="命令技巧"><![CDATA[命令技巧]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>gedit的插件class browser不能显示</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[换来新电脑，装了新系统后发现gedit的class browser插件不能显示了。
用vim装上ctags后，竟然能用了。
估计class browser是用ctags实现的。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-07-29 10:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[gedit的插件class browser不能显示]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="gedit"><![CDATA[gedit]]></category><category domain="post_tag" nicename="vim"><![CDATA[vim]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>linux开机logo居中显示</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[参考：
http://2836917.blog.51cto.com/2826917/511555
1.修改drivers/video/fbmen.c
?
View Code
C
471
472
473
474
// image.dx = 0;
// image.dy = y;
image.
dx
=
(
info
-&
gt
;
var.
xres
/
2
)
-
(
logo
-&
gt
;
width
/
2
)
;
image.
dy
=
(
info
-&
gt
;
var.
yres
/
2
)
-
(
logo
-&
gt
;
height
/
2
)
;
2.修改drivers/video/console/fbcon.c
增加
?
View Code
C
583
logo_height
+=
(
info
-&
gt
;
var.
yres
/
2
)
-
(
logo
-&
gt
;
height
/
2
)
;
OK
]]></content:encoded>
                <wp:post_date><![CDATA[2011-08-2 13:04:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[linux开机logo居中显示]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>难得一聚</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[人生苦短，难得一聚。
玩了一个星期，转遍了南京，没有一个晚上早睡，没有一个早上晚起，虽然很累，但是很快乐。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-08-13 22:30:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[难得一聚]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>build ubuntu kernel</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[frake make-kpkg –initrd kernel_image
]]></content:encoded>
                <wp:post_date><![CDATA[2011-09-7 00:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[build ubuntu kernel]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Ubuntu"><![CDATA[Ubuntu]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>凌晨一点，被厕所女神感动的一塌糊涂</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[以前朋友给我推荐电影，我极少有看完的，这次无意看了部，不仅看完了，还被感动的不行。不得不承认，鬼子的电影，还是很不错的。
前天在女友电脑上随便down了部电影放手机上，打算在公交上打发时间，就是《厕所女神》。刚刚看完，感触很深，我外婆前段时间刚刚去世，我没能见上她最后一面，我小学之前一直是和外婆住一起的，所以和外婆的感情很深，外婆那慈祥的面孔一直深深的扎在我心里，外婆您一路走好。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-09-7 00:40:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[凌晨一点，被厕所女神感动的一塌糊涂]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>最近</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近换了新工作，做linux的驱动，也是我的兴趣所在，但是因为经验少的可怜，工作并部轻松。
刚刚进公司的时间，接到的第一个任务是修改显卡驱动，支持读取显示器的edid信息。
然后是优化dm9000的时序。
现在在做开机速度的优化。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-09-7 00:47:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[最近]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>公交趣事</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[八点二十，17路上，等红灯。
隔壁173上一小姑娘一直隔着玻璃盯着我笑，于是我也盯着她笑。然后我觉得这个红灯是我印象中最长的。红灯完了，十七路的加速度比较大，我赶紧向她摆摆手，她看到了也向我摆摆手，呵呵，真是可爱的小姑娘，再见啦。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-09-9 08:56:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[公交趣事]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>搬家咯</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[离公司近点，离学校近点，以后就可以起迟点，吃好点了。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-09-22 22:45:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[搬家咯]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>交叉编译iperf</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[for s3c2440:
1. export ac_cv_func_malloc_0_nonnull=yes
2. ./configure –build=i686-linux –host=arm-none-linux-gnueabi –target=arm-none-linux-gnueabi
3. 修改src/Makefile: CXXFLAGS,CPPFLAGS,CFLAGS后的 “=” 换成 “+=”
4. make CXXFLAGS=-march=armv4t CPPFLAGS=-march=armv4t CFLAGS=-march=armvt
for dm3730:
just
1. export ac_cv_func_malloc_0_nonnull=yes
2. ./configure –build=i686-linux –host=arm-none-linux-gnueabi –target=arm-none-linux-gnueabi
]]></content:encoded>
                <wp:post_date><![CDATA[2011-09-30 14:10:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[交叉编译iperf]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>递归删除.svn</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[?
View Code
BASH
1
find
.
-name
'.svn'
|
grep
'.svn$'
|
sed
-e
's/^/rm -rf /g'
|
/
bin
/
sh
]]></content:encoded>
                <wp:post_date><![CDATA[2011-10-12 14:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[递归删除.svn]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="命令技巧"><![CDATA[命令技巧]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>卸掉gread，装上腾X订阅</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前一直用google reader，无奈老抽风，今天试了下腾讯订阅，果断删掉了google reader。
后来发现腾讯订阅不能保存订阅，无奈换回greader。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-10-14 12:22:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[卸掉gread，装上腾X订阅]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="手机"><![CDATA[手机]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>解决”ssh -T git@github.com”时出现的错误</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在执行ssh -T git@github.com后，出现：
Agent admitted failure to sign using the key.
Permission denied (publickey).
只需要
$ ssh-keygen -t rsa -C “your_email@youremail.com”
原文：
http://unixway.info/linux/agent-admitted-failure-to-sign-using-the-key-permission-denied-publickey/
]]></content:encoded>
                <wp:post_date><![CDATA[2011-10-24 10:51:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[解决”ssh -T git@github.com”时出现的错误]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="github"><![CDATA[github]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>凌晨两点，无法入眠</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[心烦的时间总是和年龄成正比。
不知道怎么回事，突然就想听听王心凌的第一次爱的人，打开虾米，当那很熟悉的旋律钻近我的耳朵时，我一下就被拉到了高一。
那时我刚刚离开家，在学校住宿很不习惯。我和家里最多的联系就是我和弟弟一起玩那个叫冒险岛的游戏，我还清楚的记得我的角色名叫冒险不忘家，每次下线的时侯，总有一种说不出的惆怅之情，那个游戏成了我心中对家的寄托，恰巧那时我迷上了王心凌，所以玩游戏的时间我基本上都在听她的歌，现在距离高一已经八年了，当我认为自己已经习惯这种漂泊在外的生活时，这首歌又勾起了我心中那种浓浓的惆怅之情。
今天，想到了很多，身边的一些变化本是意料之中的，却又是这般的让我措手不及，突然才意识到，我还没有做好接受这一些变化的准备。小时候的玩伴离我越来越远，与家人一年也难得能聚几天，这样的生活真的是自己想要的吗，当我在对别人的生活侃侃而谈的时候，却没有想过自己。
长时间不写东西，发现自己越发的意识流了。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-10-27 02:36:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[凌晨两点，无法入眠]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>无题</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[使用豆瓣电台作为闹铃。
早上被班得瑞的微笑吵醒了。
n久没听了，它突然让我想到了cw。
那年我们高一，
“喂，没有好听的歌，借我听听。”
“我平时不听歌的，家里倒是有一张班得瑞的专辑。”
那时我第一次听说班得瑞，从此便爱上了那天籁之音，可能是爱屋及乌吧，我已经说不清了。
真的会有一首歌，让你想到一个人。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-10-27 09:52:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[无题]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>双屏输出果真很爽</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[自从我的台式机挂掉后，一直用的笔记本，今天试了试双屏输出，很方便，很爽（一边上网，一边看电影，互不干扰，哈哈）。
现在是在win7下体验的，过会在ubuntu上试试效果。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-11-20 12:14:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[双屏输出果真很爽]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="win7"><![CDATA[win7]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>由“中科院以六千单价购买128MB打印机内存条”所想</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天早上惯例打开google reader(翻墙，否则链接很慢)，看到了一则有关中科院的新闻，地址：
http://hardware.solidot.org/article.pl?sid=11/11/30/1130257&amp;from=rss
。
其实天朝的高校和一些研究机构中的黑暗我是有耳闻的–“老板”一方面申请国家经费（据说大部分钱未用到正道上），另一方面“老板”在校外利用手下的学生接项目，我几个在读的研究生同学如是说。但是我真没想到一个这次中科院会做的如此嚣张，当然这个数目和天朝烂在老美手中的钱不是一个数量级的，但是作为一个科研机构。。。
我时常会想，我们大部分底层的百姓，辛苦创造出来的物质财富，都被那些所谓的高层给剥夺和浪费了，再联系到天朝种种社会现象，让我质疑在历史课本中看到的那个强大的“九州”是否真的存在。
如此这般，天朝人民必将处于水深火热之中，也许已经是开始了–温水煮蛙。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-1 09:42:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[由“中科院以六千单价购买128MB打印机内存条”所想]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="碎碎念"><![CDATA[碎碎念]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>kernel中添加logo</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[简单记一下，免得以后翻。
1. 做好224色的ppm文件logo_mylogo_clut224.ppm，放到drivers/video/logo下
2. 在include/linux/linux_logo.h中添加
?
View Code
C
1
extern
const
struct
linux_logo logo_mylogo_clut224
;
3. 在drivers/video/logo/Makefile中添加
?
View Code
C
1
obj
-
$
(
CONFIG_LOGO_MYLOGO_CLUT224
)
+=
logo_mylogo_clut224.
o
4. 修改drivers/video/logo/Kconfig
?
View Code
C
1
2
3
4
config LOGO_MYLOGO_CLUT224
bool
"224-color logo"
depends on LOGO
default
y
5. 修改drivers/video/logo/logo.c
?
View Code
C
1
2
3
4
#ifdef CONFIG_LOGO_MYLOGO_CLUT224
/* M32R Linux logo */
logo
=
&
amp
;
logo_mylogo_clut224
;
#endif
至于logo的居中显示，可以参考
http://qiang.ws/?p=613
]]></content:encoded>
                <wp:post_date><![CDATA[2011-08-1 12:33:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[kernel中添加logo]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="logo"><![CDATA[logo]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>tps65930上音频部分驱动的若干问题</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这段时间主要修改了声卡驱动方面的问题，在这记录下。
tps65930就不多说了，以后有机会专门的介绍一下这个芯片。
1.使用arecord -f cd 录音的文件，放出来的是单声道。
因为是双声道录音，但是硬件上只接了一个mic在MIC_MAIN上，所以需要修改通过设置寄存器RX_PATH_SEL来改变输入的path，
根据datasheet（代号swcu050g，777页）的描述，修改这个寄存器的值为0x35就能解决这个问题。
待讨论。
2.混音。
只需要修改/etc/asound.conf：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
pcm.
dmixer
{
type dmix

ipc_key
1024
slave
{
pcm
"hw:0,0"
period_time
0
period_size
1024
buffer_size
4096
rate
48000
periods
518
}
bindings
{
0
0
1
1
}
}
pcm.
asymed
{
type asym

playback.
pcm
"dmix"
capture.
pcm
"dsnoop"
}
pcm.
!
default
{
type plug

slave.
pcm
"asymed"
}
可以参考：
http://blog.csdn.net/hansoft/article/details/1475245
http://www.alsa-project.org/main/index.php/Asoundrc
http://alsa.opensrc.org/.asoundrc
待续。。。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-14 16:54:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[tps65930上音频部分驱动的若干问题]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="alsa"><![CDATA[alsa]]></category><category domain="post_tag" nicename="tps65930"><![CDATA[tps65930]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>android看本机IP</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[在手机上装了一个超级终端，结果运行ifconfig看看IP却没有输出，原来是要用：
?
View Code
BASH
1
getprop
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-14 21:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[android看本机IP]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="android"><![CDATA[android]]></category><category domain="post_tag" nicename="ip"><![CDATA[ip]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>杂感</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[ps：这篇文章是我今天（2011-12-19）中午看自己的qq空间找到的，记下，回忆一下2006年的我：
好久没静下心来想想自己的感受了.
来这有2个月了吧,感觉由刚开始的沉闷变成现在的愉快.
刚刚来的时候整天都很无聊,现在不同了,我找到了自己的生活,我开始变的充实起来.
我似乎找到了自己真正喜欢的女孩,但我不敢肯定,我连自己在想什么都不清楚,别人说我很花心,我无力否认,但我相信一旦我找到了自己爱的人,我将会彻底改变–给人的承诺就一定要实现.
我想改掉自己身上的坏毛病,我不想再一副痞子的德行,不想再吊儿郎当,不想再给别人没有安全感的样子.
痞习惯了…
痞习惯了…
难道真的是这样?
]]></content:encoded>
                <wp:post_date><![CDATA[2006-10-19 12:17:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[杂感]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>追光少年（上）</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[ps：这是我高三时的一些记忆。
新华社报道 今天凌晨在310国道发生一起重大交通事故，造成2辆桑塔纳2000追尾飞出道路，一辆大奔报销，但无人身亡。
事后经查造成这一重大事故的罪魁祸首竟是一学生，在记者几天的明查暗访后得知，肇事者系江苏省某中学高三学生，几翻周折后记者找到了当事人俞某，俞某非常郁闷的交代了事情的经过。原来是俞某在看完电影《无极》后十分羡慕昆仑的速度，在研究完爱因斯坦的《相对论》后便萌发了超越光速的想法，企图回到过去。于是每天到310国道练起了跑步，但在今天俞某的速度达到299999999米每秒时对面来了一辆大奔，结果就造成了这起交通事故。
为了杜绝此类事件的再次发生，交管部门根据有关法律给以俞某5天监禁，20元罚款的处分 ，并且禁止俞某在5年之内踏上310国道。
但事情并未结束，国家宣传部又对电影《无极》进行了调查，结果发现此电影中含有大量色情片断，于是对其导演陈凯歌处以10天监禁，50元罚款的措施。
国际诺贝尔物理学奖研究委员会全体人员在看完电影《无极》后授予演员昆仑“2006年诺贝尔物理学奖”，因为他成功的证明了爱因斯坦《相对论》的正确性。
一场车祸引起了这么多的事件，真是令人叹为观止！
追光少年（下）中记者将会继续采访俞某，将会系统的说明俞某为何会如此渴望回到过去。
敬请关注。
]]></content:encoded>
                <wp:post_date><![CDATA[2005-12-19 12:22:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[追光少年（上）]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>密码保护：最近，我迷失了。</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[这是一篇受密码保护的文章，您需要提供访问密码：
密码：
]]></content:encoded>
                <wp:post_date><![CDATA[2010-09-10 12:28:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[密码保护：最近，我迷失了。]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>那个女孩有点冷(一)</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[高考终于结束。
我在没有任何准备的情况下被湖北一所学校录取了。
在老爸的陪同下来到了学校报道，开始了我的大学生活。
报名是个很复杂烦琐让人疲惫不堪的过程，我用了一整天时间才搞定。第二天送走老爸后，我一个人走在陌生的街上，看到了一个理发店，我立即头脑发热，进去把头发染成了红色，出来后又打了个耳洞–其实我已经蓄谋已久了。
接下来军训开始了。
高中的军训我就没参加，有点后悔了，毕竟比别人少了一段记忆–虽然这记忆不是甜的。所以我打算参加这次军训。
我们物理系1班和2班组成了一个集体–九连。我们有两个教官，不多说他们了。
我们一起训练了大半个月就开始准备阅兵了，于是教官开始发狂的监督我们走正步，齐步。我快受不了了撒，这时教官说要抽人去军体拳方列打拳，开始是自己要求自愿参加的，但是到了最后教官要那些正步走不好的去，于是乎我们教官就开始一排排的挑人，因为我铁了心要到军体拳方列，所以我在教官说了”向左看齐”时我把头扭向了右边，如此几个回合后我很是”光荣”的第一的成了军体拳方列的成员。虽然教官后来知道我是故意的时候很生气的对我说了句”没上进心”,可我还是觉得不以为然.。
到了军体拳方列是比九连轻松了不少,整天和体育系的那帮猛男在后山上聊天，日子就这样一天天的溜了。
突然有一天我们系要一起上军事理论课，所以我就回到了九连和原来的战友（就是同学嘛）一起去上课。
我们走在去上课的路上是我发现了一个奇怪的女孩(注意注意,女主人公上场啦!)–你无法在她的脸上找到任何表情，那种感觉，好象是看到了一座冰山。我当时就被那种”气质”吸引了。
我开始留心这个女孩，到了我们上课的地方，其实那就是一个足球场，场地上光滑的就象秃子的头顶，当然也象溜冰场，不同的是场地上还覆盖了一层黄土，在我们刚刚踏上足球场的一瞬间立刻尘土飞扬，那景观，你要说它不壮观我要跟你急的！再看我们，一个个蒙着脸，艰难的走着。那时我的我在想打仗要是就来这是不是可以节约掉烟雾弹的钱?­
此刻我又看到了那座冰山，在别人怨声载道时她还是那么面无表情，她是人么？我在心里开始嘀咕了。
晚上我回到寝室就打听到了那个女孩的名字–灵，先这么叫吧。
第二天的早上我找到了我姐(我学姐，是军训的那天认识的，她负责教我们校歌，我们关系很不错)，问我姐要了灵的号码，姐告诉我后后意味深长的对我说“她很冷的，你别怪我没警告你，碰了钉子我可不管”“没事，我会把这座冰山一点一点化掉的”我脱口而出。
我马上发了第一条短信给灵“喂，你是不是XX旁边的叫灵的呀？”
到了晚上她回了一条和她本人一样冷的短信“抱歉手机没带在身上，你找我有事吗？是不是要我帮你替XX传话呀？对了，你还是先说说你是谁吧，如果你不介意的话。”­
我立刻回了一条“你怎么那么冷呀，说话直来直去的。你知道你们班上叫强的么？”­
好久她回才回“我这人就这样，不好意思不认识。”
我碰了一鼻子灰，只得说“没事，预料之中的，郁闷，你怎么对我那么冷呀”­
她依旧很冷的说“你到底有没有事，我可要睡了”
她越是冷，我越是感兴趣。对任何事都感兴趣，是我最大的缺点和优点。
之后的几天就这么着无心的和她聊着，有一天她问我是怎么知道她手机号的，我当然不能说是我姐告诉我的，所以我说”乱拨的号，没想到是你”。她当然不信“以前也有人这么对我这么说，你们男生怎么都这样，没一个值得信赖的。”
我突然紧张了起来，是人都能看的出她的这句话包含了很多含义，她很有可能是被人伤害过会所以对人这么冷。
我立马回“你是不是被伤害过呀？人可以回忆过去，但不能活在过去，你明白?”
没想到她这次回的挺快“你才被伤害过呢，不要改的自己怎么都知道似的，晚安”
我知道她说过晚安后就不会再回了，于是我便没再发短信。
(未完待续)
]]></content:encoded>
                <wp:post_date><![CDATA[2006-10-19 12:33:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[那个女孩有点冷(一)]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>让uboot按下指定键停止autoboot</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[默认uboot是按下任意键停止autoboot，有人觉得不爽，害怕终端操作用户误操作，要指定特殊按键
这个功能很简单，例如要按下ESC键，停止自动boot
只需要添加
?
View Code
C
1
2
3
4
5
6
7
#define CONFIG_AUTOBOOT_KEYED 1
#define CONFIG_AUTOBOOT_PROMPT "Press ESC to abort autoboot in %d seconds"
#define CONFIG_AUTOBOOT_DELAY_STR "linux"
#define CONFIG_AUTOBOOT_STOP_STR "\x1b"
即可，0x1B就是ESC的ascii码。
来源：
http://blog.chinaunix.net/space.php?uid=13889805&do=blog&id=1641961
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-19 23:05:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[让uboot按下指定键停止autoboot]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="u-boot"><![CDATA[u-boot]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category></item>

        <item>
                <title>dsplink的一些总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[之前一直用的dspbridge，因为一些原因，需要换成dsplink.
1. 编译dsplink最好的方法是下载dvsdk，配置好后（内核路径一定要配置好）直接make dsplink就行了。
2. 如果要用kgdb调试dsplinkk.ko，必须要在配置编译kernel后再次编译dsplink，否则insmod时会出问题。
3. 注意于alsa-oss库的冲突，看
这里
。
以后再更新。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-22 15:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[dsplink的一些总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="dsp"><![CDATA[dsp]]></category><category domain="post_tag" nicename="dsplink"><![CDATA[dsplink]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category></item>

        <item>
                <title>kgdb调试内核模块</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[kgdb的详细用法就不多说了，只说说怎么调试内核模块，因为内核模块的符号地址信息并没有包含在vmlinux里，所以需要载入模块的信息：
gdb加载内核模块的命令为：
?
View Code
BASH
1
add-symbol-file FILE ADDR
找到ADDR最直接的方法就是：在插入模块之前，在kernel/module.c中设置一个断点，因为函数module_alloc_update_bounds返回的是模块的地址：
?
View Code
C
1
2097
ptr
=
module_alloc_update_bounds
(
mod
-&
gt
;
core_size
)
;
所以：
?
View Code
BASH
1
gdb
&
gt; b kernel
/
module.c:
2097
这样你就可以看到模块的地址了，后面就好办了，你可以在模块里的任意函数设断点了。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-22 15:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[kgdb调试内核模块]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="kgdb"><![CDATA[kgdb]]></category><category domain="post_tag" nicename="内核模块"><![CDATA[内核模块]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>kgdb的一些经验总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[1. initab
tty1::respawn:/sbin/getty -L 115200 tty1
2. 调试模块，
这里
。
随时更新。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-10-22 15:35:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[kgdb的一些经验总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="kgdb"><![CDATA[kgdb]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>/dev/dsplink一个及其诡异的问题</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[编译完，dsplink的相关模块加载都没有问题，但是当我运行dsp的测试程序的时候却出错了：
?
View Code
BASH
1
can
't open '
/
dev
/
dsplink
': No such file or directory
奇怪了，文件是存在的阿，再用cat，发现也是同样的错误，最后用重定向输入，这次倒是没有提示文件不存在的错误了。
怪，怪，真怪，我的第一反应是文件权限错了，我又仔细的看了一下文件属性，看样子没问题：
?
View Code
BASH
1
crw-------
1
root root
230
,
0
Dec
21
21
:
41
/
dev
/
dsplink
于是我又在一个相对纯净的rootfs（没有装很多的软件）上试了一次，发现一切正常，所以我有了如下推断：
1.内核应该不是问题，两次试验用的一个内核；
2.VFS那层是不是出了点问题；
3.是不是某个程序的影响，例如udev；
经过一段时间的排除，觉得是VFS出了点问题，开始debug kernel，在do_sys_open上下了断点，运行
?
View Code
BASH
1
cat
/
dev
/
dsplink
后，发现现象很怪异：打开了许多alsa的库文件（其实这里得到的结果没必要debug kernel，直接strace就好），这不应该阿，完全没有链接这些库嘛。
我突然想到，oss用的设备名不就是/dev/dspX吗，难道和这个有关系？
于是我直接运行
?
View Code
BASH
1
cat
/
dev
/
dsp
发现问题了，这个设备节点压根就不存在，却没出错，再试：
?
View Code
BASH
1
cat
/
dev
/
dspxxx
同样的没出错，这让我想到了adore的一个功能：通过插入一个内核模块，劫持vfs里的系统调用，实现了文件的隐藏，当然，这里的设备节点文件肯定不是被隐藏了。同理也可以实现文件的重定向访问，但是，我们自己的文件系统，自己的kernel，肯定没做过这些，这样分析看来，最大的疑点就落到了alsa上，再仔细一想，/dev/dsp是oss的东西，基本已经被抛弃，估计是对/dev/dsp[xxx]的访问都被重定向到/dev/snd上了，那么，又是谁做了这个重定向的工作呢？
问了下同事，原来是alsa-oss，那alsa-oss又是怎么做到的呢？
前面罗嗦了那么多，今天的主角来了–LD_PRELOAD，关于它，我也不想多说什么了，都老生常谈了，推荐一篇
好文章
。
再看看alsa-oss的源码alsa/alsa-oss.c，确实是这么回事：
?
View Code
C
1
125
if
(
strncmp
(
pathname
,
"/dev/dsp"
,
8
)
==
0
)
return
1
;
把这个地方改掉，还有alsa/pcm.c也有个类似的地方，应该就没什么问题了。
真是一个让人纠结的问题阿。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-22 16:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[/dev/dsplink一个及其诡异的问题]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="alsa"><![CDATA[alsa]]></category><category domain="post_tag" nicename="dsplink"><![CDATA[dsplink]]></category><category domain="post_tag" nicename="oss"><![CDATA[oss]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>三个问题–来自酷壳</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天看了陈皓的一篇文章，对里面的三个问题很有感触：
1）每天早上醒过来的时候，我会为什么感到兴奋？是什么在驱动着我去开始新的一天？
2）现在的经历有没有让我有这种兴奋的感觉？这种让我充满力量和期待的感觉？
3）有没有浮燥，有没有得到认可？身边的人的认可？但更重要的是自己是否对自己认可？
原文链接：
http://coolshell.cn/articles/6142.html#more-6142
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-22 16:57:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[三个问题–来自酷壳]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>准备做Nexus S的bootloader</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[入手NS已经半年了，当初买这个手机主要是为了玩android，因为这个手机好刷，相对其他手机比较开放。
经历了一段时间的刷机后，觉得刷android已经没什么意思了，就开始研究起bootloader和recovery。
recovery没什么好说的，就像一个小系统，有意思的是bootloader，因为没有提供源码，竟然没有源码！
稍微看了下android源码目录里的bootable/bootloader/legacy，
觉得NS的bootloader应该是基于它修改了
，于是萌生了自己移植一个bootloader的想法。
最近先收集点资料，预计元旦开工。
12/29更新：昨天晚上仔细看了下bootable/bootloader/legacy，发现以前的推断有错，NS的bootloader不太可能基于他修改，因为他P都没有，没有一点有用的东西，还是走老路子，从u-boot移植吧，但是手机的bootloader还是和开发板不太一样的，毕竟涉及到一些加密的东西，所以可能会比较难，不过我还是要尝试尝试。
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-27 12:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[准备做Nexus S的bootloader]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="bootloader"><![CDATA[bootloader]]></category><category domain="post_tag" nicename="Nexus s"><![CDATA[Nexus s]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>Nexus S hack–串口输出</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[Nexus S有一个串口隐藏在micro USB接口里，需要做一根线，具体做法参见
http://trac.osuosl.org/trac/replicant/wiki/NexusSBootloader
。
注意：原文中的RX和TX接反了！
贴两张我做的图：
]]></content:encoded>
                <wp:post_date><![CDATA[2011-12-30 14:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Nexus S hack–串口输出]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="Nexus s"><![CDATA[Nexus s]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>推荐一首歌-Little Baby Pines</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[Little Baby Pines
]]></content:encoded>
                <wp:post_date><![CDATA[2012-01-6 09:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[推荐一首歌-Little Baby Pines]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="歌曲"><![CDATA[歌曲]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>Nexus S(9023)的芯片资料</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[I had made a decision to port u-boot for GT-I9023 few days ago, so I collected some chips info in this phone:
?
View Code
BASH
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
CPU: Samsung S5PC110A01

Baseband processor: Infineon
8824
XG616 X-Gold

Tx Front-End: Skyworks SKY77529

LCD: SONY NT35580

Touchscreen: Atmel MXT224

PMIC: Maxim Semiconductor MAX8998
/
National LP3974 PMIC ?

Audio: Woifson Microelectronics WM8994

MCP: Samsung KB100D00WM-A453
(
include 3Gb Mobile DDR, 1Gb OneDRAM and 8Gb OneNAND
)
NAND: SanDisk SDIN4C2

BT
/
Wifi: Broadcom BCM4329GKUBG

NFC: NXP PN544

USB Switch: FSA9480

Touch keypad: Cypress ?

Compass: AK8973 ?

acceleration sensor: KR3DM ?

Gyro sensor: STMicroelectronics K3G

Ambient light and proximity: GP2A ?
Maybe there are something wrong in the list, please correct me.
ref:
1. Nexus S Teardown http://www.ifixit.com/Teardown/Nexus-S-Teardown/4365/1
2. Kernel configure from https://android.googlesource.com/kernel/samsung.git
]]></content:encoded>
                <wp:post_date><![CDATA[2012-01-6 22:16:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Nexus S(9023)的芯片资料]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="chips"><![CDATA[chips]]></category><category domain="post_tag" nicename="Nexus s"><![CDATA[Nexus s]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>github上与其他分支合并</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[最近在github上新建了一个nexus s内核的项目，基于官方的源码，打算没事的时候改改内核给我的手机用，为了能保持我的代码与官方的代码的同步，做了一些设置：
首先，增加一个remote：
?
View Code
BASH
1
git
remote add samsung https:
//
android.googlesource.com
/
kernel
/
samsung.git
然后，取得samsung：
?
View Code
BASH
1
git
fetch samsung
看看本地branch：
?
View Code
BASH
1
2
3
4
5
6
7
8
9
10
11
12
13
git
branch
-a
*
master

remotes
/
origin
/
HEAD -
&
gt; origin
/
master

remotes
/
origin
/
master

remotes
/
samsung
/
android-samsung-2.6.35-gingerbread

remotes
/
samsung
/
android-samsung-
3.0
-ics-mr1

remotes
/
samsung
/
master
最后，在本地建立一个分支：
?
View Code
BASH
1
git
branch android-samsung-
3.0
-ics-mr1 samsung
/
android-samsung-
3.0
-ics-mr1
这样，在本地就有一个android-samsung-3.0-ics-mr1的分支，这样就可以与我自己的master分支merge了:
?
View Code
BASH
1
git
merge samsung
/
android-samsung-
3.0
-ics-mr1
参考资料：
1. http://stackoverflow.com/questions/1123344/merging-between-forks-in-github
2. http://ken-blog.krugler.org/2009/04/14/merging-in-a-github-fork/
]]></content:encoded>
                <wp:post_date><![CDATA[2011-10-6 22:16:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[github上与其他分支合并]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="git"><![CDATA[git]]></category><category domain="post_tag" nicename="gtihub"><![CDATA[gtihub]]></category><category domain="post_tag" nicename="kernel"><![CDATA[kernel]]></category><category domain="post_tag" nicename="Nexus s"><![CDATA[Nexus s]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="手机"><![CDATA[手机]]></category></item>

        <item>
                <title>ARM的BIN文件反编译方法</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[来自
http://spring-studio.net/?p=200
?
View Code
BASH
1
arm-linux-objdump
-D
-b
binary
-m
arm xxx.bin
&
gt; xxx.asm
]]></content:encoded>
                <wp:post_date><![CDATA[2012-01-7 15:47:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[ARM的BIN文件反编译方法]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="arm"><![CDATA[arm]]></category><category domain="post_tag" nicename="objdump"><![CDATA[objdump]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category></item>

        <item>
                <title>2011年终总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前言
现在凌晨一点了，经常在大半夜变的敏感起来，会想很多人和事。扯的有点远了，进入正题。
回首
转眼间2011过去了，这是我工作后的第二个年终总结了，刚刚看了看去年的总结，很有感触，觉得一年前的自己有点陌生了–可能是自己工作和生活的变化比较大吧。
10年过完春节回到南京的时候，我开始思考我的工作，觉得我该做点什么来继续我的职业规划了，我的目标并不是在linux下写应用程序，而是内核与驱动开发，因为我对硬件的操控更感兴趣。我开始看书充电，目标是linux驱动开发。五月，扬州三日游回来后，我决定离开当时的公司，这是一个key point。虽然当时的我，深受termleader的赏识，能得到的锻炼机会也是非常难得，但是这些都没有让我动摇。我将我的想法与termleader交流，虽然他也不希望我离开，但最后还是无奈的支持了我，并和我进行了许多次语重心长的谈话，现在回想起来，我真是要好好的感谢他。五月之后，我开始准备交接工作–整理代码，完善文档等等，离开的日期也确定了–七月初。
七月之前陆续的拿到了几个offer，最终选择了现在的公司，在徐庄软件园。在公司做的第一个项目，一直持续到今年年初，我负责驱动和bootloader ，硬件平台是ti的dm3730，软件平台为linux2.6.32 。因为以前没有真正写过驱动，开始的时候还是比较吃力的，但是在同事（带我的）指导和自己的努力下，一段时间后，我开始感觉自己上手了，工作起来也有点如鱼得水的感觉。这个项目期间修改移植的芯片驱动有: dss，DM9000，电源管理芯片tps65930（包括了rtc，sound，usb otg），usbhub，dsp。bootloader主要是x-loader和u-boot。这个项目给我的经验是非常巨大的，让我对内核的驱动的认识上升了好几个档次，最重要的是对嵌入式硬件和软件的结构有了一定的认识。
七月换工作的同时，我给自己换了部手机–Nexus S，本不想买棒子的东西的，但是无奈Google选择了Samsumg，我也就硬着头皮买了。当然我买这个手机不是为了赶时髦，因为这个手机相对其他手机开放性好点，而且这个手机中的cpu–s5pc110我也是比较感兴趣的，买这个手机的初衷是想学习了解android，完全因为兴趣，暂时没有做那方面的意识，定制kernel，ROM，忙的我不亦乐乎，年底的时候开始了一个为Nexus S写开源bootloader的项目，目前还在进行中。
七月中旬，几个大学同学都约好来南京聚一聚，那一个星期，大家同吃同睡，玩的相当尽兴。送走同学们后，灵儿带着我的准丈母娘来南京了，美名曰旅游，实则考察女婿。刚开始挺紧张的，后来慢慢的便也释然了，又带她们玩了几天，送走丈母娘后，搬到了仙林。
因为搬到仙林了，住的条件没以前好，但是靠近学校，吃饭就不需要自己开火了（其实也没条件），倒是有点怀念以前和灵儿一起做饭拌嘴的时光了。当然最重要的一点，住的离我的灵儿更近了，步行也就五分钟。
十一的假期回家了，因为一个哥们结婚了，祝福他们。
自评
今年做的比较失败的地方：
年初的时候虽然有这一年的计划，但是太笼统，目标不明确。
下半年在仙林的学习意识太弱了。
做事还是没有做到三思后行，许多事做的太鲁莽，与灵儿的那几次吵架就是典型的例子。
总体来说，我在2011还是达到了预定的目标，我算是平安的度过了自己的本命年，不管是职业规划，还是感情生活，都在有条不紊的继续着。
展望
最后说说对2012年的计划和憧憬。过两天写。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-01-16 01:58:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[2011年终总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="总结"><![CDATA[总结]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>永恒的高达–插曲信じればこそ</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[听着这首曲子，我仿佛看到了基拉的那张忧伤的脸和旁边默默陪伴他的拉克丝，又看到了拉米亚斯在巴尔特菲尔德的鼓励下重新振作的场景，看过动漫才知道多感人。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-01-16 20:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[永恒的高达–插曲信じればこそ]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="动漫"><![CDATA[动漫]]></category><category domain="post_tag" nicename="高达"><![CDATA[高达]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>fate stay night 有感</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[歌名: あなたがいた森<曾有你的森林>
(TV動畫)『FATE / STAY NIGHT』ED
一口气看完了fate stay night，感触颇多。
曾经，我和saber一样，抱有回到过去改变自己挽救过失的幻想，但是听到士郎对saber的一番话后，我突然就明白，即便是满是缺陷的过去，我也是舍不得丢掉的，对回忆虽有惋惜，但是不应该有后悔。结局中两人无悔的面对未来也是很激励人心的。
直到第二十话，士郎才发觉他是喜欢着saber的，又或者说在他第一次见到saber的时候就开始了，只是他并未察觉。其实saber早就对士郎产生了恋人间的感情，只是一直被做为王的她“从未认为自己是女人”的想法压制着。在她明白了圣杯的本质后又做了十年前同样的事，只是这次的情境与上次是截然不同的–绝对的坚决却又带着一丝丝的不舍。
终于，在丢下那句“士郎，我，爱着你”后saber回到了她的时代，如果是爱情主线，那这个结局确实是个不太杯具的杯具，但是正如英雄王被saber杀掉前说的，“有些东西是无法到手才显得格外美丽”，所以这样看来，以梦的延续作为结局又是格外完美的。“有朝一日记忆也会渐渐淡溥，也许连她的声音，她的形态也都会慢慢忘记，即便如此，即使这样我曾经喜欢过一名叫saber的女孩，绝对不会忘记”。
游戏终于下好了，希望能留下saber，也许会像archer说的“在想象中打败他，你也只能做到这些了”。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-02-1 08:20:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[fate stay night 有感]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="fate stay night"><![CDATA[fate stay night]]></category><category domain="post_tag" nicename="动漫"><![CDATA[动漫]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>一个小故事</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[无意间看那到一个小故事，觉得很有意思：
一个人去买鹦鹉，看到一只鹦鹉前标：此鹦鹉会两门语言，售价二百元。
另一只鹦鹉前则标道：此鹦鹉会四门语言，售价四百元。
该买哪只呢？两只都毛色光鲜，非常灵活可爱。这人转啊转，拿不定主意。
结果突然发现一只老掉了牙的鹦鹉，毛色暗淡散乱，标价八百元。
这人赶紧将老板叫来：这只鹦鹉是不是会说八门语言？
店主说：不。
这人奇怪了：那为什么又老又丑，又没有能力，会值这个数呢？
店主回答：因为另外两只鹦鹉叫这只鹦鹉老板。
永远不要觉得你的leader能力差。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-02-9 15:54:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[一个小故事]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="寓意"><![CDATA[寓意]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>知识管理！</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[知识管理
]]></content:encoded>
                <wp:post_date><![CDATA[2012-03-31 10:24:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[知识管理！]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="读书笔记"><![CDATA[读书笔记]]></category></item>

        <item>
                <title>西安游记</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[突然心血来潮，清明去了西安，算是圆了高中的一个愿望。
决定的匆忙，只买到了硬座，我倒是无所谓，以前上学的时候这点罪没少受，灵儿可就苦了。酒店定在了市中心钟楼旁，主要是考虑到交通和吃的（回民街）。 为了无痛度过火车上的慢慢长夜，我下了经典的九五版神雕侠侣，而且考虑到我的手机电池不给力，还买了移动电源，5000mah的，事后证明这个还是很有用的。
31日晚上七点离开南京，1日早上九点到西安站，历时十四个小时，找酒店花了点时间，作为一个吃货，我在酒店checkin后都没有休息就杀向了回民街。
找到了名气很大的老孙家，点了碗羊肉泡馍，果然名不虚传。
to be continued…
]]></content:encoded>
                <wp:post_date><![CDATA[2012-04-1 02:11:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[西安游记]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="旅游"><![CDATA[旅游]]></category><category domain="post_tag" nicename="西安"><![CDATA[西安]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>201204 keys</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[时间银行
英语口语
我遵守规则的同时，规则也在守护着我
主动打招呼
矛盾的戒律
思维惯性
把失败变成财产
尝试猜测别人的心思
历史记录的重要性
习惯性反驳
猫和狗
]]></content:encoded>
                <wp:post_date><![CDATA[2012-04-23 10:58:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[201204 keys]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="感悟"><![CDATA[感悟]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>父母</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[昨天晚上打电话回家说了腿上长红斑的事，一大早就又接到我妈电话询问，我妈说我爸怕我出事，还叫多打几次，在这之前父亲还因为我的倔强而生气（说我的号码不吉利要我换我不同意），瞬间感动，父母的心永远牵动着你。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-05-31 07:25:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[父母]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="碎碎念"><![CDATA[碎碎念]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>人活着的意义</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[看到的时候突然想到那句“我死后，我写的代码该有多寂寞啊”。
人死了究竟会怎样？真的会有灵魂吗？真的会投胎转世吗？倘若不是，那么我的意识会去哪？这个问题太深奥，我反正是想不通。
由死转而想到活着的意义，这是我一直在思考的问题，今天又有了新的觉悟：
人活着的意义在于，对身边的人负责，对生存的环境负责。
需要对父母负责，他们抚育你，希望你生活的美好；
需要对妻子负责，他们已你为精神和物质依托，你要给他们美好的生活；
需要对朋友负责，他们视你为挚友，少了你他们会很伤心；
需要对社会负责，历史的车轮滚滚向前，你不能拖后腿；
总之，人活着的意义在于各种负责。
个人感悟，勿喷勿喷。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-06-7 17:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[人活着的意义]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="碎碎念"><![CDATA[碎碎念]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>一个碎碎念</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[老是幻想自己被困于南太平洋的某个小岛上，像鲁滨逊那样生存下去。
就是想过过野人的生活，听歌吧。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-05-29 16:27:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[一个碎碎念]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="碎碎念"><![CDATA[碎碎念]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>201206 keys</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[经营自己
欲无止也
老板问你问题之前已经有答案了
never excuse
]]></content:encoded>
                <wp:post_date><![CDATA[2012-06-11 12:35:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[201206 keys]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="感悟"><![CDATA[感悟]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>刚刚看完《战马》，挺感动</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[RT
]]></content:encoded>
                <wp:post_date><![CDATA[2012-07-1 00:04:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[刚刚看完《战马》，挺感动]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>Time to Say Goodbye</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前段时间看了一个迪拜音乐喷泉的视频，喷泉的背景音乐吸引了我，一直记在心上。
今天听虾米电台，竟然再次听到，果断收藏，冥冥之中必有天意啊！
话说班得瑞的专辑我没有漏掉一个，怎么唯独对这个曲子没记忆呢？
]]></content:encoded>
                <wp:post_date><![CDATA[2012-07-28 10:44:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[Time to Say Goodbye]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="music"><![CDATA[music]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>We are all just prisoners here, of our own device</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[We are all just prisoners here, of our own device
form 《hotel california》
]]></content:encoded>
                <wp:post_date><![CDATA[2012-07-28 11:17:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[We are all just prisoners here, of our own device]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="music"><![CDATA[music]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>麦兜</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[今天去豆瓣，加入了麦兜小组。
回想起半个月前看的《麦兜当当伴我心》，那股子忧伤的基调深深的烙在我心中。
其实《伴我心》已经是我做了心理准备才看的，因为之前的《菠萝油王子》让我映像特别深，甚至于我都不敢一个人孤独的看。
不了解麦兜之前，我只认为它是一只可爱的卡通猪，看了系列电影后，让我想了很多，让我不在觉得它只是一个卡通动物。
感觉这种东西，一切尽在不言中吧。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-08-24 13:22:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[麦兜]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="麦兜"><![CDATA[麦兜]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>查看编译链用的库文件位置</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[?
View Code
BASH
1
XXX-gcc
-print-file-name
libc.a
同理可得头文件位置。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-09-5 11:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[查看编译链用的库文件位置]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="命令技巧"><![CDATA[命令技巧]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>jay，过去的记忆</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[半岛铁盒，简单爱，爱在西元前，双截棍，心情。。。
听到这些熟悉却又遥远的歌，就突然觉得自己回到了高中那单纯的时代。
那时候，还没有吊丝，还没有高帅富，也没有地沟油，喝奶粉也是喝不死人的，药是治病的。。。
]]></content:encoded>
                <wp:post_date><![CDATA[2012-09-27 14:04:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[jay，过去的记忆]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="jay"><![CDATA[jay]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>mips delay slot那点事</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[接触mips也有一段时间了，发现了delay slot的一个有趣的地方。
首先，问题是怎么引入的呢？
最近做mips exception方面的东西，基于ecos，打算支持coredump，以便系统发生崩溃的时候得到一些信息，但是ecos的一些特性（如不支持MMU，kernel space和user space未隔离），导致coredump不能像在linux kernel中那么得到，最终coredump的内容还是生成了，但是我要怎么把它写入u盘呢？显然在exception模式下是不现实的。于是，EPC登场了，mips 有个precise exception的概念，也就是when exception occured, EPC总是指向受害指令，但是有一个例外，那就是如果受害指令处于delay slot，那么epc会指向受害指令之前的那条分支指令。我的想法是直接用一条jal指令替换掉受害指令，这样就能在exception返回后运行我的函数。
那么，如果受害指令处于delay slot中，那么我修改后的代码就类似于：
jal xxxx
jal yyyy
nop
第二条就由原本的受害指令被我修改成一条跳转指令，它在“jal xxxx”的delay slot中，但是他本身又是一条分支指令，应该再去执行它delay slot中的指令，这就让人费解了，到底这样的指令执行的结果会是怎么样的？
实践证明，第二条和第三条指令不会被执行到，不明白这是特性呢，还是bug？
]]></content:encoded>
                <wp:post_date><![CDATA[2012-11-30 18:07:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[mips delay slot那点事]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="mips"><![CDATA[mips]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category></item>

        <item>
                <title>2012年终总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[。
——————–2013/02/03———————
1月初的时候，我在这挖了个坑，打算以后有感触了完成年终总结的，但是因为出差的缘故（借口！）拖了整整一个月。
其实一直觉得自己今年没有干什么事，所以无东西可写。后来看到朋友的一篇年终，觉得自己很肤浅，于是开始思索自己的生活。
不管怎么样，还是先记下流水账吧。
11年末的时候，因为工作方向的问题，我已经在考虑跳槽的事了。过完年回南京后，开始在网上投简历，最终收到了三家比较大公司的offer：
1. 苏宁：机顶盒系统的定制开发，mips+linux；
2. 普天：嵌入式视频监控的一个项目，arm+linux；
3. SAMSUNG： linux kernel的优化、移植以及驱动，其实是DTV system，mips（后话）。
收到这三家的offer后，我基本上没有怎么犹豫的选择了SAMSUNG，虽然待遇不是最好的，但是我相信在SAMSUNG的发展空间会更大。
之前没有接触过DTV和mips，所以入职后的前两个月，除了培训在外的时间，我在公司一直都是恶补这些方面的知识，现在看来，这段时间是我今年学习最扎实的时候了。5月正式进入了一个新的项目组。
这个项目组并不是基于linux的系统，而是eCos。于是又开始学习eCos，好在eCos远没有linux那么复杂。前期的学习主要通过QEMU，后来因为硬件的确定，开始porting eCos到mips SOC板子上。porting的过程中又对mips有了更深的理解。
这个项目一直持续到1月底，只是做了一个电视系统的原型，还有后续的项目。通过了这个项目，我学到了很多新知识：
1. mips体系结构；
2. ecos；
3. dtv的相关知识，tuner，demux。。。
工作的话，应该在年前是告一段落了。
情感上，没有波澜，一切有条不紊的进行。
但是，学习上，激情在退化，这是我在新的一年需要反思的地方。
简而概之，今年的我，工作环境好了，但是自身也松懈了。我希望现在的这种状态不要带到年后。
关于新的一年的展望与希望，我想的很现实，稳定工作，扎实学习，买房结婚。
我要通过自己的努力不让对我抱有期待的家人失望。
最后，给自己打气，加油！
]]></content:encoded>
                <wp:post_date><![CDATA[2013-01-5 21:15:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[2012年终总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="总结"><![CDATA[总结]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>CLANNAD–超弦下的那丝忧伤</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[一口气看完了CLANNAD两部。目前看来，它是给我印象最深的动漫，没有之一。 尤其是第二部，说他是Key社名作三大催泪弹，确实是名副其实。
“这次该你好好的哭一场了，觉得撑不下去的时候，还有我在，在你哭完之前，我都会在你的身边”
这是朋也决定和汐一起生活后秋生对早苗说的话，他们坚持了5年，终于等到了朋也的醒悟，这对夫妻，曾经都有自己的梦想，渚出生后，便成了他们的新的梦想，渚走后，汐也成了他们唯一的寄托。而如今，寄托突然不见的失落，让早苗潸然泪下，但是这泪水中同时又包含了许多对朋也的期待和祝福。
“已经。。。可以了吗，我已经，完成了自己的使命了吗”
这句话从一个丧妻多年、儿子离家出走的父亲嘴中说出来，是多么的可悲，在看到朋也能够让他放心离去的时候，他终于解脱了，不必继续靠酒精麻痹自己了。
我没学过超弦理论，也不了解平行空间，虽然最后朋也和他的朋友们都生活在幸福之中，但是，另一个平行空间的朋也确实是一个人孤独终老的吧。在我看来，那些存在于记忆中的这些忧伤并不会因为美满的结局而被淡忘。
]]></content:encoded>
                <wp:post_date><![CDATA[2013-02-13 19:26:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[CLANNAD–超弦下的那丝忧伤]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="CLANNAD"><![CDATA[CLANNAD]]></category><category domain="post_tag" nicename="动漫"><![CDATA[动漫]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>痛定思痛</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[虽然已经23点了，这个对于我来说，最起码还有两个小时我才会上床睡觉。
这么晚，我干什么呢？
今天收到公司的内部邮件，是一个类似于topcoder的站点，鼓励员工上去竞赛。看了前两期的题目，我的思绪慢慢的就飘到了大学的时候。
那时候，我很喜欢编程，喜欢研究网上的各类算法，也会为了实现一个算法熬到凌晨。
但是再看看现在的自己，不思进取，天天游戏，学习早被我丢到九霄云外了。我之前窃以为自己是个聪明的人，如今看来，我蠢的不行。
《算法导论》里写了哪些算法我已经不再记得，《编程珠玑》里的内容我也开始模糊，我现在做什么东西都是“不求甚解”，糊弄糊弄就过去了。
我需要重新燃烧自己的斗志！！！
]]></content:encoded>
                <wp:post_date><![CDATA[2013-03-25 23:16:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[痛定思痛]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>买房那些事–序篇</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[前天凌晨5点才睡，昨天晚上骑车去下马坊夜钓了一把，没什么收获，又是凌晨3点才睡，不过今天早上6点多又起床了。
睡的很少，也不觉得累，我这是怎么了？
———————————————————很猥琐的分割线—————————————————————
金三银四，一点不假，最近房价又开始涨起来了。
我开始准备买房了：
1. 主城区的房子太贵，没想过；
2. 江宁基本已经没有低于1w的房了，上周去了百家湖，没有低于1.3w的；
3. 桥北的房子价格能接受，地铁3号线开通之后交通能方便一点点（那边人太多），但是环境让我没法接受；
4. 城南（板桥）交通太不方便，关键是也不便宜，直逼桥北；
这么看来，貌似江浦是比较适合我了，虽然我知道那边的配套很差，学区很差，但是有10号线，交通还行，有老山，环境很好。
目前看好万科的一个盘，精装交付，户型觉得也不错。
剧有经验的同事讲，其实买房，就是脑袋一热的事。
]]></content:encoded>
                <wp:post_date><![CDATA[2013-04-3 13:55:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[买房那些事–序篇]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>买房那些事–决定篇</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[清明到了，父母和大姨一家来给我参谋房子的事。
大家一致对我们看好的盘评价不错。于是，交定金，签认购合同，房子到手了。
觉得买房子确实是脑袋一热的事啊，看的盘不超过10个。呵呵。
之后就是要去办各种手续了。
]]></content:encoded>
                <wp:post_date><![CDATA[2013-04-6 21:42:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[买房那些事–决定篇]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>赞一个doxygen！</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[以前一直肤浅的认为doxygen只是一个文档生成工具。
今天才发现，连UML图都能做出来，太强大了，落伍了！
]]></content:encoded>
                <wp:post_date><![CDATA[2013-05-9 21:57:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[赞一个doxygen！]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="doxygen"><![CDATA[doxygen]]></category><category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>交叉编译没有ldd，怎么办？</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[?
View Code
C
1
mipsel
-
linux
-
gnu
-
readelf
-
d a.
out
|
grep NEEDED
]]></content:encoded>
                <wp:post_date><![CDATA[2013-06-8 11:50:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[交叉编译没有ldd，怎么办？]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="命令技巧"><![CDATA[命令技巧]]></category><category domain="category" nicename="embeded"><![CDATA[embeded]]></category></item>

        <item>
                <title>无题～</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[我不是李商隐，不会作无题诗。
额，现在凌晨4点。刚刚在POJ上做完一道不算难的题，时间没达到需求。现在我正悠哉的喝着beer，听着《雨一直下》–初中时期流行的歌，感触颇多啊～
前段时间猝死案例频发，对比了下不良生活习惯，10条中我占了8条，真是高危啊。最近失眠的厉害，不到2点是不可能有睡意，2点之后要看运气。
我是典型的苦逼程序员作息规律：早上9点起，9点40到公司，19点下班，吃完饭到家20点，开练DOTA2，打到24点，一天结束。凌晨看看算法到2点左右，睡觉，睡不着了起来继续DOTA，困了为止。
唉，前段时间我的枫叶挂掉了，临走之前下了个蛋，看样子是受精蛋，希望我能把它孵出来吧。乌乌和蛋蛋但是还很活泼，天天使不玩的劲。
哦对了，无法再忍受笔记本打游戏了，去弄了台机器，配置还说得过去，E3+7850，基本主流游戏无压力。
最近写算法，发现C++忘的干干净净，STL中有哪些东西都不记得了，囧～驱动和OS的代码写多了，都见不到C++了。
估计过段时间又要去总部出差了，擦，一想到要和棒子交流，就不爽。
既然提到棒子了，我得再说说前段时间在dota2国际服上遇到的几个奇葩。有一局，对面棒子4人黑店，开打之前的第一句话就是“fuck china”，我当即就回“fuck korea”, 哎，那局就没怎么打了。尽和棒子喷了。还有一局，一个棒子在我们队伍，其他应该有老毛子，老美，棒子看到我是中文ID，又开始喷中国，最后不知谁把小鸡送了，老毛子直接说“must be the storm”(棒子玩的storm)，可见棒子的臭名在就飘洋过海了。再有一局，一个菲律宾的2货直接就喷中国人，我就没和他喷了，他英语不好，说了听不懂。。事后直接举报了。哎，难道我大天朝在国际上糟那么多人记恨么？
再说说日货的问题，上周去珠江路，南京中天，应该也是在南京做外设比较不错的店了，打算过去买把机械键盘，老板一个劲的向我推荐filco，我就说我不要日货，老板就开始喷我，日本的东西那么好，你怎么不要，抵制日货有什么意义？我卖东西从来不管他是从哪来的，只关心好不好，我扭头就走了，这种经历还发生过一次，我去买DVD-RW盘，店里只有sony的，我说我不要日货，同样被喷。我就不懂了，你们的节操呢，没有去过南京大屠杀纪念馆？或者难道只是为了钱？我这么说别人说我是愤青，愤青就愤青，反正我还是那句话，我不买日本鬼子的东西，周围的人买了我还是要喷。
实在想不通有些人，别人骂你中国人，你毫无感觉，别人欺负你，你还腆着脸上去，更有甚者，说爱国的就是SB，我不懂了，没有国家，哪有你，是不是你们这些就是将来的汉奸卖国贼。当然，这和我dang又是另一回事了。越写越气，满肚子怒气发不出去。。。。。。。。。
中国，你何时能强大，中国人，你何时能觉醒。
我不懂，中国政府持有那么多美国国债作什么？这些钱，放到西部做教育难道不好吗？中国官员，你们一年的三公消费9000亿是教育投入的多少倍？恨自己没有能力去改变，每每想到每月那么多的税被他们这样花掉，我就特难受。。。
哎，算了，不发牢骚了，天发白了，赶紧睡会把。。。
]]></content:encoded>
                <wp:post_date><![CDATA[2013-07-22 04:55:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[无题～]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>周日杂念–说说十一区动漫</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[现在当地时间凌晨零点二十，这篇文章发自suwon的一个小宾馆。
向来我一直都是对日本充满憎恶的–抵制日本人，抵制日本货。但是唯有两点，是不能不直视的：武士道精神与动漫。
武士道精神自不必多说，动漫确实也是日本人重要的文化输出。
刚刚还文思泉涌，突然脑袋空空。。。
花了一整天，重温了宫崎骏的经典作。。
挖坑待续吧~
]]></content:encoded>
                <wp:post_date><![CDATA[2013-08-18 23:31:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[周日杂念–说说十一区动漫]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>JEWEL SONG</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[无意间再次听到这首歌，突然觉得自己回到了零六年的九月，那会的我在飓风，看着灵灵的空间，这首歌就是她空间的BGM。
很怀恋那个年代，每个人都是一张青涩的脸，都有一颗纯粹的心。
]]></content:encoded>
                <wp:post_date><![CDATA[2013-10-26 11:30:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[JEWEL SONG]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>我们最大的错误就是把最差的脾气和最糟糕的一面都给了最亲近和最爱的人，却把耐心和宽容给了陌生人。</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[对身边的最亲说一句对不起吧。
]]></content:encoded>
                <wp:post_date><![CDATA[2014-01-6 15:54:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[我们最大的错误就是把最差的脾气和最糟糕的一面都给了最亲近和最爱的人，却把耐心和宽容给了陌生人。]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>莫名悲伤–原来自己老了</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[喜欢听老歌，喜欢看老电脑。
幸好有你在身边，谢谢！
]]></content:encoded>
                <wp:post_date><![CDATA[2014-01-27 14:57:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[莫名悲伤–原来自己老了]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>活着</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[看得我好揪心，也不懂他活着的意义。
]]></content:encoded>
                <wp:post_date><![CDATA[2014-02-27 01:44:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[活着]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="乱七八糟"><![CDATA[乱七八糟]]></category></item>

        <item>
                <title>补：2013年终总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[出大事了，2013年我竟然没有写年终总结？
年纪大了，记忆越来越不行了，只能从about页面中的近况慢慢回忆2013年了。
工作
2013年，是我到SAMSUNG的第二年，有关eCos的项目基本结束了，当时在HQ经历了2轮demo，虽然最终没有量产计划，但是还是拿到了一个不小的奖项。
然后开始专注与另一个SAMSUNG TV OS（因为保密协议，不能透露太多），去HQ出差两次，也得到了韩国工程师的赞誉，算是为我们项目组挣了面子。
下半年开始了关于JTAG performance调试器的研究，分析了TARCE32的工作机理，深度的学习了EJTAG协议和openJTAG硬件，并对FPGA有一定的了解。
生活
2013年最大的事就是房子买到了。我清楚的记得，我和女朋友在售楼处刷卡交钱的“喜悦”，虽然面积很小–只有89平，虽然位置很偏–距离新街口30+km，虽然交房很晚–2014年9月30日，但是我们还是喜欢的不得了。
在我的6通电直梦被我女朋友一次又一次扑灭的时候，我开始了DIY四轴的征途，学习开源的姿态控制代码，硬件，综合比较各种方案，从硬件到软件，都研究了一把。最终确定自己的设计，期间学会了用git与朋友协作，使用Kicad画原理图和PCB。这个项目的输出：https://bitbucket.org/hackqiang
因为公司经常有编程大赛，有段时间一有空就去POJ刷题，可惜自己资质不行，距离大牛还很远，慢慢的拿不到成绩也冷淡了下来。
总体上来说，2013年不管是工作上的收获还是生活上的点滴，都给我很不错的充实感，可能唯一的遗憾就是忘了写年终总结了。^_^||
]]></content:encoded>
                <wp:post_date><![CDATA[2015-01-21 14:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[补：2013年终总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="总结"><![CDATA[总结]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>2014年终总结</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[2014，是忙碌的一年，也是碌碌无为的一年。
工作
年初的时候，进入了一个新的项目组，进行kernel相关的工作，期间分析了很多oops的问题，得到了HQ资深工程师的培训，学习了众多samsung对kernel改进的patch，重温了VFS，MM，scheduler等模块，总体上来说，虽然没有学习到太多新鲜的东西，但是对kernel skill帮助是很大的。
随着公司大力推动tizen，下半年开始接触tizen，期间做了一些tizen移植的工作，移植tizen到SAMSUNG私有的电视板子上，后来又移植到了开源硬件cubieboard上。
生活
在女朋友家过了一个很有意思的春节。
因为担心限牌，在丈母娘的支持下买了车–2012款福克斯，手动的，可惜不是2.0排量，感觉还行。6月份拿到驾照，到目前为止已经有3个违章。
10月终于收房了，因为是精装交付的，所以自己只搞了软装，元旦节就正式入住了。
今年突然流行起了智能家居，我也跟风了解了下，并众筹了一台3D打印机，UM2结构的，感觉应该会不错。
今年一整年的博文还是各位数，发现自己越来越不注重记录了，以后一定要改变。
现在已经用todo list来管理自己的生活了。
记得3年前写了一封给未来自己的信，其中提出了一些要求，现在发现完全没有做到，非常的惭愧。所以在新的一年，我希望自己能做到：
少玩游戏
注重知识的积累（记录）
养成早起的习惯
更用心的对待周围的人和事
]]></content:encoded>
                <wp:post_date><![CDATA[2015-01-22 10:29:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[2014年终总结]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="总结"><![CDATA[总结]]></category><category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>kernel中统计ioctl</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[有个需求，要统计开机过程中所有的ioctl操作，用最简单最快的方式实现：直接修改vfs代码，在ioctl中加入统计代码，利用debugfs读取冲击信息：
fs/ioctl.c：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
//add for debug ioctl
#include <linux/debugfs.h>
#define ioc_record_size 80000    //record items
struct
record_data
{
u32 cmd
;
u32 pid
;
char
process_name
[
16
]
;
char
file_name
[
16
]
;
}
;
static
struct
record_data ioc_datas
[
ioc_record_size
]
=
{
0
}
;
static
u8 ioc_flag
=
0
;
//0: not init; 1:runing; 2:stop
static
unsigned
long
ioc_data_offset
=
0
;
spinlock_t ioc_lock
;
/*
* When you add any new common ioctls to the switches above and below
* please update compat_sys_ioctl() too.
*
* do_vfs_ioctl() is not for drivers and not intended to be EXPORT_SYMBOL()'d.
* It's just a simple helper for sys_ioctl and compat_sys_ioctl.
*/
int
do_vfs_ioctl
(
struct
file
*
filp
,
unsigned
int
fd
,
unsigned
int
cmd
,
unsigned
long
arg
)
{
int
error
=
0
;
int
__user
*
argp
=
(
int
__user
*
)
arg
;
struct
inode
*
inode
=
file_inode
(
filp
)
;
//add for debug ioctl
static
struct
dentry
*
ioc_debugfs_root
;
static
struct
debugfs_blob_wrapper ioc_data
;
static
struct
dentry
*
ioc_flag_entry
;
static
struct
dentry
*
ioc_data_entry
;
if
(
ioc_flag
==
0
)
{
printk
(
"========init ioc record========
\n
"
)
;
spin_lock_init
(
&
ioc_lock
)
;
ioc_debugfs_root
=
debugfs_create_dir
(
"ioc_data"
,
NULL
)
;
if
(
!
ioc_debugfs_root
)
goto
ioc_normal
;
ioc_flag_entry
=
debugfs_create_u8
(
"flag"
,
0644
,
ioc_debugfs_root
,
&
ioc_flag
)
;
if
(
!
ioc_flag_entry
)
{
printk
(
"debugfs_create_u8 failed
\n
"
)
;
debugfs_remove_recursive
(
ioc_debugfs_root
)
;
goto
ioc_normal
;
}
ioc_data.
data
=
ioc_datas
;
ioc_data.
size
=
ioc_record_size
*
sizeof
(
struct
record_data
)
;
ioc_data_entry
=
debugfs_create_blob
(
"data"
,
0644
,
ioc_debugfs_root
,
&
ioc_data
)
;
if
(
!
ioc_data_entry
)
{
printk
(
"debugfs_create_blob failed
\n
"
)
;
debugfs_remove_recursive
(
ioc_debugfs_root
)
;
goto
ioc_normal
;
}
printk
(
"========init ioc record OK========
\n
"
)
;
ioc_flag
=
1
;
ioc_data_offset
=
0
;
}
//printk("<i> [%d] %u\n", current->tgid, cmd);
//record into memory
if
(
ioc_flag
==
1
)
{
spin_lock
(
&
ioc_lock
)
;
if
(
ioc_data_offset
<
ioc_record_size
)
{
ioc_datas
[
ioc_data_offset
]
.
cmd
=
cmd
;
ioc_datas
[
ioc_data_offset
]
.
pid
=
current
->
tgid
;
memcpy
(
ioc_datas
[
ioc_data_offset
]
.
process_name
,
current
->
comm
,
16
)
;
memcpy
(
ioc_datas
[
ioc_data_offset
]
.
file_name
,
filp
->
f_path.
dentry
->
d_iname
,
16
)
;
ioc_data_offset
++;
}
spin_unlock
(
&
ioc_lock
)
;
}
ioc_normal
:
其中记录了被打开的文件，进行操作的线程名，操作的进程组pid以及cmd。
进入shell，再拿到统计数据：
?
View Code
BASH
1
2
3
mount
-t
debugfs none
/
sys
/
kernel
/
debug
/
cat
/
sys
/
kernel
/
debug
/
ioc_data
/
data
>
/
tmp
/
dd
ps
ax
>
/
tmp
/
ps
最后通过一个小程序解析拿到的数据：
?
View Code
C
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
#include <stdio.h>
char
procname
[
65535
]
[
1024
]
=
{
0
}
;
struct
record_data
{
unsigned
int
cmd
;
unsigned
int
pid
;
char
process_name
[
16
]
;
char
file_name
[
16
]
;
}
;
main
(
int
argc
,
char
**
argv
)
{
unsigned
int
line
=
0
;
int
pid
,
i
;
int
fd
=
open
(
"dd"
,
O_RDWR
)
;
char
psbuf
[
1024
]
=
{
0
}
;
while
(
gets
(
psbuf
)
)
{
i
=
0
;
pid
=
atoi
(
psbuf
)
;
while
(
psbuf
[
i
]
!=
' '
)
i
++;
strcpy
(
procname
[
pid
]
,
psbuf
+
i
+
1
)
;
memset
(
psbuf
,
0
,
1024
)
;
}
struct
record_data record
=
{
0
}
;
while
(
read
(
fd
,
&
record
,
sizeof
(
struct
record_data
)
)
==
sizeof
(
struct
record_data
)
&&
record.
pid
)
{
printf
(
"%08d %16s 0x%08x %16s %s
\n
"
,
line
++,
record.
file_name
,
record.
cmd
,
record.
process_name
,
procname
[
record.
pid
]
[
0
]
?
procname
[
record.
pid
]
:
"UNKNOW"
)
;
memset
(
&
record
,
0
,
sizeof
(
struct
record_data
)
)
;
}
}
?
View Code
BASH
1
2
3
4
5
6
7
8
9
rm
-rf
pps
cat
ps
|
while
read
line2
do
pid
=
`
echo
$line2
|
awk
'{print $1}'
`
name
=
`
echo
$line2
|
awk
'{print $5}'
`
echo
$pid
$name
>>
pps
done
cat
pps
|
.
/
a.out
]]></content:encoded>
                <wp:post_date><![CDATA[2015-01-26 09:44:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[kernel中统计ioctl]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>

        <item>
                <title>近况–随便写写</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[不知不觉新的一年都要过去一个季度了，我竟然才反应过来。
过年开车回老家，来回700km，幸运的是没有选择免费的时间出行，避免了堵车和潜在的事故，经过这700km的磨练，觉得对车的掌控又上升了一个等级～
年前众筹的3D打印机失败了，发货也是一直再推迟，索性自己DIY一个，目前进度30%，还在淘宝上疯狂采购零件。
春天已经来了，气温上升了，同时我观星的欲望也是蠢蠢欲动，想着是不是该买设备了。
本来想去HK玩一玩，最近发现HK也不太平了，打算放弃了。
最近开始深入linux MM，希望在这方面有所建树。
后续的事还有不少，拍婚纱照，拿结婚证，办产权证，回家办酒席，想想都觉得烦和怕。
新年新迹象，今年在工作上的改进是：
每天都自己写工作记录，记录和总结工作中遇到的问题
使用redmine指定和追踪工作任务
在生活上的改进是：
早起（早睡还没有做到^_^）
使用todo软件安排生活
多做饭，锻炼厨艺
游戏玩的少了
希望能保持下去。
]]></content:encoded>
                <wp:post_date><![CDATA[2015-03-12 11:09:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[近况–随便写写]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>她掉眼泪你也不大紧张了</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[一双鞋，刚买的时候蹭上一点灰都要蹲下来擦干净，穿久之后即使被人踩一脚可能也很少低头。人大抵都是如此，不论对物还是对情，最初，她皱一下眉你都心疼，到后来，她掉眼泪你也不大紧张了。
Nerver be like this.
]]></content:encoded>
                <wp:post_date><![CDATA[2015-03-18 15:52:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[她掉眼泪你也不大紧张了]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="category" nicename="心情琐事"><![CDATA[心情琐事]]></category></item>

        <item>
                <title>zRAM分析1：zram设备</title>
                <dc:creator><![CDATA[qiang]]></dc:creator>
                <description></description>
                <content:encoded><![CDATA[zRAM虽然说出来的时间挺长的，但是细节的资料不是很多，我把这几天看到的东西记录下，也方便后人。
zRAM是依赖swap机制的，核心的思想就是将待写入swap分区的页面压缩后写入内存，就要就避免了实际的swap分区，并且速度也相对快，最最关键的是对于一些使用flash设备的友好。
zRAM的主要文件都在drivers/block/zram中，核心文件很少：
zram_drv.c
以及为了减少内存碎片使用的一个内存分配器：
zsmalloc.c
关于这个内存分配器，后面再说。
惯例从init看起：
]]></content:encoded>
                <wp:post_date><![CDATA[2015-03-19 21:33:00]]></wp:post_date>
                <wp:comment_status><![CDATA[closed]]></wp:comment_status>
                <wp:post_name><![CDATA[zRAM分析1：zram设备]]></wp:post_name>
                <wp:status><![CDATA[publish]]></wp:status>
                <wp:post_parent>0</wp:post_parent>
                <wp:menu_order>0</wp:menu_order>
                <wp:post_type><![CDATA[post]]></wp:post_type>
                <wp:post_password><![CDATA[]]></wp:post_password>
                <wp:is_sticky>0</wp:is_sticky>
        <category domain="post_tag" nicename="kernel"><![CDATA[kernel]]></category><category domain="post_tag" nicename="zram"><![CDATA[zram]]></category><category domain="category" nicename="kernel/drivers"><![CDATA[kernel/drivers]]></category><category domain="category" nicename="Linux"><![CDATA[Linux]]></category></item>
</channel>
</rss>
